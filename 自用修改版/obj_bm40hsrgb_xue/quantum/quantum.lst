   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB24:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #include "magic.h"
  19:quantum/quantum.c **** 
  20:quantum/quantum.c **** #ifdef BLUETOOTH_ENABLE
  21:quantum/quantum.c **** #    include "outputselect.h"
  22:quantum/quantum.c **** #endif
  23:quantum/quantum.c **** 
  24:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
  25:quantum/quantum.c **** #    include "backlight.h"
  26:quantum/quantum.c **** #endif
  27:quantum/quantum.c **** 
  28:quantum/quantum.c **** #ifdef API_ENABLE
  29:quantum/quantum.c **** #    include "api.h"
  30:quantum/quantum.c **** #endif
  31:quantum/quantum.c **** 
  32:quantum/quantum.c **** #ifdef MIDI_ENABLE
  33:quantum/quantum.c **** #    include "process_midi.h"
  34:quantum/quantum.c **** #endif
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  37:quantum/quantum.c **** #    include "velocikey.h"
  38:quantum/quantum.c **** #endif
  39:quantum/quantum.c **** 
  40:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  41:quantum/quantum.c **** #    include "haptic.h"
  42:quantum/quantum.c **** #endif
  43:quantum/quantum.c **** 
  44:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  45:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  46:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  47:quantum/quantum.c **** #    endif
  48:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  49:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  50:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  51:quantum/quantum.c **** #    endif
  52:quantum/quantum.c **** #    ifdef SENDSTRING_BELL
  53:quantum/quantum.c **** float bell_song[][2] = SONG(TERMINAL_SOUND);
  54:quantum/quantum.c **** #    endif
  55:quantum/quantum.c **** #endif
  56:quantum/quantum.c **** 
  57:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
  58:quantum/quantum.c **** #    include "process_auto_shift.h"
  59:quantum/quantum.c **** #endif
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  16               		.loc 1 61 58 view -0
  17               		.cfi_startproc
  18               		.loc 1 61 58 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  62:quantum/quantum.c ****     switch (code) {
  31               		.loc 1 62 5 is_stmt 1 view .LVU2
  32 0004 9C01      		movw r18,r24
  33 0006 3A95      		dec r19
  34 0008 2115      		cp r18,__zero_reg__
  35 000a 3F41      		sbci r19,31
  36 000c 00F4      		brsh .L1
  63:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  64:quantum/quantum.c ****             break;
  37               		.loc 1 64 13 view .LVU3
  65:quantum/quantum.c ****         default:
  66:quantum/quantum.c ****             return;
  67:quantum/quantum.c ****     }
  68:quantum/quantum.c **** 
  69:quantum/quantum.c ****     uint8_t mods_to_send = 0;
  38               		.loc 1 69 5 view .LVU4
  39               	.LVL1:
  70:quantum/quantum.c **** 
  71:quantum/quantum.c ****     if (code & QK_RMODS_MIN) {  // Right mod flag is set
  40               		.loc 1 71 5 view .LVU5
  41 000e EC01      		movw r28,r24
  42 0010 CC27      		clr r28
  43 0012 D170      		andi r29,1
  44 0014 DC01      		movw r26,r24
  45 0016 AA27      		clr r26
  46 0018 B270      		andi r27,2
  47 001a AC01      		movw r20,r24
  48 001c 4427      		clr r20
  49 001e 5470      		andi r21,4
  50 0020 9C01      		movw r18,r24
  51 0022 2227      		clr r18
  52 0024 3870      		andi r19,8
  53               		.loc 1 71 8 is_stmt 0 view .LVU6
  54 0026 94FF      		sbrs r25,4
  55 0028 00C0      		rjmp .L3
  72:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_RCTL);
  56               		.loc 1 72 9 is_stmt 1 view .LVU7
  57               		.loc 1 72 42 is_stmt 0 view .LVU8
  58 002a 80E1      		ldi r24,lo8(16)
  59               	.LVL2:
  60               		.loc 1 72 12 view .LVU9
  61 002c CD2B      		or r28,r29
  62 002e 01F4      		brne .L4
  69:quantum/quantum.c **** 
  63               		.loc 1 69 13 view .LVU10
  64 0030 80E0      		ldi r24,0
  65               	.L4:
  66               	.LVL3:
  73:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_RSFT);
  67               		.loc 1 73 9 is_stmt 1 view .LVU11
  68               		.loc 1 73 12 is_stmt 0 view .LVU12
  69 0032 AB2B      		or r26,r27
  70 0034 01F0      		breq .L5
  71               		.loc 1 73 29 is_stmt 1 discriminator 1 view .LVU13
  72               		.loc 1 73 42 is_stmt 0 discriminator 1 view .LVU14
  73 0036 8062      		ori r24,lo8(32)
  74               	.LVL4:
  75               	.L5:
  74:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_RALT);
  76               		.loc 1 74 9 is_stmt 1 view .LVU15
  77               		.loc 1 74 12 is_stmt 0 view .LVU16
  78 0038 452B      		or r20,r21
  79 003a 01F0      		breq .L6
  80               		.loc 1 74 29 is_stmt 1 discriminator 1 view .LVU17
  81               		.loc 1 74 42 is_stmt 0 discriminator 1 view .LVU18
  82 003c 8064      		ori r24,lo8(64)
  83               	.LVL5:
  84               	.L6:
  75:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_RGUI);
  85               		.loc 1 75 9 is_stmt 1 view .LVU19
  86               		.loc 1 75 12 is_stmt 0 view .LVU20
  87 003e 232B      		or r18,r19
  88 0040 01F0      		breq .L7
  89               		.loc 1 75 29 is_stmt 1 discriminator 1 view .LVU21
  90               		.loc 1 75 42 is_stmt 0 discriminator 1 view .LVU22
  91 0042 8068      		ori r24,lo8(-128)
  92               	.LVL6:
  93               	.L7:
  76:quantum/quantum.c ****     } else {
  77:quantum/quantum.c ****         if (code & QK_LCTL) mods_to_send |= MOD_BIT(KC_LCTL);
  78:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
  79:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
  80:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
  81:quantum/quantum.c ****     }
  82:quantum/quantum.c **** 
  83:quantum/quantum.c ****     f(mods_to_send);
  94               		.loc 1 83 5 is_stmt 1 view .LVU23
  95 0044 FB01      		movw r30,r22
  96               	/* epilogue start */
  84:quantum/quantum.c **** }
  97               		.loc 1 84 1 is_stmt 0 view .LVU24
  98 0046 DF91      		pop r29
  99 0048 CF91      		pop r28
  83:quantum/quantum.c **** }
 100               		.loc 1 83 5 view .LVU25
 101 004a 0994      		ijmp
 102               	.LVL7:
 103               	.L3:
  77:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 104               		.loc 1 77 9 is_stmt 1 view .LVU26
  77:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 105               		.loc 1 77 12 is_stmt 0 view .LVU27
 106 004c 81E0      		ldi r24,lo8(1)
 107               	.LVL8:
  77:quantum/quantum.c ****         if (code & QK_LSFT) mods_to_send |= MOD_BIT(KC_LSFT);
 108               		.loc 1 77 12 view .LVU28
 109 004e CD2B      		or r28,r29
 110 0050 01F4      		brne .L8
 111 0052 80E0      		ldi r24,0
 112               	.L8:
 113               	.LVL9:
  78:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 114               		.loc 1 78 9 is_stmt 1 view .LVU29
  78:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 115               		.loc 1 78 12 is_stmt 0 view .LVU30
 116 0054 AB2B      		or r26,r27
 117 0056 01F0      		breq .L9
  78:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 118               		.loc 1 78 29 is_stmt 1 discriminator 1 view .LVU31
  78:quantum/quantum.c ****         if (code & QK_LALT) mods_to_send |= MOD_BIT(KC_LALT);
 119               		.loc 1 78 42 is_stmt 0 discriminator 1 view .LVU32
 120 0058 8260      		ori r24,lo8(2)
 121               	.LVL10:
 122               	.L9:
  79:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 123               		.loc 1 79 9 is_stmt 1 view .LVU33
  79:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 124               		.loc 1 79 12 is_stmt 0 view .LVU34
 125 005a 452B      		or r20,r21
 126 005c 01F0      		breq .L10
  79:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 127               		.loc 1 79 29 is_stmt 1 discriminator 1 view .LVU35
  79:quantum/quantum.c ****         if (code & QK_LGUI) mods_to_send |= MOD_BIT(KC_LGUI);
 128               		.loc 1 79 42 is_stmt 0 discriminator 1 view .LVU36
 129 005e 8460      		ori r24,lo8(4)
 130               	.LVL11:
 131               	.L10:
  80:quantum/quantum.c ****     }
 132               		.loc 1 80 9 is_stmt 1 view .LVU37
  80:quantum/quantum.c ****     }
 133               		.loc 1 80 12 is_stmt 0 view .LVU38
 134 0060 232B      		or r18,r19
 135 0062 01F0      		breq .L7
  80:quantum/quantum.c ****     }
 136               		.loc 1 80 29 is_stmt 1 discriminator 1 view .LVU39
  80:quantum/quantum.c ****     }
 137               		.loc 1 80 42 is_stmt 0 discriminator 1 view .LVU40
 138 0064 8860      		ori r24,lo8(8)
 139               	.LVL12:
  80:quantum/quantum.c ****     }
 140               		.loc 1 80 42 discriminator 1 view .LVU41
 141 0066 00C0      		rjmp .L7
 142               	.LVL13:
 143               	.L1:
 144               	/* epilogue start */
 145               		.loc 1 84 1 view .LVU42
 146 0068 DF91      		pop r29
 147 006a CF91      		pop r28
 148 006c 0895      		ret
 149               		.cfi_endproc
 150               	.LFE24:
 152               		.section	.text.register_code16,"ax",@progbits
 153               	.global	register_code16
 155               	register_code16:
 156               	.LVL14:
 157               	.LFB25:
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** void register_code16(uint16_t code) {
 158               		.loc 1 86 37 is_stmt 1 view -0
 159               		.cfi_startproc
 160               		.loc 1 86 37 is_stmt 0 view .LVU44
 161 0000 CF93      		push r28
 162               	.LCFI2:
 163               		.cfi_def_cfa_offset 3
 164               		.cfi_offset 28, -2
 165 0002 DF93      		push r29
 166               	.LCFI3:
 167               		.cfi_def_cfa_offset 4
 168               		.cfi_offset 29, -3
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 2 */
 172               	.L__stack_usage = 2
 173 0004 EC01      		movw r28,r24
  87:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 174               		.loc 1 87 5 is_stmt 1 view .LVU45
 175               		.loc 1 87 9 is_stmt 0 view .LVU46
 176 0006 805E      		subi r24,-32
 177 0008 9109      		sbc r25,__zero_reg__
 178               	.LVL15:
 179               		.loc 1 87 8 view .LVU47
 180 000a 0897      		sbiw r24,8
 181 000c 00F0      		brlo .L31
  88:quantum/quantum.c ****         do_code16(code, register_mods);
  89:quantum/quantum.c ****     } else {
  90:quantum/quantum.c ****         do_code16(code, register_weak_mods);
 182               		.loc 1 90 9 discriminator 1 view .LVU48
 183 000e 60E0      		ldi r22,lo8(gs(register_weak_mods))
 184 0010 70E0      		ldi r23,hi8(gs(register_weak_mods))
  87:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 185               		.loc 1 87 22 discriminator 1 view .LVU49
 186 0012 2097      		sbiw r28,0
 187 0014 01F4      		brne .L34
 188               	.L31:
  88:quantum/quantum.c ****         do_code16(code, register_mods);
 189               		.loc 1 88 9 is_stmt 1 view .LVU50
 190 0016 60E0      		ldi r22,lo8(gs(register_mods))
 191 0018 70E0      		ldi r23,hi8(gs(register_mods))
 192               	.L34:
 193               		.loc 1 90 9 is_stmt 0 view .LVU51
 194 001a CE01      		movw r24,r28
 195 001c 0E94 0000 		call do_code16
 196               	.LVL16:
  91:quantum/quantum.c ****     }
  92:quantum/quantum.c ****     register_code(code);
 197               		.loc 1 92 5 is_stmt 1 view .LVU52
 198 0020 8C2F      		mov r24,r28
 199               	/* epilogue start */
  93:quantum/quantum.c **** }
 200               		.loc 1 93 1 is_stmt 0 view .LVU53
 201 0022 DF91      		pop r29
 202 0024 CF91      		pop r28
 203               	.LVL17:
  92:quantum/quantum.c **** }
 204               		.loc 1 92 5 view .LVU54
 205 0026 0C94 0000 		jmp register_code
 206               	.LVL18:
 207               		.cfi_endproc
 208               	.LFE25:
 210               		.section	.text.unregister_code16,"ax",@progbits
 211               	.global	unregister_code16
 213               	unregister_code16:
 214               	.LVL19:
 215               	.LFB26:
  94:quantum/quantum.c **** 
  95:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 216               		.loc 1 95 39 is_stmt 1 view -0
 217               		.cfi_startproc
 218               		.loc 1 95 39 is_stmt 0 view .LVU56
 219 0000 CF93      		push r28
 220               	.LCFI4:
 221               		.cfi_def_cfa_offset 3
 222               		.cfi_offset 28, -2
 223 0002 DF93      		push r29
 224               	.LCFI5:
 225               		.cfi_def_cfa_offset 4
 226               		.cfi_offset 29, -3
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 2 */
 230               	.L__stack_usage = 2
 231 0004 EC01      		movw r28,r24
  96:quantum/quantum.c ****     unregister_code(code);
 232               		.loc 1 96 5 is_stmt 1 view .LVU57
 233 0006 0E94 0000 		call unregister_code
 234               	.LVL20:
  97:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 235               		.loc 1 97 5 view .LVU58
 236               		.loc 1 97 9 is_stmt 0 view .LVU59
 237 000a CE01      		movw r24,r28
 238 000c 805E      		subi r24,-32
 239 000e 9109      		sbc r25,__zero_reg__
 240               		.loc 1 97 8 view .LVU60
 241 0010 0897      		sbiw r24,8
 242 0012 00F0      		brlo .L36
  98:quantum/quantum.c ****         do_code16(code, unregister_mods);
  99:quantum/quantum.c ****     } else {
 100:quantum/quantum.c ****         do_code16(code, unregister_weak_mods);
 243               		.loc 1 100 9 discriminator 1 view .LVU61
 244 0014 60E0      		ldi r22,lo8(gs(unregister_weak_mods))
 245 0016 70E0      		ldi r23,hi8(gs(unregister_weak_mods))
  97:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 246               		.loc 1 97 22 discriminator 1 view .LVU62
 247 0018 2097      		sbiw r28,0
 248 001a 01F4      		brne .L38
 249               	.L36:
  98:quantum/quantum.c ****         do_code16(code, unregister_mods);
 250               		.loc 1 98 9 is_stmt 1 view .LVU63
 251 001c 60E0      		ldi r22,lo8(gs(unregister_mods))
 252 001e 70E0      		ldi r23,hi8(gs(unregister_mods))
 253               	.L38:
 254               		.loc 1 100 9 is_stmt 0 view .LVU64
 255 0020 CE01      		movw r24,r28
 256               	/* epilogue start */
 101:quantum/quantum.c ****     }
 102:quantum/quantum.c **** }
 257               		.loc 1 102 1 view .LVU65
 258 0022 DF91      		pop r29
 259 0024 CF91      		pop r28
 260               	.LVL21:
 100:quantum/quantum.c ****     }
 261               		.loc 1 100 9 view .LVU66
 262 0026 0C94 0000 		jmp do_code16
 263               	.LVL22:
 100:quantum/quantum.c ****     }
 264               		.loc 1 100 9 view .LVU67
 265               		.cfi_endproc
 266               	.LFE26:
 268               		.section	.text.tap_code16,"ax",@progbits
 269               	.global	tap_code16
 271               	tap_code16:
 272               	.LVL23:
 273               	.LFB27:
 103:quantum/quantum.c **** 
 104:quantum/quantum.c **** void tap_code16(uint16_t code) {
 274               		.loc 1 104 32 is_stmt 1 view -0
 275               		.cfi_startproc
 276               		.loc 1 104 32 is_stmt 0 view .LVU69
 277 0000 CF93      		push r28
 278               	.LCFI6:
 279               		.cfi_def_cfa_offset 3
 280               		.cfi_offset 28, -2
 281 0002 DF93      		push r29
 282               	.LCFI7:
 283               		.cfi_def_cfa_offset 4
 284               		.cfi_offset 29, -3
 285               	/* prologue: function */
 286               	/* frame size = 0 */
 287               	/* stack size = 2 */
 288               	.L__stack_usage = 2
 289 0004 EC01      		movw r28,r24
 105:quantum/quantum.c ****     register_code16(code);
 290               		.loc 1 105 5 is_stmt 1 view .LVU70
 291 0006 0E94 0000 		call register_code16
 292               	.LVL24:
 106:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 107:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 108:quantum/quantum.c **** #endif
 109:quantum/quantum.c ****     unregister_code16(code);
 293               		.loc 1 109 5 view .LVU71
 294 000a CE01      		movw r24,r28
 295               	/* epilogue start */
 110:quantum/quantum.c **** }
 296               		.loc 1 110 1 is_stmt 0 view .LVU72
 297 000c DF91      		pop r29
 298 000e CF91      		pop r28
 299               	.LVL25:
 109:quantum/quantum.c **** }
 300               		.loc 1 109 5 view .LVU73
 301 0010 0C94 0000 		jmp unregister_code16
 302               	.LVL26:
 109:quantum/quantum.c **** }
 303               		.loc 1 109 5 view .LVU74
 304               		.cfi_endproc
 305               	.LFE27:
 307               		.section	.text.process_action_kb,"ax",@progbits
 308               		.weak	process_action_kb
 310               	process_action_kb:
 311               	.LVL27:
 312               	.LFB28:
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 313               		.loc 1 112 67 is_stmt 1 view -0
 314               		.cfi_startproc
 315               	/* prologue: function */
 316               	/* frame size = 0 */
 317               	/* stack size = 0 */
 318               	.L__stack_usage = 0
 319               		.loc 1 112 69 view .LVU76
 320               		.loc 1 112 1 is_stmt 0 view .LVU77
 321 0000 81E0      		ldi r24,lo8(1)
 322               	.LVL28:
 323               	/* epilogue start */
 324               		.loc 1 112 1 view .LVU78
 325 0002 0895      		ret
 326               		.cfi_endproc
 327               	.LFE28:
 329               		.section	.text.process_record_user,"ax",@progbits
 330               		.weak	process_record_user
 332               	process_record_user:
 333               	.LVL29:
 334               	.LFB30:
 113:quantum/quantum.c **** 
 114:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 115:quantum/quantum.c **** 
 116:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 335               		.loc 1 116 87 is_stmt 1 view -0
 336               		.cfi_startproc
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
 341               		.loc 1 116 89 view .LVU80
 342               		.loc 1 116 1 is_stmt 0 view .LVU81
 343 0000 81E0      		ldi r24,lo8(1)
 344               	.LVL30:
 345               	/* epilogue start */
 346               		.loc 1 116 1 view .LVU82
 347 0002 0895      		ret
 348               		.cfi_endproc
 349               	.LFE30:
 351               		.section	.text.process_record_kb,"ax",@progbits
 352               		.weak	process_record_kb
 354               	process_record_kb:
 355               	.LVL31:
 356               	.LFB29:
 114:quantum/quantum.c **** 
 357               		.loc 1 114 85 is_stmt 1 view -0
 358               		.cfi_startproc
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
 114:quantum/quantum.c **** 
 363               		.loc 1 114 87 view .LVU84
 114:quantum/quantum.c **** 
 364               		.loc 1 114 94 is_stmt 0 view .LVU85
 365 0000 0C94 0000 		jmp process_record_user
 366               	.LVL32:
 114:quantum/quantum.c **** 
 367               		.loc 1 114 94 view .LVU86
 368               		.cfi_endproc
 369               	.LFE29:
 371               		.section	.text.post_process_record_user,"ax",@progbits
 372               		.weak	post_process_record_user
 374               	post_process_record_user:
 375               	.LVL33:
 376               	.LFB32:
 117:quantum/quantum.c **** 
 118:quantum/quantum.c **** __attribute__((weak)) void post_process_record_kb(uint16_t keycode, keyrecord_t *record) { post_pro
 119:quantum/quantum.c **** 
 120:quantum/quantum.c **** __attribute__((weak)) void post_process_record_user(uint16_t keycode, keyrecord_t *record) {}
 377               		.loc 1 120 92 is_stmt 1 view -0
 378               		.cfi_startproc
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 383               		.loc 1 120 93 view .LVU88
 384               	/* epilogue start */
 385               		.loc 1 120 1 is_stmt 0 view .LVU89
 386 0000 0895      		ret
 387               		.cfi_endproc
 388               	.LFE32:
 390               		.section	.text.post_process_record_kb,"ax",@progbits
 391               		.weak	post_process_record_kb
 393               	post_process_record_kb:
 394               	.LVL34:
 395               	.LFB31:
 118:quantum/quantum.c **** 
 396               		.loc 1 118 90 is_stmt 1 view -0
 397               		.cfi_startproc
 398               	/* prologue: function */
 399               	/* frame size = 0 */
 400               	/* stack size = 0 */
 401               	.L__stack_usage = 0
 118:quantum/quantum.c **** 
 402               		.loc 1 118 92 view .LVU91
 403 0000 0C94 0000 		jmp post_process_record_user
 404               	.LVL35:
 118:quantum/quantum.c **** 
 405               		.loc 1 118 92 is_stmt 0 view .LVU92
 406               		.cfi_endproc
 407               	.LFE31:
 409               		.section	.text.get_event_keycode,"ax",@progbits
 410               	.global	get_event_keycode
 412               	get_event_keycode:
 413               	.LVL36:
 414               	.LFB35:
 121:quantum/quantum.c **** 
 122:quantum/quantum.c **** void reset_keyboard(void) {
 123:quantum/quantum.c ****     clear_keyboard();
 124:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 125:quantum/quantum.c ****     process_midi_all_notes_off();
 126:quantum/quantum.c **** #endif
 127:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 128:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 129:quantum/quantum.c ****     music_all_notes_off();
 130:quantum/quantum.c **** #    endif
 131:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 132:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 133:quantum/quantum.c ****     shutdown_user();
 134:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 135:quantum/quantum.c ****     stop_all_notes();
 136:quantum/quantum.c **** #else
 137:quantum/quantum.c ****     shutdown_user();
 138:quantum/quantum.c ****     wait_ms(250);
 139:quantum/quantum.c **** #endif
 140:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 141:quantum/quantum.c ****     haptic_shutdown();
 142:quantum/quantum.c **** #endif
 143:quantum/quantum.c ****     bootloader_jump();
 144:quantum/quantum.c **** }
 145:quantum/quantum.c **** 
 146:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 147:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record, bool update_layer_cache) { return get_event_keycod
 148:quantum/quantum.c **** 
 149:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 150:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 151:quantum/quantum.c ****  * "update_layer_cache" is to ensure that it only updates the layer cache when
 152:quantum/quantum.c ****  * appropriate, otherwise, it will update it and cause layer tap (and other keys)
 153:quantum/quantum.c ****  * from triggering properly.
 154:quantum/quantum.c ****  */
 155:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event, bool update_layer_cache) {
 415               		.loc 1 155 71 is_stmt 1 view -0
 416               		.cfi_startproc
 417               		.loc 1 155 71 is_stmt 0 view .LVU94
 418 0000 1F93      		push r17
 419               	.LCFI8:
 420               		.cfi_def_cfa_offset 3
 421               		.cfi_offset 17, -2
 422 0002 CF93      		push r28
 423               	.LCFI9:
 424               		.cfi_def_cfa_offset 4
 425               		.cfi_offset 28, -3
 426 0004 DF93      		push r29
 427               	.LCFI10:
 428               		.cfi_def_cfa_offset 5
 429               		.cfi_offset 29, -4
 430 0006 00D0      		rcall .
 431 0008 00D0      		rcall .
 432 000a 0F92      		push __tmp_reg__
 433               	.LCFI11:
 434               		.cfi_def_cfa_offset 10
 435 000c CDB7      		in r28,__SP_L__
 436 000e DEB7      		in r29,__SP_H__
 437               	.LCFI12:
 438               		.cfi_def_cfa_register 28
 439               	/* prologue: function */
 440               	/* frame size = 5 */
 441               	/* stack size = 8 */
 442               	.L__stack_usage = 8
 443 0010 4983      		std Y+1,r20
 444 0012 5A83      		std Y+2,r21
 445 0014 6B83      		std Y+3,r22
 156:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 157:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 158:quantum/quantum.c ****     if (!disable_action_cache) {
 446               		.loc 1 158 5 is_stmt 1 view .LVU95
 447               		.loc 1 158 8 is_stmt 0 view .LVU96
 448 0016 3091 0000 		lds r19,disable_action_cache
 449 001a 8981      		ldd r24,Y+1
 450 001c 9A81      		ldd r25,Y+2
 451 001e 3111      		cpse r19,__zero_reg__
 452 0020 00C0      		rjmp .L46
 453               	.LBB4:
 159:quantum/quantum.c ****         uint8_t layer;
 454               		.loc 1 159 9 is_stmt 1 view .LVU97
 160:quantum/quantum.c **** 
 161:quantum/quantum.c ****         if (event.pressed && update_layer_cache) {
 455               		.loc 1 161 9 view .LVU98
 456               		.loc 1 161 12 is_stmt 0 view .LVU99
 457 0022 6623      		tst r22
 458 0024 01F0      		breq .L47
 459               		.loc 1 161 27 discriminator 1 view .LVU100
 460 0026 2223      		tst r18
 461 0028 01F0      		breq .L47
 162:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 462               		.loc 1 162 13 is_stmt 1 view .LVU101
 463               		.loc 1 162 21 is_stmt 0 view .LVU102
 464 002a 0E94 0000 		call layer_switch_get_layer
 465               	.LVL37:
 466               		.loc 1 162 21 view .LVU103
 467 002e 182F      		mov r17,r24
 468               	.LVL38:
 163:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 469               		.loc 1 163 13 is_stmt 1 view .LVU104
 470 0030 682F      		mov r22,r24
 471 0032 8981      		ldd r24,Y+1
 472 0034 9A81      		ldd r25,Y+2
 473 0036 0E94 0000 		call update_source_layers_cache
 474               	.LVL39:
 475               	.L48:
 164:quantum/quantum.c ****         } else {
 165:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 166:quantum/quantum.c ****         }
 167:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 476               		.loc 1 167 9 view .LVU105
 477               		.loc 1 167 16 is_stmt 0 view .LVU106
 478 003a 6981      		ldd r22,Y+1
 479 003c 7A81      		ldd r23,Y+2
 480 003e 812F      		mov r24,r17
 481               	.LVL40:
 482               	.L55:
 483               	/* epilogue start */
 484               		.loc 1 167 16 view .LVU107
 485               	.LBE4:
 168:quantum/quantum.c ****     } else
 169:quantum/quantum.c **** #endif
 170:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 171:quantum/quantum.c **** }
 486               		.loc 1 171 1 view .LVU108
 487 0040 0F90      		pop __tmp_reg__
 488 0042 0F90      		pop __tmp_reg__
 489 0044 0F90      		pop __tmp_reg__
 490 0046 0F90      		pop __tmp_reg__
 491 0048 0F90      		pop __tmp_reg__
 492 004a DF91      		pop r29
 493 004c CF91      		pop r28
 494 004e 1F91      		pop r17
 170:quantum/quantum.c **** }
 495               		.loc 1 170 16 view .LVU109
 496 0050 0C94 0000 		jmp keymap_key_to_keycode
 497               	.LVL41:
 498               	.L47:
 499               	.LBB5:
 165:quantum/quantum.c ****         }
 500               		.loc 1 165 13 is_stmt 1 view .LVU110
 165:quantum/quantum.c ****         }
 501               		.loc 1 165 21 is_stmt 0 view .LVU111
 502 0054 0E94 0000 		call read_source_layers_cache
 503               	.LVL42:
 165:quantum/quantum.c ****         }
 504               		.loc 1 165 21 view .LVU112
 505 0058 182F      		mov r17,r24
 506               	.LVL43:
 165:quantum/quantum.c ****         }
 507               		.loc 1 165 21 view .LVU113
 508 005a 00C0      		rjmp .L48
 509               	.LVL44:
 510               	.L46:
 165:quantum/quantum.c ****         }
 511               		.loc 1 165 21 view .LVU114
 512               	.LBE5:
 170:quantum/quantum.c **** }
 513               		.loc 1 170 9 is_stmt 1 view .LVU115
 170:quantum/quantum.c **** }
 514               		.loc 1 170 16 is_stmt 0 view .LVU116
 515 005c 0E94 0000 		call layer_switch_get_layer
 516               	.LVL45:
 170:quantum/quantum.c **** }
 517               		.loc 1 170 16 view .LVU117
 518 0060 6981      		ldd r22,Y+1
 519 0062 7A81      		ldd r23,Y+2
 520 0064 00C0      		rjmp .L55
 521               		.cfi_endproc
 522               	.LFE35:
 524               		.section	.text.get_record_keycode,"ax",@progbits
 525               	.global	get_record_keycode
 527               	get_record_keycode:
 528               	.LVL46:
 529               	.LFB34:
 147:quantum/quantum.c **** 
 530               		.loc 1 147 75 is_stmt 1 view -0
 531               		.cfi_startproc
 532               	/* prologue: function */
 533               	/* frame size = 0 */
 534               	/* stack size = 0 */
 535               	.L__stack_usage = 0
 147:quantum/quantum.c **** 
 536               		.loc 1 147 75 is_stmt 0 view .LVU119
 537 0000 FC01      		movw r30,r24
 538 0002 262F      		mov r18,r22
 147:quantum/quantum.c **** 
 539               		.loc 1 147 77 is_stmt 1 view .LVU120
 147:quantum/quantum.c **** 
 540               		.loc 1 147 84 is_stmt 0 view .LVU121
 541 0004 4081      		ld r20,Z
 542 0006 5181      		ldd r21,Z+1
 543 0008 6281      		ldd r22,Z+2
 544               	.LVL47:
 147:quantum/quantum.c **** 
 545               		.loc 1 147 84 view .LVU122
 546 000a 7381      		ldd r23,Z+3
 547 000c 8481      		ldd r24,Z+4
 548               	.LVL48:
 147:quantum/quantum.c **** 
 549               		.loc 1 147 84 view .LVU123
 550 000e 0C94 0000 		jmp get_event_keycode
 551               	.LVL49:
 147:quantum/quantum.c **** 
 552               		.loc 1 147 84 view .LVU124
 553               		.cfi_endproc
 554               	.LFE34:
 556               		.section	.text.post_process_record_quantum,"ax",@progbits
 557               	.global	post_process_record_quantum
 559               	post_process_record_quantum:
 560               	.LVL50:
 561               	.LFB36:
 172:quantum/quantum.c **** 
 173:quantum/quantum.c **** /* Get keycode, and then call keyboard function */
 174:quantum/quantum.c **** void post_process_record_quantum(keyrecord_t *record) {
 562               		.loc 1 174 55 is_stmt 1 view -0
 563               		.cfi_startproc
 564               		.loc 1 174 55 is_stmt 0 view .LVU126
 565 0000 CF93      		push r28
 566               	.LCFI13:
 567               		.cfi_def_cfa_offset 3
 568               		.cfi_offset 28, -2
 569 0002 DF93      		push r29
 570               	.LCFI14:
 571               		.cfi_def_cfa_offset 4
 572               		.cfi_offset 29, -3
 573               	/* prologue: function */
 574               	/* frame size = 0 */
 575               	/* stack size = 2 */
 576               	.L__stack_usage = 2
 577 0004 EC01      		movw r28,r24
 175:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record, false);
 578               		.loc 1 175 5 is_stmt 1 view .LVU127
 579               		.loc 1 175 24 is_stmt 0 view .LVU128
 580 0006 60E0      		ldi r22,0
 581 0008 0E94 0000 		call get_record_keycode
 582               	.LVL51:
 176:quantum/quantum.c ****     post_process_record_kb(keycode, record);
 583               		.loc 1 176 5 is_stmt 1 view .LVU129
 584 000c BE01      		movw r22,r28
 585               	/* epilogue start */
 177:quantum/quantum.c **** }
 586               		.loc 1 177 1 is_stmt 0 view .LVU130
 587 000e DF91      		pop r29
 588 0010 CF91      		pop r28
 589               	.LVL52:
 176:quantum/quantum.c ****     post_process_record_kb(keycode, record);
 590               		.loc 1 176 5 view .LVU131
 591 0012 0C94 0000 		jmp post_process_record_kb
 592               	.LVL53:
 176:quantum/quantum.c ****     post_process_record_kb(keycode, record);
 593               		.loc 1 176 5 view .LVU132
 594               		.cfi_endproc
 595               	.LFE36:
 597               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 598               	.global	set_single_persistent_default_layer
 600               	set_single_persistent_default_layer:
 601               	.LVL54:
 602               	.LFB38:
 178:quantum/quantum.c **** 
 179:quantum/quantum.c **** /* Core keycode function, hands off handling to other functions,
 180:quantum/quantum.c ****     then processes internal quantum keycodes, and then processes
 181:quantum/quantum.c ****     ACTIONs.                                                      */
 182:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 183:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record, true);
 184:quantum/quantum.c **** 
 185:quantum/quantum.c ****     // This is how you use actions here
 186:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 187:quantum/quantum.c ****     //   action_t action;
 188:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 189:quantum/quantum.c ****     //   process_action(record, action);
 190:quantum/quantum.c ****     //   return false;
 191:quantum/quantum.c ****     // }
 192:quantum/quantum.c **** 
 193:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 194:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 195:quantum/quantum.c ****         velocikey_accelerate();
 196:quantum/quantum.c ****     }
 197:quantum/quantum.c **** #endif
 198:quantum/quantum.c **** 
 199:quantum/quantum.c **** #ifdef WPM_ENABLE
 200:quantum/quantum.c ****     if (record->event.pressed) {
 201:quantum/quantum.c ****         update_wpm(keycode);
 202:quantum/quantum.c ****     }
 203:quantum/quantum.c **** #endif
 204:quantum/quantum.c **** 
 205:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 206:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 207:quantum/quantum.c **** #endif
 208:quantum/quantum.c **** 
 209:quantum/quantum.c ****     if (!(
 210:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 211:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 212:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 213:quantum/quantum.c **** #endif
 214:quantum/quantum.c **** #if defined(DYNAMIC_MACRO_ENABLE) && !defined(DYNAMIC_MACRO_USER_CALL)
 215:quantum/quantum.c ****             // Must run asap to ensure all keypresses are recorded.
 216:quantum/quantum.c ****             process_dynamic_macro(keycode, record) &&
 217:quantum/quantum.c **** #endif
 218:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 219:quantum/quantum.c ****             process_clicky(keycode, record) &&
 220:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 221:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 222:quantum/quantum.c ****             process_haptic(keycode, record) &&
 223:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 224:quantum/quantum.c **** #if defined(VIA_ENABLE)
 225:quantum/quantum.c ****             process_record_via(keycode, record) &&
 226:quantum/quantum.c **** #endif
 227:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 228:quantum/quantum.c **** #if defined(SEQUENCER_ENABLE)
 229:quantum/quantum.c ****             process_sequencer(keycode, record) &&
 230:quantum/quantum.c **** #endif
 231:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 232:quantum/quantum.c ****             process_midi(keycode, record) &&
 233:quantum/quantum.c **** #endif
 234:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 235:quantum/quantum.c ****             process_audio(keycode, record) &&
 236:quantum/quantum.c **** #endif
 237:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) || defined(LED_MATRIX_ENABLE)
 238:quantum/quantum.c ****             process_backlight(keycode, record) &&
 239:quantum/quantum.c **** #endif
 240:quantum/quantum.c **** #ifdef STENO_ENABLE
 241:quantum/quantum.c ****             process_steno(keycode, record) &&
 242:quantum/quantum.c **** #endif
 243:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 244:quantum/quantum.c ****             process_music(keycode, record) &&
 245:quantum/quantum.c **** #endif
 246:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 247:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 248:quantum/quantum.c **** #endif
 249:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 250:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 251:quantum/quantum.c **** #endif
 252:quantum/quantum.c **** #ifdef LEADER_ENABLE
 253:quantum/quantum.c ****             process_leader(keycode, record) &&
 254:quantum/quantum.c **** #endif
 255:quantum/quantum.c **** #ifdef COMBO_ENABLE
 256:quantum/quantum.c ****             process_combo(keycode, record) &&
 257:quantum/quantum.c **** #endif
 258:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 259:quantum/quantum.c ****             process_printer(keycode, record) &&
 260:quantum/quantum.c **** #endif
 261:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 262:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 263:quantum/quantum.c **** #endif
 264:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 265:quantum/quantum.c ****             process_terminal(keycode, record) &&
 266:quantum/quantum.c **** #endif
 267:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 268:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 269:quantum/quantum.c **** #endif
 270:quantum/quantum.c **** #ifdef MAGIC_KEYCODE_ENABLE
 271:quantum/quantum.c ****             process_magic(keycode, record) &&
 272:quantum/quantum.c **** #endif
 273:quantum/quantum.c **** #ifdef GRAVE_ESC_ENABLE
 274:quantum/quantum.c ****             process_grave_esc(keycode, record) &&
 275:quantum/quantum.c **** #endif
 276:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 277:quantum/quantum.c ****             process_rgb(keycode, record) &&
 278:quantum/quantum.c **** #endif
 279:quantum/quantum.c **** #ifdef JOYSTICK_ENABLE
 280:quantum/quantum.c ****             process_joystick(keycode, record) &&
 281:quantum/quantum.c **** #endif
 282:quantum/quantum.c ****             true)) {
 283:quantum/quantum.c ****         return false;
 284:quantum/quantum.c ****     }
 285:quantum/quantum.c **** 
 286:quantum/quantum.c ****     if (record->event.pressed) {
 287:quantum/quantum.c ****         switch (keycode) {
 288:quantum/quantum.c **** #ifndef NO_RESET
 289:quantum/quantum.c ****             case RESET:
 290:quantum/quantum.c ****                 reset_keyboard();
 291:quantum/quantum.c ****                 return false;
 292:quantum/quantum.c **** #endif
 293:quantum/quantum.c **** #ifndef NO_DEBUG
 294:quantum/quantum.c ****             case DEBUG:
 295:quantum/quantum.c ****                 debug_enable ^= 1;
 296:quantum/quantum.c ****                 if (debug_enable) {
 297:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 298:quantum/quantum.c ****                 } else {
 299:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 300:quantum/quantum.c ****                 }
 301:quantum/quantum.c **** #endif
 302:quantum/quantum.c ****                 return false;
 303:quantum/quantum.c ****             case EEPROM_RESET:
 304:quantum/quantum.c ****                 eeconfig_init();
 305:quantum/quantum.c ****                 return false;
 306:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 307:quantum/quantum.c ****             case VLK_TOG:
 308:quantum/quantum.c ****                 velocikey_toggle();
 309:quantum/quantum.c ****                 return false;
 310:quantum/quantum.c **** #endif
 311:quantum/quantum.c **** #ifdef BLUETOOTH_ENABLE
 312:quantum/quantum.c ****             case OUT_AUTO:
 313:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 314:quantum/quantum.c ****                 return false;
 315:quantum/quantum.c ****             case OUT_USB:
 316:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 317:quantum/quantum.c ****                 return false;
 318:quantum/quantum.c ****             case OUT_BT:
 319:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 320:quantum/quantum.c ****                 return false;
 321:quantum/quantum.c **** #endif
 322:quantum/quantum.c **** #ifndef NO_ACTION_ONESHOT
 323:quantum/quantum.c ****             case ONESHOT_TOGGLE:
 324:quantum/quantum.c ****                 oneshot_toggle();
 325:quantum/quantum.c ****                 break;
 326:quantum/quantum.c ****             case ONESHOT_ENABLE:
 327:quantum/quantum.c ****                 oneshot_enable();
 328:quantum/quantum.c ****                 break;
 329:quantum/quantum.c ****             case ONESHOT_DISABLE:
 330:quantum/quantum.c ****                 oneshot_disable();
 331:quantum/quantum.c ****                 break;
 332:quantum/quantum.c **** #endif
 333:quantum/quantum.c ****         }
 334:quantum/quantum.c ****     }
 335:quantum/quantum.c **** 
 336:quantum/quantum.c ****     return process_action_kb(record);
 337:quantum/quantum.c **** }
 338:quantum/quantum.c **** 
 339:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 603               		.loc 1 339 65 is_stmt 1 view -0
 604               		.cfi_startproc
 605               		.loc 1 339 65 is_stmt 0 view .LVU134
 606 0000 CF93      		push r28
 607               	.LCFI15:
 608               		.cfi_def_cfa_offset 3
 609               		.cfi_offset 28, -2
 610 0002 DF93      		push r29
 611               	.LCFI16:
 612               		.cfi_def_cfa_offset 4
 613               		.cfi_offset 29, -3
 614               	/* prologue: function */
 615               	/* frame size = 0 */
 616               	/* stack size = 2 */
 617               	.L__stack_usage = 2
 340:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 341:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 342:quantum/quantum.c **** #endif
 343:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 618               		.loc 1 343 5 is_stmt 1 view .LVU135
 619               		.loc 1 343 38 is_stmt 0 view .LVU136
 620 0004 C1E0      		ldi r28,lo8(1)
 621 0006 D0E0      		ldi r29,0
 622 0008 00C0      		rjmp 2f
 623               		1:
 624 000a CC0F      		lsl r28
 625 000c DD1F      		rol r29
 626               		2:
 627 000e 8A95      		dec r24
 628 0010 02F4      		brpl 1b
 629               		.loc 1 343 5 view .LVU137
 630 0012 8C2F      		mov r24,r28
 631               	.LVL55:
 632               		.loc 1 343 5 view .LVU138
 633 0014 0E94 0000 		call eeconfig_update_default_layer
 634               	.LVL56:
 344:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 635               		.loc 1 344 5 is_stmt 1 view .LVU139
 636 0018 BE01      		movw r22,r28
 637 001a 90E0      		ldi r25,0
 638 001c 80E0      		ldi r24,0
 639               	/* epilogue start */
 345:quantum/quantum.c **** }
 640               		.loc 1 345 1 is_stmt 0 view .LVU140
 641 001e DF91      		pop r29
 642 0020 CF91      		pop r28
 344:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 643               		.loc 1 344 5 view .LVU141
 644 0022 0C94 0000 		jmp default_layer_set
 645               	.LVL57:
 646               		.cfi_endproc
 647               	.LFE38:
 649               		.section	.text.update_tri_layer_state,"ax",@progbits
 650               	.global	update_tri_layer_state
 652               	update_tri_layer_state:
 653               	.LVL58:
 654               	.LFB39:
 346:quantum/quantum.c **** 
 347:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 655               		.loc 1 347 107 is_stmt 1 view -0
 656               		.cfi_startproc
 657               		.loc 1 347 107 is_stmt 0 view .LVU143
 658 0000 8F92      		push r8
 659               	.LCFI17:
 660               		.cfi_def_cfa_offset 3
 661               		.cfi_offset 8, -2
 662 0002 9F92      		push r9
 663               	.LCFI18:
 664               		.cfi_def_cfa_offset 4
 665               		.cfi_offset 9, -3
 666 0004 AF92      		push r10
 667               	.LCFI19:
 668               		.cfi_def_cfa_offset 5
 669               		.cfi_offset 10, -4
 670 0006 BF92      		push r11
 671               	.LCFI20:
 672               		.cfi_def_cfa_offset 6
 673               		.cfi_offset 11, -5
 674 0008 CF92      		push r12
 675               	.LCFI21:
 676               		.cfi_def_cfa_offset 7
 677               		.cfi_offset 12, -6
 678 000a DF92      		push r13
 679               	.LCFI22:
 680               		.cfi_def_cfa_offset 8
 681               		.cfi_offset 13, -7
 682 000c EF92      		push r14
 683               	.LCFI23:
 684               		.cfi_def_cfa_offset 9
 685               		.cfi_offset 14, -8
 686 000e FF92      		push r15
 687               	.LCFI24:
 688               		.cfi_def_cfa_offset 10
 689               		.cfi_offset 15, -9
 690 0010 0F93      		push r16
 691               	.LCFI25:
 692               		.cfi_def_cfa_offset 11
 693               		.cfi_offset 16, -10
 694 0012 1F93      		push r17
 695               	.LCFI26:
 696               		.cfi_def_cfa_offset 12
 697               		.cfi_offset 17, -11
 698               	/* prologue: function */
 699               	/* frame size = 0 */
 700               	/* stack size = 10 */
 701               	.L__stack_usage = 10
 702 0014 6B01      		movw r12,r22
 703 0016 7C01      		movw r14,r24
 348:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 704               		.loc 1 348 5 is_stmt 1 view .LVU144
 705               		.loc 1 348 33 is_stmt 0 view .LVU145
 706 0018 81E0      		ldi r24,lo8(1)
 707 001a 90E0      		ldi r25,0
 708 001c A0E0      		ldi r26,0
 709 001e B0E0      		ldi r27,0
 710 0020 4C01      		movw r8,r24
 711 0022 5D01      		movw r10,r26
 712 0024 00C0      		rjmp 2f
 713               		1:
 714 0026 880C      		lsl r8
 715 0028 991C      		rol r9
 716 002a AA1C      		rol r10
 717 002c BB1C      		rol r11
 718               		2:
 719 002e 4A95      		dec r20
 720 0030 02F4      		brpl 1b
 721 0032 B501      		movw r22,r10
 722               	.LVL59:
 723               		.loc 1 348 33 view .LVU146
 724 0034 A401      		movw r20,r8
 725               	.LVL60:
 726               		.loc 1 348 51 view .LVU147
 727 0036 4C01      		movw r8,r24
 728 0038 5D01      		movw r10,r26
 729 003a 00C0      		rjmp 2f
 730               		1:
 731 003c 880C      		lsl r8
 732 003e 991C      		rol r9
 733 0040 AA1C      		rol r10
 734 0042 BB1C      		rol r11
 735               		2:
 736 0044 2A95      		dec r18
 737 0046 02F4      		brpl 1b
 738               		.loc 1 348 19 view .LVU148
 739 0048 4829      		or r20,r8
 740 004a 5929      		or r21,r9
 741 004c 6A29      		or r22,r10
 742 004e 7B29      		or r23,r11
 743               	.LVL61:
 349:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 744               		.loc 1 349 5 is_stmt 1 view .LVU149
 745               		.loc 1 349 19 is_stmt 0 view .LVU150
 746 0050 00C0      		rjmp 2f
 747               		1:
 748 0052 880F      		lsl r24
 749 0054 991F      		rol r25
 750 0056 AA1F      		rol r26
 751 0058 BB1F      		rol r27
 752               		2:
 753 005a 0A95      		dec r16
 754 005c 02F4      		brpl 1b
 755               	.LVL62:
 350:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 756               		.loc 1 350 5 is_stmt 1 view .LVU151
 757               		.loc 1 350 19 is_stmt 0 view .LVU152
 758 005e 8A01      		movw r16,r20
 759               	.LVL63:
 760               		.loc 1 350 19 view .LVU153
 761 0060 9B01      		movw r18,r22
 762               	.LVL64:
 763               		.loc 1 350 19 view .LVU154
 764 0062 0C21      		and r16,r12
 765 0064 1D21      		and r17,r13
 766 0066 2E21      		and r18,r14
 767 0068 3F21      		and r19,r15
 768               		.loc 1 350 57 view .LVU155
 769 006a 0417      		cp r16,r20
 770 006c 1507      		cpc r17,r21
 771 006e 2607      		cpc r18,r22
 772 0070 3707      		cpc r19,r23
 773 0072 01F4      		brne .L60
 774               		.loc 1 350 57 discriminator 1 view .LVU156
 775 0074 8C29      		or r24,r12
 776               	.LVL65:
 777               		.loc 1 350 57 discriminator 1 view .LVU157
 778 0076 9D29      		or r25,r13
 779 0078 AE29      		or r26,r14
 780 007a BF29      		or r27,r15
 781               	.L59:
 351:quantum/quantum.c **** }
 782               		.loc 1 351 1 view .LVU158
 783 007c BC01      		movw r22,r24
 784 007e CD01      		movw r24,r26
 785               	/* epilogue start */
 786 0080 1F91      		pop r17
 787               	.LVL66:
 788               		.loc 1 351 1 view .LVU159
 789 0082 0F91      		pop r16
 790               	.LVL67:
 791               		.loc 1 351 1 view .LVU160
 792 0084 FF90      		pop r15
 793 0086 EF90      		pop r14
 794 0088 DF90      		pop r13
 795 008a CF90      		pop r12
 796 008c BF90      		pop r11
 797 008e AF90      		pop r10
 798 0090 9F90      		pop r9
 799 0092 8F90      		pop r8
 800               	.LVL68:
 801               		.loc 1 351 1 view .LVU161
 802 0094 0895      		ret
 803               	.LVL69:
 804               	.L60:
 350:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 805               		.loc 1 350 68 discriminator 2 view .LVU162
 806 0096 8095      		com r24
 807 0098 9095      		com r25
 808 009a A095      		com r26
 809 009c B095      		com r27
 810               	.LVL70:
 350:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 811               		.loc 1 350 57 discriminator 2 view .LVU163
 812 009e 8C21      		and r24,r12
 813               	.LVL71:
 350:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 814               		.loc 1 350 57 discriminator 2 view .LVU164
 815 00a0 9D21      		and r25,r13
 816 00a2 AE21      		and r26,r14
 817 00a4 BF21      		and r27,r15
 818 00a6 00C0      		rjmp .L59
 819               		.cfi_endproc
 820               	.LFE39:
 822               		.section	.text.update_tri_layer,"ax",@progbits
 823               	.global	update_tri_layer
 825               	update_tri_layer:
 826               	.LVL72:
 827               	.LFB40:
 352:quantum/quantum.c **** 
 353:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 828               		.loc 1 353 71 is_stmt 1 view -0
 829               		.cfi_startproc
 830               		.loc 1 353 71 is_stmt 0 view .LVU166
 831 0000 0F93      		push r16
 832               	.LCFI27:
 833               		.cfi_def_cfa_offset 3
 834               		.cfi_offset 16, -2
 835               	/* prologue: function */
 836               	/* frame size = 0 */
 837               	/* stack size = 1 */
 838               	.L__stack_usage = 1
 839 0002 382F      		mov r19,r24
 840 0004 262F      		mov r18,r22
 841               		.loc 1 353 73 is_stmt 1 view .LVU167
 842 0006 6091 0000 		lds r22,layer_state
 843 000a 7091 0000 		lds r23,layer_state+1
 844 000e 8091 0000 		lds r24,layer_state+2
 845 0012 9091 0000 		lds r25,layer_state+3
 846               	.LVL73:
 847               		.loc 1 353 73 is_stmt 0 view .LVU168
 848 0016 042F      		mov r16,r20
 849 0018 432F      		mov r20,r19
 850               	.LVL74:
 851               		.loc 1 353 73 view .LVU169
 852 001a 0E94 0000 		call update_tri_layer_state
 853               	.LVL75:
 854               	/* epilogue start */
 855               		.loc 1 353 1 view .LVU170
 856 001e 0F91      		pop r16
 857               	.LVL76:
 858               		.loc 1 353 73 view .LVU171
 859 0020 0C94 0000 		jmp layer_state_set
 860               	.LVL77:
 861               		.cfi_endproc
 862               	.LFE40:
 864               		.section	.text.matrix_init_quantum,"ax",@progbits
 865               	.global	matrix_init_quantum
 867               	matrix_init_quantum:
 868               	.LFB41:
 354:quantum/quantum.c **** 
 355:quantum/quantum.c **** void matrix_init_quantum() {
 869               		.loc 1 355 28 is_stmt 1 view -0
 870               		.cfi_startproc
 871               	/* prologue: function */
 872               	/* frame size = 0 */
 873               	/* stack size = 0 */
 874               	.L__stack_usage = 0
 356:quantum/quantum.c ****     magic();
 875               		.loc 1 356 5 view .LVU173
 876 0000 0E94 0000 		call magic
 877               	.LVL78:
 357:quantum/quantum.c **** #if defined(LED_NUM_LOCK_PIN) || defined(LED_CAPS_LOCK_PIN) || defined(LED_SCROLL_LOCK_PIN) || defi
 358:quantum/quantum.c ****     // TODO: remove calls to led_init_ports from keyboards and remove ifdef
 359:quantum/quantum.c ****     led_init_ports();
 360:quantum/quantum.c **** #endif
 361:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 362:quantum/quantum.c ****     backlight_init_ports();
 363:quantum/quantum.c **** #endif
 364:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 365:quantum/quantum.c ****     audio_init();
 366:quantum/quantum.c **** #endif
 367:quantum/quantum.c **** #ifdef LED_MATRIX_ENABLE
 368:quantum/quantum.c ****     led_matrix_init();
 369:quantum/quantum.c **** #endif
 370:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 371:quantum/quantum.c ****     rgb_matrix_init();
 878               		.loc 1 371 5 view .LVU174
 879 0004 0E94 0000 		call rgb_matrix_init
 880               	.LVL79:
 372:quantum/quantum.c **** #endif
 373:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 374:quantum/quantum.c ****     unicode_input_mode_init();
 375:quantum/quantum.c **** #endif
 376:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 377:quantum/quantum.c ****     haptic_init();
 378:quantum/quantum.c **** #endif
 379:quantum/quantum.c **** #if defined(BLUETOOTH_ENABLE) && defined(OUTPUT_AUTO_ENABLE)
 380:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 381:quantum/quantum.c **** #endif
 382:quantum/quantum.c **** 
 383:quantum/quantum.c ****     matrix_init_kb();
 881               		.loc 1 383 5 view .LVU175
 882 0008 0C94 0000 		jmp matrix_init_kb
 883               	.LVL80:
 884               		.cfi_endproc
 885               	.LFE41:
 887               		.section	.text.matrix_scan_quantum,"ax",@progbits
 888               	.global	matrix_scan_quantum
 890               	matrix_scan_quantum:
 891               	.LFB42:
 384:quantum/quantum.c **** }
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** void matrix_scan_quantum() {
 892               		.loc 1 386 28 view -0
 893               		.cfi_startproc
 894               	/* prologue: function */
 895               	/* frame size = 0 */
 896               	/* stack size = 0 */
 897               	.L__stack_usage = 0
 387:quantum/quantum.c **** #if defined(AUDIO_ENABLE)
 388:quantum/quantum.c ****     // There are some tasks that need to be run a little bit
 389:quantum/quantum.c ****     // after keyboard startup, or else they will not work correctly
 390:quantum/quantum.c ****     // because of interaction with the USB device state, which
 391:quantum/quantum.c ****     // may still be in flux...
 392:quantum/quantum.c ****     //
 393:quantum/quantum.c ****     // At the moment the only feature that needs this is the
 394:quantum/quantum.c ****     // startup song.
 395:quantum/quantum.c ****     static bool     delayed_tasks_run  = false;
 396:quantum/quantum.c ****     static uint16_t delayed_task_timer = 0;
 397:quantum/quantum.c ****     if (!delayed_tasks_run) {
 398:quantum/quantum.c ****         if (!delayed_task_timer) {
 399:quantum/quantum.c ****             delayed_task_timer = timer_read();
 400:quantum/quantum.c ****         } else if (timer_elapsed(delayed_task_timer) > 300) {
 401:quantum/quantum.c ****             audio_startup();
 402:quantum/quantum.c ****             delayed_tasks_run = true;
 403:quantum/quantum.c ****         }
 404:quantum/quantum.c ****     }
 405:quantum/quantum.c **** #endif
 406:quantum/quantum.c **** 
 407:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 408:quantum/quantum.c ****     matrix_scan_music();
 409:quantum/quantum.c **** #endif
 410:quantum/quantum.c **** 
 411:quantum/quantum.c **** #ifdef SEQUENCER_ENABLE
 412:quantum/quantum.c ****     matrix_scan_sequencer();
 413:quantum/quantum.c **** #endif
 414:quantum/quantum.c **** 
 415:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 416:quantum/quantum.c ****     matrix_scan_tap_dance();
 898               		.loc 1 416 5 view .LVU177
 899 0000 0E94 0000 		call matrix_scan_tap_dance
 900               	.LVL81:
 417:quantum/quantum.c **** #endif
 418:quantum/quantum.c **** 
 419:quantum/quantum.c **** #ifdef COMBO_ENABLE
 420:quantum/quantum.c ****     matrix_scan_combo();
 421:quantum/quantum.c **** #endif
 422:quantum/quantum.c **** 
 423:quantum/quantum.c **** #ifdef LED_MATRIX_ENABLE
 424:quantum/quantum.c ****     led_matrix_task();
 425:quantum/quantum.c **** #endif
 426:quantum/quantum.c **** 
 427:quantum/quantum.c **** #ifdef WPM_ENABLE
 428:quantum/quantum.c ****     decay_wpm();
 429:quantum/quantum.c **** #endif
 430:quantum/quantum.c **** 
 431:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 432:quantum/quantum.c ****     haptic_task();
 433:quantum/quantum.c **** #endif
 434:quantum/quantum.c **** 
 435:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 436:quantum/quantum.c ****     dip_switch_read(false);
 437:quantum/quantum.c **** #endif
 438:quantum/quantum.c **** 
 439:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 440:quantum/quantum.c ****     autoshift_matrix_scan();
 441:quantum/quantum.c **** #endif
 442:quantum/quantum.c **** 
 443:quantum/quantum.c ****     matrix_scan_kb();
 901               		.loc 1 443 5 view .LVU178
 902 0004 0C94 0000 		jmp matrix_scan_kb
 903               	.LVL82:
 904               		.cfi_endproc
 905               	.LFE42:
 907               		.section	.text.api_send_unicode,"ax",@progbits
 908               	.global	api_send_unicode
 910               	api_send_unicode:
 911               	.LVL83:
 912               	.LFB43:
 444:quantum/quantum.c **** }
 445:quantum/quantum.c **** 
 446:quantum/quantum.c **** #ifdef HD44780_ENABLED
 447:quantum/quantum.c **** #    include "hd44780.h"
 448:quantum/quantum.c **** #endif
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 913               		.loc 1 450 41 view -0
 914               		.cfi_startproc
 915               	/* prologue: function */
 916               	/* frame size = 0 */
 917               	/* stack size = 0 */
 918               	.L__stack_usage = 0
 451:quantum/quantum.c **** #ifdef API_ENABLE
 452:quantum/quantum.c ****     uint8_t chunk[4];
 453:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 454:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 455:quantum/quantum.c **** #endif
 456:quantum/quantum.c **** }
 919               		.loc 1 456 1 view .LVU180
 920               	/* epilogue start */
 921 0000 0895      		ret
 922               		.cfi_endproc
 923               	.LFE43:
 925               		.section	.text.startup_user,"ax",@progbits
 926               		.weak	startup_user
 928               	startup_user:
 929               	.LFB44:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** //------------------------------------------------------------------------------
 459:quantum/quantum.c **** // Override these functions in your keymap file to play different tunes on
 460:quantum/quantum.c **** // different events such as startup and bootloader jump
 461:quantum/quantum.c **** 
 462:quantum/quantum.c **** __attribute__((weak)) void startup_user() {}
 930               		.loc 1 462 43 view -0
 931               		.cfi_startproc
 932               	/* prologue: function */
 933               	/* frame size = 0 */
 934               	/* stack size = 0 */
 935               	.L__stack_usage = 0
 936               		.loc 1 462 44 view .LVU182
 937               	/* epilogue start */
 938               		.loc 1 462 1 is_stmt 0 view .LVU183
 939 0000 0895      		ret
 940               		.cfi_endproc
 941               	.LFE44:
 943               		.section	.text.shutdown_user,"ax",@progbits
 944               		.weak	shutdown_user
 946               	shutdown_user:
 947               	.LFB47:
 948               		.cfi_startproc
 949               	/* prologue: function */
 950               	/* frame size = 0 */
 951               	/* stack size = 0 */
 952               	.L__stack_usage = 0
 953               	/* epilogue start */
 954 0000 0895      		ret
 955               		.cfi_endproc
 956               	.LFE47:
 958               		.section	.text.reset_keyboard,"ax",@progbits
 959               	.global	reset_keyboard
 961               	reset_keyboard:
 962               	.LFB33:
 122:quantum/quantum.c ****     clear_keyboard();
 963               		.loc 1 122 27 is_stmt 1 view -0
 964               		.cfi_startproc
 965               	/* prologue: function */
 966               	/* frame size = 0 */
 967               	/* stack size = 0 */
 968               	.L__stack_usage = 0
 123:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 969               		.loc 1 123 5 view .LVU185
 970 0000 0E94 0000 		call clear_keyboard
 971               	.LVL84:
 137:quantum/quantum.c ****     wait_ms(250);
 972               		.loc 1 137 5 view .LVU186
 973 0004 0E94 0000 		call shutdown_user
 974               	.LVL85:
 138:quantum/quantum.c **** #endif
 975               		.loc 1 138 5 view .LVU187
 976               	.LBB6:
 977               	.LBI6:
 978               		.file 2 "c:\\qmk_msys\\mingw64\\avr\\include\\util\\delay.h"
   1:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    All rights reserved.
   5:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   6:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   9:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  12:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      distribution.
  16:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  17:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  21:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  33:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  35:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  38:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  endif
  42:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  44:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <math.h>
  47:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  48:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \file */
  49:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \code
  51:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \endcode
  55:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  56:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     used.
  60:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  61:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  70:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  79:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  83:c:\qmk_msys\mingw64\avr\include\util\delay.h **** */
  84:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  85:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
  89:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  90:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \def F_CPU
  95:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  97:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 103:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     integer value.
 107:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 108:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 110:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 111:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 114:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 115:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  include <math.h>
 119:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 120:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 121:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /**
 122:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 124:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 126:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 129:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 131:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 137:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 142:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 147:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    respectively.
 151:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 152:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \note
 153:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 154:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 164:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 165:c:\qmk_msys\mingw64\avr\include\util\delay.h **** void
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** _delay_ms(double __ms)
 979               		.loc 2 166 1 view .LVU188
 980               	.LBB7:
 167:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 981               		.loc 2 168 2 view .LVU189
 169:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 982               		.loc 2 172 2 view .LVU190
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 983               		.loc 2 173 2 view .LVU191
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 984               		.loc 2 174 2 view .LVU192
 175:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 176:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 179:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 182:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#else
 183:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		//round up by default
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 985               		.loc 2 184 3 view .LVU193
 185:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 186:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 187:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 986               		.loc 2 187 2 view .LVU194
 987 0008 2FEF      		ldi r18,lo8(799999)
 988 000a 84E3      		ldi r24,hi8(799999)
 989 000c 9CE0      		ldi r25,hlo8(799999)
 990 000e 2150      	1:	subi r18,1
 991 0010 8040      		sbci r24,0
 992 0012 9040      		sbci r25,0
 993 0014 01F4      		brne 1b
 994 0016 00C0      		rjmp .
 995 0018 0000      		nop
 996               	.LVL86:
 997               		.loc 2 187 2 is_stmt 0 view .LVU195
 998               	.LBE7:
 999               	.LBE6:
 143:quantum/quantum.c **** }
 1000               		.loc 1 143 5 is_stmt 1 view .LVU196
 1001 001a 0C94 0000 		jmp bootloader_jump
 1002               	.LVL87:
 1003               		.cfi_endproc
 1004               	.LFE33:
 1006               		.section	.text.process_record_quantum,"ax",@progbits
 1007               	.global	process_record_quantum
 1009               	process_record_quantum:
 1010               	.LVL88:
 1011               	.LFB37:
 182:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record, true);
 1012               		.loc 1 182 50 view -0
 1013               		.cfi_startproc
 182:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record, true);
 1014               		.loc 1 182 50 is_stmt 0 view .LVU198
 1015 0000 0F93      		push r16
 1016               	.LCFI28:
 1017               		.cfi_def_cfa_offset 3
 1018               		.cfi_offset 16, -2
 1019 0002 1F93      		push r17
 1020               	.LCFI29:
 1021               		.cfi_def_cfa_offset 4
 1022               		.cfi_offset 17, -3
 1023 0004 CF93      		push r28
 1024               	.LCFI30:
 1025               		.cfi_def_cfa_offset 5
 1026               		.cfi_offset 28, -4
 1027 0006 DF93      		push r29
 1028               	.LCFI31:
 1029               		.cfi_def_cfa_offset 6
 1030               		.cfi_offset 29, -5
 1031               	/* prologue: function */
 1032               	/* frame size = 0 */
 1033               	/* stack size = 4 */
 1034               	.L__stack_usage = 4
 1035 0008 8C01      		movw r16,r24
 183:quantum/quantum.c **** 
 1036               		.loc 1 183 5 is_stmt 1 view .LVU199
 183:quantum/quantum.c **** 
 1037               		.loc 1 183 24 is_stmt 0 view .LVU200
 1038 000a 61E0      		ldi r22,lo8(1)
 1039 000c 0E94 0000 		call get_record_keycode
 1040               	.LVL89:
 183:quantum/quantum.c **** 
 1041               		.loc 1 183 24 view .LVU201
 1042 0010 EC01      		movw r28,r24
 1043               	.LVL90:
 206:quantum/quantum.c **** #endif
 1044               		.loc 1 206 5 is_stmt 1 view .LVU202
 1045 0012 B801      		movw r22,r16
 1046 0014 0E94 0000 		call preprocess_tap_dance
 1047               	.LVL91:
 209:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 1048               		.loc 1 209 5 view .LVU203
 227:quantum/quantum.c **** #if defined(SEQUENCER_ENABLE)
 1049               		.loc 1 227 13 is_stmt 0 view .LVU204
 1050 0018 B801      		movw r22,r16
 1051 001a CE01      		movw r24,r28
 1052 001c 0E94 0000 		call process_record_kb
 1053               	.LVL92:
 274:quantum/quantum.c **** #endif
 1054               		.loc 1 274 48 view .LVU205
 1055 0020 8823      		tst r24
 1056 0022 01F4      		brne .+2
 1057 0024 00C0      		rjmp .L69
 247:quantum/quantum.c **** #endif
 1058               		.loc 1 247 13 view .LVU206
 1059 0026 B801      		movw r22,r16
 1060 0028 CE01      		movw r24,r28
 1061 002a 0E94 0000 		call process_tap_dance
 1062               	.LVL93:
 227:quantum/quantum.c **** #if defined(SEQUENCER_ENABLE)
 1063               		.loc 1 227 48 view .LVU207
 1064 002e 8823      		tst r24
 1065 0030 01F0      		breq .L69
 268:quantum/quantum.c **** #endif
 1066               		.loc 1 268 13 view .LVU208
 1067 0032 B801      		movw r22,r16
 1068 0034 CE01      		movw r24,r28
 1069 0036 0E94 0000 		call process_space_cadet
 1070               	.LVL94:
 247:quantum/quantum.c **** #endif
 1071               		.loc 1 247 48 view .LVU209
 1072 003a 8823      		tst r24
 1073 003c 01F0      		breq .L69
 271:quantum/quantum.c **** #endif
 1074               		.loc 1 271 13 view .LVU210
 1075 003e B801      		movw r22,r16
 1076 0040 CE01      		movw r24,r28
 1077 0042 0E94 0000 		call process_magic
 1078               	.LVL95:
 268:quantum/quantum.c **** #endif
 1079               		.loc 1 268 50 view .LVU211
 1080 0046 8823      		tst r24
 1081 0048 01F0      		breq .L69
 274:quantum/quantum.c **** #endif
 1082               		.loc 1 274 13 view .LVU212
 1083 004a B801      		movw r22,r16
 1084 004c CE01      		movw r24,r28
 1085 004e 0E94 0000 		call process_grave_esc
 1086               	.LVL96:
 271:quantum/quantum.c **** #endif
 1087               		.loc 1 271 44 view .LVU213
 1088 0052 8823      		tst r24
 1089 0054 01F0      		breq .L69
 277:quantum/quantum.c **** #endif
 1090               		.loc 1 277 13 discriminator 2 view .LVU214
 1091 0056 B801      		movw r22,r16
 1092 0058 CE01      		movw r24,r28
 1093 005a 0E94 0000 		call process_rgb
 1094               	.LVL97:
 274:quantum/quantum.c **** #endif
 1095               		.loc 1 274 48 discriminator 2 view .LVU215
 1096 005e 8823      		tst r24
 1097 0060 01F0      		breq .L69
 286:quantum/quantum.c ****         switch (keycode) {
 1098               		.loc 1 286 5 is_stmt 1 view .LVU216
 286:quantum/quantum.c ****         switch (keycode) {
 1099               		.loc 1 286 8 is_stmt 0 view .LVU217
 1100 0062 F801      		movw r30,r16
 1101 0064 8281      		ldd r24,Z+2
 1102 0066 8823      		tst r24
 1103 0068 01F0      		breq .L73
 287:quantum/quantum.c **** #ifndef NO_RESET
 1104               		.loc 1 287 9 is_stmt 1 view .LVU218
 1105 006a CB35      		cpi r28,91
 1106 006c FDE5      		ldi r31,93
 1107 006e DF07      		cpc r29,r31
 1108 0070 01F0      		breq .L74
 1109 0072 00F4      		brsh .L75
 1110 0074 C115      		cp r28,__zero_reg__
 1111 0076 ECE5      		ldi r30,92
 1112 0078 DE07      		cpc r29,r30
 1113 007a 01F0      		breq .L76
 1114 007c CF3D      		cpi r28,-33
 1115 007e DC45      		sbci r29,92
 1116 0080 01F0      		breq .L77
 1117               	.L73:
 336:quantum/quantum.c **** }
 1118               		.loc 1 336 5 view .LVU219
 336:quantum/quantum.c **** }
 1119               		.loc 1 336 12 is_stmt 0 view .LVU220
 1120 0082 C801      		movw r24,r16
 1121               	/* epilogue start */
 337:quantum/quantum.c **** 
 1122               		.loc 1 337 1 view .LVU221
 1123 0084 DF91      		pop r29
 1124 0086 CF91      		pop r28
 1125               	.LVL98:
 337:quantum/quantum.c **** 
 1126               		.loc 1 337 1 view .LVU222
 1127 0088 1F91      		pop r17
 1128 008a 0F91      		pop r16
 1129               	.LVL99:
 336:quantum/quantum.c **** }
 1130               		.loc 1 336 12 view .LVU223
 1131 008c 0C94 0000 		jmp process_action_kb
 1132               	.LVL100:
 1133               	.L75:
 287:quantum/quantum.c **** #ifndef NO_RESET
 1134               		.loc 1 287 9 view .LVU224
 1135 0090 CC35      		cpi r28,92
 1136 0092 8DE5      		ldi r24,93
 1137 0094 D807      		cpc r29,r24
 1138 0096 01F0      		breq .L78
 1139 0098 CD35      		cpi r28,93
 1140 009a DD45      		sbci r29,93
 1141 009c 01F4      		brne .L73
 324:quantum/quantum.c ****                 break;
 1142               		.loc 1 324 17 is_stmt 1 view .LVU225
 1143 009e 0E94 0000 		call oneshot_toggle
 1144               	.LVL101:
 325:quantum/quantum.c ****             case ONESHOT_ENABLE:
 1145               		.loc 1 325 17 view .LVU226
 1146 00a2 00C0      		rjmp .L73
 1147               	.L76:
 290:quantum/quantum.c ****                 return false;
 1148               		.loc 1 290 17 view .LVU227
 1149 00a4 0E94 0000 		call reset_keyboard
 1150               	.LVL102:
 291:quantum/quantum.c **** #endif
 1151               		.loc 1 291 17 view .LVU228
 1152               	.L69:
 337:quantum/quantum.c **** 
 1153               		.loc 1 337 1 is_stmt 0 view .LVU229
 1154 00a8 80E0      		ldi r24,0
 1155               	/* epilogue start */
 1156 00aa DF91      		pop r29
 1157 00ac CF91      		pop r28
 1158               	.LVL103:
 337:quantum/quantum.c **** 
 1159               		.loc 1 337 1 view .LVU230
 1160 00ae 1F91      		pop r17
 1161 00b0 0F91      		pop r16
 1162               	.LVL104:
 337:quantum/quantum.c **** 
 1163               		.loc 1 337 1 view .LVU231
 1164 00b2 0895      		ret
 1165               	.LVL105:
 1166               	.L77:
 304:quantum/quantum.c ****                 return false;
 1167               		.loc 1 304 17 is_stmt 1 view .LVU232
 1168 00b4 0E94 0000 		call eeconfig_init
 1169               	.LVL106:
 305:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 1170               		.loc 1 305 17 view .LVU233
 305:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 1171               		.loc 1 305 24 is_stmt 0 view .LVU234
 1172 00b8 00C0      		rjmp .L69
 1173               	.L74:
 327:quantum/quantum.c ****                 break;
 1174               		.loc 1 327 17 is_stmt 1 view .LVU235
 1175 00ba 0E94 0000 		call oneshot_enable
 1176               	.LVL107:
 328:quantum/quantum.c ****             case ONESHOT_DISABLE:
 1177               		.loc 1 328 17 view .LVU236
 1178 00be 00C0      		rjmp .L73
 1179               	.L78:
 330:quantum/quantum.c ****                 break;
 1180               		.loc 1 330 17 view .LVU237
 1181 00c0 0E94 0000 		call oneshot_disable
 1182               	.LVL108:
 331:quantum/quantum.c **** #endif
 1183               		.loc 1 331 17 view .LVU238
 1184 00c4 00C0      		rjmp .L73
 1185               		.cfi_endproc
 1186               	.LFE37:
 1188               		.text
 1189               	.Letext0:
 1190               		.file 3 "c:\\qmk_msys\\mingw64\\avr\\include\\stdint.h"
 1191               		.file 4 "c:\\qmk_msys\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 1192               		.file 5 "tmk_core/common/keyboard.h"
 1193               		.file 6 "tmk_core/common/action.h"
 1194               		.file 7 "tmk_core/common/report.h"
 1195               		.file 8 "tmk_core/common/host.h"
 1196               		.file 9 "tmk_core/common/debug.h"
 1197               		.file 10 "quantum/keycode_config.h"
 1198               		.file 11 "tmk_core/common/timer.h"
 1199               		.file 12 "quantum/sequencer/sequencer.h"
 1200               		.file 13 "tmk_core/common/keycode.h"
 1201               		.file 14 "quantum/quantum_keycodes.h"
 1202               		.file 15 "quantum/keymap.h"
 1203               		.file 16 "quantum/color.h"
 1204               		.file 17 "quantum/rgb_matrix_types.h"
 1205               		.file 18 "quantum/rgb_matrix.h"
 1206               		.file 19 "tmk_core/common/action_layer.h"
 1207               		.file 20 "tmk_core/common/action_util.h"
 1208               		.file 21 "quantum/send_string.h"
 1209               		.file 22 "c:\\qmk_msys\\mingw64\\avr\\include\\stdlib.h"
 1210               		.file 23 "quantum/process_keycode/process_tap_dance.h"
 1211               		.file 24 "quantum/quantum.h"
 1212               		.file 25 "quantum/bootmagic/magic.h"
 1213               		.file 26 "tmk_core/common/eeconfig.h"
 1214               		.file 27 "quantum/process_keycode/process_space_cadet.h"
 1215               		.file 28 "quantum/process_keycode/process_magic.h"
 1216               		.file 29 "quantum/process_keycode/process_grave_esc.h"
 1217               		.file 30 "quantum/process_keycode/process_rgb.h"
 1218               		.file 31 "tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:4      *ABS*:000000000000003f __SREG__
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:12     .text.do_code16:0000000000000000 do_code16
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:155    .text.register_code16:0000000000000000 register_code16
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:213    .text.unregister_code16:0000000000000000 unregister_code16
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:271    .text.tap_code16:0000000000000000 tap_code16
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:310    .text.process_action_kb:0000000000000000 process_action_kb
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:332    .text.process_record_user:0000000000000000 process_record_user
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:354    .text.process_record_kb:0000000000000000 process_record_kb
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:374    .text.post_process_record_user:0000000000000000 post_process_record_user
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:393    .text.post_process_record_kb:0000000000000000 post_process_record_kb
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:412    .text.get_event_keycode:0000000000000000 get_event_keycode
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:527    .text.get_record_keycode:0000000000000000 get_record_keycode
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:559    .text.post_process_record_quantum:0000000000000000 post_process_record_quantum
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:600    .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:652    .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:825    .text.update_tri_layer:0000000000000000 update_tri_layer
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:867    .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:890    .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:910    .text.api_send_unicode:0000000000000000 api_send_unicode
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:928    .text.startup_user:0000000000000000 startup_user
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:946    .text.shutdown_user:0000000000000000 shutdown_user
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:961    .text.reset_keyboard:0000000000000000 reset_keyboard
C:\Users\xue\AppData\Local\Temp\ccKAACSA.s:1009   .text.process_record_quantum:0000000000000000 process_record_quantum

UNDEFINED SYMBOLS
register_weak_mods
register_mods
register_code
unregister_code
unregister_weak_mods
unregister_mods
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
magic
rgb_matrix_init
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
clear_keyboard
bootloader_jump
preprocess_tap_dance
process_tap_dance
process_space_cadet
process_magic
process_grave_esc
process_rgb
oneshot_toggle
eeconfig_init
oneshot_enable
oneshot_disable
