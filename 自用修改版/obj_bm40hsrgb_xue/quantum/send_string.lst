   1               		.file	"send_string.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.send_char,"ax",@progbits
  11               	.global	send_char
  13               	send_char:
  14               	.LVL0:
  15               	.LFB28:
  16               		.file 1 "quantum/send_string.c"
   1:quantum/send_string.c **** /* Copyright 2021
   2:quantum/send_string.c ****  *
   3:quantum/send_string.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/send_string.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/send_string.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/send_string.c ****  * (at your option) any later version.
   7:quantum/send_string.c ****  *
   8:quantum/send_string.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/send_string.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/send_string.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/send_string.c ****  * GNU General Public License for more details.
  12:quantum/send_string.c ****  *
  13:quantum/send_string.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/send_string.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/send_string.c ****  */
  16:quantum/send_string.c **** 
  17:quantum/send_string.c **** #include <ctype.h>
  18:quantum/send_string.c **** 
  19:quantum/send_string.c **** #include "quantum.h"
  20:quantum/send_string.c **** 
  21:quantum/send_string.c **** #include "send_string.h"
  22:quantum/send_string.c **** 
  23:quantum/send_string.c **** // clang-format off
  24:quantum/send_string.c **** 
  25:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  26:quantum/send_string.c ****  * [Shift] needs to be sent with the keycode.
  27:quantum/send_string.c ****  */
  28:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_shift_lut[16] PROGMEM = {
  29:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  30:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  31:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  32:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  33:quantum/send_string.c **** 
  34:quantum/send_string.c ****     KCLUT_ENTRY(0, 1, 1, 1, 1, 1, 1, 0),
  35:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 0, 0, 0, 0),
  36:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  37:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 1, 0, 1, 0, 1, 1),
  38:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  39:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  40:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 1, 1, 1, 1, 1),
  41:quantum/send_string.c ****     KCLUT_ENTRY(1, 1, 1, 0, 0, 0, 1, 1),
  42:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  43:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  44:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  45:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 1, 1, 1, 1, 0)
  46:quantum/send_string.c **** };
  47:quantum/send_string.c **** 
  48:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  49:quantum/send_string.c ****  * [AltGr] needs to be sent with the keycode.
  50:quantum/send_string.c ****  */
  51:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_altgr_lut[16] PROGMEM = {
  52:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  53:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  54:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  55:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  56:quantum/send_string.c **** 
  57:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  58:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  59:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  60:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  61:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  62:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  63:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  64:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  65:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  66:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  67:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  68:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
  69:quantum/send_string.c **** };
  70:quantum/send_string.c **** 
  71:quantum/send_string.c **** /* Bit-Packed look-up table to convert an ASCII character to whether
  72:quantum/send_string.c ****  * [Space] needs to be sent after the keycode
  73:quantum/send_string.c ****  */
  74:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_dead_lut[16] PROGMEM = {
  75:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  76:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  77:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  78:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  79:quantum/send_string.c **** 
  80:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  81:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  82:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  83:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  84:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  85:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  86:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  87:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  88:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  89:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  90:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0),
  91:quantum/send_string.c ****     KCLUT_ENTRY(0, 0, 0, 0, 0, 0, 0, 0)
  92:quantum/send_string.c **** };
  93:quantum/send_string.c **** 
  94:quantum/send_string.c **** /* Look-up table to convert an ASCII character to a keycode.
  95:quantum/send_string.c ****  */
  96:quantum/send_string.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {
  97:quantum/send_string.c ****     // NUL   SOH      STX      ETX      EOT      ENQ      ACK      BEL
  98:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
  99:quantum/send_string.c ****     // BS    TAB      LF       VT       FF       CR       SO       SI
 100:quantum/send_string.c ****     KC_BSPC, KC_TAB,  KC_ENT,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 101:quantum/send_string.c ****     // DLE   DC1      DC2      DC3      DC4      NAK      SYN      ETB
 102:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 103:quantum/send_string.c ****     // CAN   EM       SUB      ESC      FS       GS       RS       US
 104:quantum/send_string.c ****     XXXXXXX, XXXXXXX, XXXXXXX, KC_ESC,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 105:quantum/send_string.c **** 
 106:quantum/send_string.c ****     //       !        "        #        $        %        &        '
 107:quantum/send_string.c ****     KC_SPC,  KC_1,    KC_QUOT, KC_3,    KC_4,    KC_5,    KC_7,    KC_QUOT,
 108:quantum/send_string.c ****     // (     )        *        +        ,        -        .        /
 109:quantum/send_string.c ****     KC_9,    KC_0,    KC_8,    KC_EQL,  KC_COMM, KC_MINS, KC_DOT,  KC_SLSH,
 110:quantum/send_string.c ****     // 0     1        2        3        4        5        6        7
 111:quantum/send_string.c ****     KC_0,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
 112:quantum/send_string.c ****     // 8     9        :        ;        <        =        >        ?
 113:quantum/send_string.c ****     KC_8,    KC_9,    KC_SCLN, KC_SCLN, KC_COMM, KC_EQL,  KC_DOT,  KC_SLSH,
 114:quantum/send_string.c ****     // @     A        B        C        D        E        F        G
 115:quantum/send_string.c ****     KC_2,    KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 116:quantum/send_string.c ****     // H     I        J        K        L        M        N        O
 117:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 118:quantum/send_string.c ****     // P     Q        R        S        T        U        V        W
 119:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 120:quantum/send_string.c ****     // X     Y        Z        [        \        ]        ^        _
 121:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_6,    KC_MINS,
 122:quantum/send_string.c ****     // `     a        b        c        d        e        f        g
 123:quantum/send_string.c ****     KC_GRV,  KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 124:quantum/send_string.c ****     // h     i        j        k        l        m        n        o
 125:quantum/send_string.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 126:quantum/send_string.c ****     // p     q        r        s        t        u        v        w
 127:quantum/send_string.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 128:quantum/send_string.c ****     // x     y        z        {        |        }        ~        DEL
 129:quantum/send_string.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV,  KC_DEL
 130:quantum/send_string.c **** };
 131:quantum/send_string.c **** 
 132:quantum/send_string.c **** // clang-format on
 133:quantum/send_string.c **** 
 134:quantum/send_string.c **** // Note: we bit-pack in "reverse" order to optimize loading
 135:quantum/send_string.c **** #define PGM_LOADBIT(mem, pos) ((pgm_read_byte(&((mem)[(pos) / 8])) >> ((pos) % 8)) & 0x01)
 136:quantum/send_string.c **** 
 137:quantum/send_string.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 138:quantum/send_string.c **** 
 139:quantum/send_string.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 140:quantum/send_string.c **** 
 141:quantum/send_string.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 142:quantum/send_string.c ****     while (1) {
 143:quantum/send_string.c ****         char ascii_code = *str;
 144:quantum/send_string.c ****         if (!ascii_code) break;
 145:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 146:quantum/send_string.c ****             ascii_code = *(++str);
 147:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 148:quantum/send_string.c ****                 // tap
 149:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 150:quantum/send_string.c ****                 tap_code(keycode);
 151:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 152:quantum/send_string.c ****                 // down
 153:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 154:quantum/send_string.c ****                 register_code(keycode);
 155:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 156:quantum/send_string.c ****                 // up
 157:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 158:quantum/send_string.c ****                 unregister_code(keycode);
 159:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 160:quantum/send_string.c ****                 // delay
 161:quantum/send_string.c ****                 int     ms      = 0;
 162:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 163:quantum/send_string.c ****                 while (isdigit(keycode)) {
 164:quantum/send_string.c ****                     ms *= 10;
 165:quantum/send_string.c ****                     ms += keycode - '0';
 166:quantum/send_string.c ****                     keycode = *(++str);
 167:quantum/send_string.c ****                 }
 168:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 169:quantum/send_string.c ****             }
 170:quantum/send_string.c ****         } else {
 171:quantum/send_string.c ****             send_char(ascii_code);
 172:quantum/send_string.c ****         }
 173:quantum/send_string.c ****         ++str;
 174:quantum/send_string.c ****         // interval
 175:quantum/send_string.c ****         {
 176:quantum/send_string.c ****             uint8_t ms = interval;
 177:quantum/send_string.c ****             while (ms--) wait_ms(1);
 178:quantum/send_string.c ****         }
 179:quantum/send_string.c ****     }
 180:quantum/send_string.c **** }
 181:quantum/send_string.c **** 
 182:quantum/send_string.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 183:quantum/send_string.c ****     while (1) {
 184:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 185:quantum/send_string.c ****         if (!ascii_code) break;
 186:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 187:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 188:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 189:quantum/send_string.c ****                 // tap
 190:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 191:quantum/send_string.c ****                 tap_code(keycode);
 192:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 193:quantum/send_string.c ****                 // down
 194:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 195:quantum/send_string.c ****                 register_code(keycode);
 196:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 197:quantum/send_string.c ****                 // up
 198:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 199:quantum/send_string.c ****                 unregister_code(keycode);
 200:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 201:quantum/send_string.c ****                 // delay
 202:quantum/send_string.c ****                 int     ms      = 0;
 203:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 204:quantum/send_string.c ****                 while (isdigit(keycode)) {
 205:quantum/send_string.c ****                     ms *= 10;
 206:quantum/send_string.c ****                     ms += keycode - '0';
 207:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 208:quantum/send_string.c ****                 }
 209:quantum/send_string.c ****                 while (ms--) wait_ms(1);
 210:quantum/send_string.c ****             }
 211:quantum/send_string.c ****         } else {
 212:quantum/send_string.c ****             send_char(ascii_code);
 213:quantum/send_string.c ****         }
 214:quantum/send_string.c ****         ++str;
 215:quantum/send_string.c ****         // interval
 216:quantum/send_string.c ****         {
 217:quantum/send_string.c ****             uint8_t ms = interval;
 218:quantum/send_string.c ****             while (ms--) wait_ms(1);
 219:quantum/send_string.c ****         }
 220:quantum/send_string.c ****     }
 221:quantum/send_string.c **** }
 222:quantum/send_string.c **** 
 223:quantum/send_string.c **** void send_char(char ascii_code) {
  17               		.loc 1 223 33 view -0
  18               		.cfi_startproc
  19               		.loc 1 223 33 is_stmt 0 view .LVU1
  20 0000 DF92      		push r13
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 13, -2
  24 0002 EF92      		push r14
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 14, -3
  28 0004 FF92      		push r15
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 15, -4
  32 0006 0F93      		push r16
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 16, -5
  36 0008 1F93      		push r17
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 17, -6
  40 000a CF93      		push r28
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 28, -7
  44 000c DF93      		push r29
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 29, -8
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 7 */
  51               	.L__stack_usage = 7
 224:quantum/send_string.c **** #if defined(AUDIO_ENABLE) && defined(SENDSTRING_BELL)
 225:quantum/send_string.c ****     if (ascii_code == '\a') {  // BEL
 226:quantum/send_string.c ****         PLAY_SONG(bell_song);
 227:quantum/send_string.c ****         return;
 228:quantum/send_string.c ****     }
 229:quantum/send_string.c **** #endif
 230:quantum/send_string.c **** 
 231:quantum/send_string.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
  52               		.loc 1 231 5 is_stmt 1 view .LVU2
  53               	.LBB29:
  54               		.loc 1 231 26 view .LVU3
  55               	.LVL1:
  56               		.loc 1 231 26 view .LVU4
  57               		.loc 1 231 26 view .LVU5
  58 000e E82F      		mov r30,r24
  59 0010 F0E0      		ldi r31,0
  60 0012 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
  61 0014 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
  62               	/* #APP */
  63               	 ;  231 "quantum/send_string.c" 1
  64 0016 D490      		lpm r13, Z
  65               		
  66               	 ;  0 "" 2
  67               	.LVL2:
  68               		.loc 1 231 26 view .LVU6
  69               		.loc 1 231 26 is_stmt 0 view .LVU7
  70               	/* #NOAPP */
  71               	.LBE29:
 232:quantum/send_string.c ****     bool    is_shifted = PGM_LOADBIT(ascii_to_shift_lut, (uint8_t)ascii_code);
  72               		.loc 1 232 5 is_stmt 1 view .LVU8
  73               	.LBB30:
  74               		.loc 1 232 26 view .LVU9
  75 0018 282F      		mov r18,r24
  76 001a 2695      		lsr r18
  77 001c 2695      		lsr r18
  78 001e 2695      		lsr r18
  79 0020 30E0      		ldi r19,0
  80               	.LVL3:
  81               		.loc 1 232 26 view .LVU10
  82               		.loc 1 232 26 view .LVU11
  83 0022 F901      		movw r30,r18
  84 0024 E050      		subi r30,lo8(-(ascii_to_shift_lut))
  85 0026 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
  86               	.LVL4:
  87               		.loc 1 232 26 is_stmt 0 view .LVU12
  88               	/* #APP */
  89               	 ;  232 "quantum/send_string.c" 1
  90 0028 0491      		lpm r16, Z
  91               		
  92               	 ;  0 "" 2
  93               	.LVL5:
  94               		.loc 1 232 26 is_stmt 1 view .LVU13
  95               	/* #NOAPP */
  96               	.LBE30:
  97 002a 8770      		andi r24,lo8(7)
  98               	.LVL6:
  99               		.loc 1 232 26 is_stmt 0 view .LVU14
 100 002c 10E0      		ldi r17,0
 101 002e 082E      		mov r0,r24
 102 0030 00C0      		rjmp 2f
 103               		1:
 104 0032 1595      		asr r17
 105 0034 0795      		ror r16
 106               		2:
 107 0036 0A94      		dec r0
 108 0038 02F4      		brpl 1b
 109               	.LVL7:
 110               		.loc 1 232 26 view .LVU15
 111 003a 0170      		andi r16,1
 112 003c 1127      		clr r17
 113               	.LVL8:
 233:quantum/send_string.c ****     bool    is_altgred = PGM_LOADBIT(ascii_to_altgr_lut, (uint8_t)ascii_code);
 114               		.loc 1 233 5 is_stmt 1 view .LVU16
 115               	.LBB31:
 116               		.loc 1 233 26 view .LVU17
 117               		.loc 1 233 26 view .LVU18
 118               		.loc 1 233 26 view .LVU19
 119 003e F901      		movw r30,r18
 120               	.LVL9:
 121               		.loc 1 233 26 is_stmt 0 view .LVU20
 122 0040 E050      		subi r30,lo8(-(ascii_to_altgr_lut))
 123 0042 F040      		sbci r31,hi8(-(ascii_to_altgr_lut))
 124               	.LVL10:
 125               		.loc 1 233 26 view .LVU21
 126               	/* #APP */
 127               	 ;  233 "quantum/send_string.c" 1
 128 0044 E490      		lpm r14, Z
 129               		
 130               	 ;  0 "" 2
 131               	.LVL11:
 132               		.loc 1 233 26 is_stmt 1 view .LVU22
 133               	/* #NOAPP */
 134               	.LBE31:
 135 0046 F12C      		mov r15,__zero_reg__
 136 0048 082E      		mov r0,r24
 137 004a 00C0      		rjmp 2f
 138               		1:
 139 004c F594      		asr r15
 140 004e E794      		ror r14
 141               		2:
 142 0050 0A94      		dec r0
 143 0052 02F4      		brpl 1b
 144               	.LVL12:
 145               		.loc 1 233 26 is_stmt 0 view .LVU23
 146 0054 91E0      		ldi r25,1
 147 0056 E922      		and r14,r25
 148 0058 FF24      		clr r15
 149               	.LVL13:
 234:quantum/send_string.c ****     bool    is_dead    = PGM_LOADBIT(ascii_to_dead_lut, (uint8_t)ascii_code);
 150               		.loc 1 234 5 is_stmt 1 view .LVU24
 151               	.LBB32:
 152               		.loc 1 234 26 view .LVU25
 153               		.loc 1 234 26 view .LVU26
 154               		.loc 1 234 26 view .LVU27
 155 005a F901      		movw r30,r18
 156               	.LVL14:
 157               		.loc 1 234 26 is_stmt 0 view .LVU28
 158 005c E050      		subi r30,lo8(-(ascii_to_dead_lut))
 159 005e F040      		sbci r31,hi8(-(ascii_to_dead_lut))
 160               	.LVL15:
 161               		.loc 1 234 26 view .LVU29
 162               	/* #APP */
 163               	 ;  234 "quantum/send_string.c" 1
 164 0060 C491      		lpm r28, Z
 165               		
 166               	 ;  0 "" 2
 167               	.LVL16:
 168               		.loc 1 234 26 is_stmt 1 view .LVU30
 169               	/* #NOAPP */
 170               	.LBE32:
 171 0062 D0E0      		ldi r29,0
 172 0064 00C0      		rjmp 2f
 173               		1:
 174 0066 D595      		asr r29
 175 0068 C795      		ror r28
 176               		2:
 177 006a 8A95      		dec r24
 178 006c 02F4      		brpl 1b
 179               	.LVL17:
 180               		.loc 1 234 26 is_stmt 0 view .LVU31
 181 006e C170      		andi r28,1
 182 0070 DD27      		clr r29
 183               	.LVL18:
 235:quantum/send_string.c **** 
 236:quantum/send_string.c ****     if (is_shifted) {
 184               		.loc 1 236 5 is_stmt 1 view .LVU32
 185               		.loc 1 236 8 is_stmt 0 view .LVU33
 186 0072 0115      		cp r16,__zero_reg__
 187 0074 1105      		cpc r17,__zero_reg__
 188 0076 01F0      		breq .L2
 237:quantum/send_string.c ****         register_code(KC_LSFT);
 189               		.loc 1 237 9 is_stmt 1 view .LVU34
 190 0078 81EE      		ldi r24,lo8(-31)
 191 007a 0E94 0000 		call register_code
 192               	.LVL19:
 193               	.L2:
 238:quantum/send_string.c ****     }
 239:quantum/send_string.c ****     if (is_altgred) {
 194               		.loc 1 239 5 view .LVU35
 195               		.loc 1 239 8 is_stmt 0 view .LVU36
 196 007e E114      		cp r14,__zero_reg__
 197 0080 F104      		cpc r15,__zero_reg__
 198 0082 01F0      		breq .L3
 240:quantum/send_string.c ****         register_code(KC_RALT);
 199               		.loc 1 240 9 is_stmt 1 view .LVU37
 200 0084 86EE      		ldi r24,lo8(-26)
 201 0086 0E94 0000 		call register_code
 202               	.LVL20:
 203               	.L3:
 241:quantum/send_string.c ****     }
 242:quantum/send_string.c ****     tap_code(keycode);
 204               		.loc 1 242 5 view .LVU38
 205 008a 8D2D      		mov r24,r13
 206 008c 0E94 0000 		call tap_code
 207               	.LVL21:
 243:quantum/send_string.c ****     if (is_altgred) {
 208               		.loc 1 243 5 view .LVU39
 209               		.loc 1 243 8 is_stmt 0 view .LVU40
 210 0090 EF28      		or r14,r15
 211 0092 01F0      		breq .L4
 244:quantum/send_string.c ****         unregister_code(KC_RALT);
 212               		.loc 1 244 9 is_stmt 1 view .LVU41
 213 0094 86EE      		ldi r24,lo8(-26)
 214 0096 0E94 0000 		call unregister_code
 215               	.LVL22:
 216               	.L4:
 245:quantum/send_string.c ****     }
 246:quantum/send_string.c ****     if (is_shifted) {
 217               		.loc 1 246 5 view .LVU42
 218               		.loc 1 246 8 is_stmt 0 view .LVU43
 219 009a 012B      		or r16,r17
 220 009c 01F0      		breq .L5
 247:quantum/send_string.c ****         unregister_code(KC_LSFT);
 221               		.loc 1 247 9 is_stmt 1 view .LVU44
 222 009e 81EE      		ldi r24,lo8(-31)
 223 00a0 0E94 0000 		call unregister_code
 224               	.LVL23:
 225               	.L5:
 248:quantum/send_string.c ****     }
 249:quantum/send_string.c ****     if (is_dead) {
 226               		.loc 1 249 5 view .LVU45
 227               		.loc 1 249 8 is_stmt 0 view .LVU46
 228 00a4 CD2B      		or r28,r29
 229 00a6 01F0      		breq .L1
 250:quantum/send_string.c ****         tap_code(KC_SPACE);
 230               		.loc 1 250 9 is_stmt 1 view .LVU47
 231 00a8 8CE2      		ldi r24,lo8(44)
 232               	/* epilogue start */
 251:quantum/send_string.c ****     }
 252:quantum/send_string.c **** }
 233               		.loc 1 252 1 is_stmt 0 view .LVU48
 234 00aa DF91      		pop r29
 235 00ac CF91      		pop r28
 236               	.LVL24:
 237               		.loc 1 252 1 view .LVU49
 238 00ae 1F91      		pop r17
 239 00b0 0F91      		pop r16
 240               	.LVL25:
 241               		.loc 1 252 1 view .LVU50
 242 00b2 FF90      		pop r15
 243 00b4 EF90      		pop r14
 244               	.LVL26:
 245               		.loc 1 252 1 view .LVU51
 246 00b6 DF90      		pop r13
 247               	.LVL27:
 250:quantum/send_string.c ****         tap_code(KC_SPACE);
 248               		.loc 1 250 9 view .LVU52
 249 00b8 0C94 0000 		jmp tap_code
 250               	.LVL28:
 251               	.L1:
 252               	/* epilogue start */
 253               		.loc 1 252 1 view .LVU53
 254 00bc DF91      		pop r29
 255 00be CF91      		pop r28
 256               	.LVL29:
 257               		.loc 1 252 1 view .LVU54
 258 00c0 1F91      		pop r17
 259 00c2 0F91      		pop r16
 260               	.LVL30:
 261               		.loc 1 252 1 view .LVU55
 262 00c4 FF90      		pop r15
 263 00c6 EF90      		pop r14
 264               	.LVL31:
 265               		.loc 1 252 1 view .LVU56
 266 00c8 DF90      		pop r13
 267               	.LVL32:
 268               		.loc 1 252 1 view .LVU57
 269 00ca 0895      		ret
 270               		.cfi_endproc
 271               	.LFE28:
 273               		.section	.text.send_string_with_delay,"ax",@progbits
 274               	.global	send_string_with_delay
 276               	send_string_with_delay:
 277               	.LVL33:
 278               	.LFB26:
 141:quantum/send_string.c ****     while (1) {
 279               		.loc 1 141 64 is_stmt 1 view -0
 280               		.cfi_startproc
 141:quantum/send_string.c ****     while (1) {
 281               		.loc 1 141 64 is_stmt 0 view .LVU59
 282 0000 EF92      		push r14
 283               	.LCFI7:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 14, -2
 286 0002 FF92      		push r15
 287               	.LCFI8:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 15, -3
 290 0004 0F93      		push r16
 291               	.LCFI9:
 292               		.cfi_def_cfa_offset 5
 293               		.cfi_offset 16, -4
 294 0006 1F93      		push r17
 295               	.LCFI10:
 296               		.cfi_def_cfa_offset 6
 297               		.cfi_offset 17, -5
 298 0008 CF93      		push r28
 299               	.LCFI11:
 300               		.cfi_def_cfa_offset 7
 301               		.cfi_offset 28, -6
 302 000a DF93      		push r29
 303               	.LCFI12:
 304               		.cfi_def_cfa_offset 8
 305               		.cfi_offset 29, -7
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 6 */
 309               	.L__stack_usage = 6
 310 000c EC01      		movw r28,r24
 311 000e 162F      		mov r17,r22
 312               	.LBB33:
 313               	.LBB34:
 164:quantum/send_string.c ****                     ms += keycode - '0';
 314               		.loc 1 164 24 view .LVU60
 315 0010 0AE0      		ldi r16,lo8(10)
 316               	.LVL34:
 317               	.L33:
 164:quantum/send_string.c ****                     ms += keycode - '0';
 318               		.loc 1 164 24 view .LVU61
 319               	.LBE34:
 320               	.LBE33:
 142:quantum/send_string.c ****         char ascii_code = *str;
 321               		.loc 1 142 5 is_stmt 1 view .LVU62
 322               	.LBB45:
 143:quantum/send_string.c ****         if (!ascii_code) break;
 323               		.loc 1 143 9 view .LVU63
 143:quantum/send_string.c ****         if (!ascii_code) break;
 324               		.loc 1 143 14 is_stmt 0 view .LVU64
 325 0012 8881      		ld r24,Y
 326               	.LVL35:
 144:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 327               		.loc 1 144 9 is_stmt 1 view .LVU65
 144:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 328               		.loc 1 144 12 is_stmt 0 view .LVU66
 329 0014 8823      		tst r24
 330 0016 01F4      		brne .+2
 331 0018 00C0      		rjmp .L19
 145:quantum/send_string.c ****             ascii_code = *(++str);
 332               		.loc 1 145 9 is_stmt 1 view .LVU67
 145:quantum/send_string.c ****             ascii_code = *(++str);
 333               		.loc 1 145 12 is_stmt 0 view .LVU68
 334 001a 8130      		cpi r24,lo8(1)
 335 001c 01F0      		breq .+2
 336 001e 00C0      		rjmp .L21
 146:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 337               		.loc 1 146 13 is_stmt 1 view .LVU69
 338               	.LVL36:
 146:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 339               		.loc 1 146 24 is_stmt 0 view .LVU70
 340 0020 8981      		ldd r24,Y+1
 341               	.LVL37:
 147:quantum/send_string.c ****                 // tap
 342               		.loc 1 147 13 is_stmt 1 view .LVU71
 147:quantum/send_string.c ****                 // tap
 343               		.loc 1 147 16 is_stmt 0 view .LVU72
 344 0022 8130      		cpi r24,lo8(1)
 345 0024 01F4      		brne .L22
 346               	.LBB37:
 149:quantum/send_string.c ****                 tap_code(keycode);
 347               		.loc 1 149 17 is_stmt 1 view .LVU73
 149:quantum/send_string.c ****                 tap_code(keycode);
 348               		.loc 1 149 25 is_stmt 0 view .LVU74
 349 0026 7E01      		movw r14,r28
 350 0028 22E0      		ldi r18,2
 351 002a E20E      		add r14,r18
 352 002c F11C      		adc r15,__zero_reg__
 353               	.LVL38:
 150:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 354               		.loc 1 150 17 is_stmt 1 view .LVU75
 355 002e 8A81      		ldd r24,Y+2
 356               	.LVL39:
 150:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 357               		.loc 1 150 17 is_stmt 0 view .LVU76
 358 0030 0E94 0000 		call tap_code
 359               	.LVL40:
 360               	.L34:
 150:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 361               		.loc 1 150 17 view .LVU77
 362               	.LBE37:
 363               	.LBB38:
 157:quantum/send_string.c ****                 unregister_code(keycode);
 364               		.loc 1 157 25 view .LVU78
 365 0034 E701      		movw r28,r14
 366               	.LVL41:
 367               	.L23:
 157:quantum/send_string.c ****                 unregister_code(keycode);
 368               		.loc 1 157 25 view .LVU79
 369               	.LBE38:
 173:quantum/send_string.c ****         // interval
 370               		.loc 1 173 9 is_stmt 1 view .LVU80
 173:quantum/send_string.c ****         // interval
 371               		.loc 1 173 9 is_stmt 0 view .LVU81
 372 0036 2196      		adiw r28,1
 373               	.LVL42:
 374               	.LBB39:
 176:quantum/send_string.c ****             while (ms--) wait_ms(1);
 375               		.loc 1 176 13 is_stmt 1 view .LVU82
 177:quantum/send_string.c ****         }
 376               		.loc 1 177 13 view .LVU83
 176:quantum/send_string.c ****             while (ms--) wait_ms(1);
 377               		.loc 1 176 21 is_stmt 0 view .LVU84
 378 0038 812F      		mov r24,r17
 379               	.LVL43:
 380               	.L31:
 177:quantum/send_string.c ****         }
 381               		.loc 1 177 19 is_stmt 1 discriminator 1 view .LVU85
 177:quantum/send_string.c ****         }
 382               		.loc 1 177 22 is_stmt 0 discriminator 1 view .LVU86
 383               	.LVL44:
 384 003a 8150      		subi r24,1
 385 003c 00F0      		brcs .L33
 177:quantum/send_string.c ****         }
 386               		.loc 1 177 26 is_stmt 1 view .LVU87
 387               	.LBB40:
 388               	.LBI40:
 389               		.file 2 "c:\\qmk_msys\\mingw64\\avr\\include\\util\\delay.h"
   1:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    All rights reserved.
   5:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   6:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   9:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  12:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      distribution.
  16:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  17:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  21:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  33:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  35:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  38:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  endif
  42:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  44:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <math.h>
  47:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  48:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \file */
  49:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \code
  51:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \endcode
  55:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  56:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     used.
  60:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  61:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  70:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  79:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  83:c:\qmk_msys\mingw64\avr\include\util\delay.h **** */
  84:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  85:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
  89:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  90:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \def F_CPU
  95:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  97:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 103:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     integer value.
 107:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 108:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 110:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 111:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 114:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 115:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  include <math.h>
 119:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 120:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 121:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /**
 122:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 124:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 126:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 129:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 131:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 137:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 142:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 147:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    respectively.
 151:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 152:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \note
 153:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 154:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 164:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 165:c:\qmk_msys\mingw64\avr\include\util\delay.h **** void
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** _delay_ms(double __ms)
 390               		.loc 2 166 1 view .LVU88
 391               	.LBB41:
 167:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 392               		.loc 2 168 2 view .LVU89
 169:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 393               		.loc 2 172 2 view .LVU90
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 394               		.loc 2 173 2 view .LVU91
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 395               		.loc 2 174 2 view .LVU92
 175:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 176:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 179:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 182:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#else
 183:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		//round up by default
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 396               		.loc 2 184 3 view .LVU93
 185:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 186:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 187:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 397               		.loc 2 187 2 view .LVU94
 398 003e EFE9      		ldi r30,lo8(3999)
 399 0040 FFE0      		ldi r31,hi8(3999)
 400 0042 3197      	1:	sbiw r30,1
 401 0044 01F4      		brne 1b
 402 0046 00C0      		rjmp .
 403 0048 0000      		nop
 404 004a 00C0      		rjmp .L31
 405               	.LVL45:
 406               	.L22:
 407               		.loc 2 187 2 is_stmt 0 view .LVU95
 408               	.LBE41:
 409               	.LBE40:
 410               	.LBE39:
 151:quantum/send_string.c ****                 // down
 411               		.loc 1 151 20 is_stmt 1 view .LVU96
 151:quantum/send_string.c ****                 // down
 412               		.loc 1 151 23 is_stmt 0 view .LVU97
 413 004c 8230      		cpi r24,lo8(2)
 414 004e 01F4      		brne .L24
 415               	.LBB42:
 153:quantum/send_string.c ****                 register_code(keycode);
 416               		.loc 1 153 17 is_stmt 1 view .LVU98
 153:quantum/send_string.c ****                 register_code(keycode);
 417               		.loc 1 153 25 is_stmt 0 view .LVU99
 418 0050 7E01      		movw r14,r28
 419 0052 82E0      		ldi r24,2
 420 0054 E80E      		add r14,r24
 421 0056 F11C      		adc r15,__zero_reg__
 422               	.LVL46:
 154:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 423               		.loc 1 154 17 is_stmt 1 view .LVU100
 424 0058 8A81      		ldd r24,Y+2
 425 005a 0E94 0000 		call register_code
 426               	.LVL47:
 154:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 427               		.loc 1 154 17 is_stmt 0 view .LVU101
 428 005e 00C0      		rjmp .L34
 429               	.LVL48:
 430               	.L24:
 154:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 431               		.loc 1 154 17 view .LVU102
 432               	.LBE42:
 155:quantum/send_string.c ****                 // up
 433               		.loc 1 155 20 is_stmt 1 view .LVU103
 155:quantum/send_string.c ****                 // up
 434               		.loc 1 155 23 is_stmt 0 view .LVU104
 435 0060 8330      		cpi r24,lo8(3)
 436 0062 01F4      		brne .L25
 437               	.LBB43:
 157:quantum/send_string.c ****                 unregister_code(keycode);
 438               		.loc 1 157 17 is_stmt 1 view .LVU105
 157:quantum/send_string.c ****                 unregister_code(keycode);
 439               		.loc 1 157 25 is_stmt 0 view .LVU106
 440 0064 7E01      		movw r14,r28
 441 0066 E2E0      		ldi r30,2
 442 0068 EE0E      		add r14,r30
 443 006a F11C      		adc r15,__zero_reg__
 444               	.LVL49:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 445               		.loc 1 158 17 is_stmt 1 view .LVU107
 446 006c 8A81      		ldd r24,Y+2
 447               	.LVL50:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 448               		.loc 1 158 17 is_stmt 0 view .LVU108
 449 006e 0E94 0000 		call unregister_code
 450               	.LVL51:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 451               		.loc 1 158 17 view .LVU109
 452 0072 00C0      		rjmp .L34
 453               	.LVL52:
 454               	.L25:
 158:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 455               		.loc 1 158 17 view .LVU110
 456               	.LBE43:
 159:quantum/send_string.c ****                 // delay
 457               		.loc 1 159 20 is_stmt 1 view .LVU111
 159:quantum/send_string.c ****                 // delay
 458               		.loc 1 159 23 is_stmt 0 view .LVU112
 459 0074 8430      		cpi r24,lo8(4)
 460 0076 01F0      		breq .L26
 461               	.LVL53:
 159:quantum/send_string.c ****                 // delay
 462               		.loc 1 159 23 view .LVU113
 463 0078 2196      		adiw r28,1
 464               	.LVL54:
 159:quantum/send_string.c ****                 // delay
 465               		.loc 1 159 23 view .LVU114
 466 007a 00C0      		rjmp .L23
 467               	.L26:
 468               	.LBB44:
 161:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 469               		.loc 1 161 17 is_stmt 1 view .LVU115
 470               	.LVL55:
 162:quantum/send_string.c ****                 while (isdigit(keycode)) {
 471               		.loc 1 162 17 view .LVU116
 162:quantum/send_string.c ****                 while (isdigit(keycode)) {
 472               		.loc 1 162 25 is_stmt 0 view .LVU117
 473 007c 2A81      		ldd r18,Y+2
 474               	.LVL56:
 163:quantum/send_string.c ****                     ms *= 10;
 475               		.loc 1 163 17 is_stmt 1 view .LVU118
 162:quantum/send_string.c ****                 while (isdigit(keycode)) {
 476               		.loc 1 162 25 is_stmt 0 view .LVU119
 477 007e 2296      		adiw r28,2
 478               	.LVL57:
 161:quantum/send_string.c ****                 uint8_t keycode = *(++str);
 479               		.loc 1 161 25 view .LVU120
 480 0080 90E0      		ldi r25,0
 481 0082 80E0      		ldi r24,0
 482               	.LVL58:
 483               	.L27:
 163:quantum/send_string.c ****                     ms *= 10;
 484               		.loc 1 163 23 is_stmt 1 view .LVU121
 485 0084 AE01      		movw r20,r28
 486 0086 4F5F      		subi r20,-1
 487 0088 5F4F      		sbci r21,-1
 163:quantum/send_string.c ****                     ms *= 10;
 488               		.loc 1 163 24 is_stmt 0 view .LVU122
 489 008a 2053      		subi r18,48
 490 008c 330B      		sbc r19,r19
 491               	.LVL59:
 163:quantum/send_string.c ****                     ms *= 10;
 492               		.loc 1 163 23 view .LVU123
 493 008e 2A30      		cpi r18,10
 494 0090 3105      		cpc r19,__zero_reg__
 495 0092 00F0      		brlo .L28
 496               	.L29:
 168:quantum/send_string.c ****             }
 497               		.loc 1 168 23 is_stmt 1 discriminator 1 view .LVU124
 168:quantum/send_string.c ****             }
 498               		.loc 1 168 26 is_stmt 0 discriminator 1 view .LVU125
 499               	.LVL60:
 500 0094 0197      		sbiw r24,1
 501 0096 00F0      		brcs .L23
 168:quantum/send_string.c ****             }
 502               		.loc 1 168 30 is_stmt 1 view .LVU126
 503               	.LBB35:
 504               	.LBI35:
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 505               		.loc 2 166 1 view .LVU127
 506               	.LBB36:
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 507               		.loc 2 168 2 view .LVU128
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 508               		.loc 2 172 2 view .LVU129
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 509               		.loc 2 173 2 view .LVU130
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 510               		.loc 2 174 2 view .LVU131
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 511               		.loc 2 184 3 view .LVU132
 512               		.loc 2 187 2 view .LVU133
 513 0098 EFE9      		ldi r30,lo8(3999)
 514 009a FFE0      		ldi r31,hi8(3999)
 515 009c 3197      	1:	sbiw r30,1
 516 009e 01F4      		brne 1b
 517 00a0 00C0      		rjmp .
 518 00a2 0000      		nop
 519 00a4 00C0      		rjmp .L29
 520               	.LVL61:
 521               	.L28:
 522               		.loc 2 187 2 is_stmt 0 view .LVU134
 523               	.LBE36:
 524               	.LBE35:
 164:quantum/send_string.c ****                     ms += keycode - '0';
 525               		.loc 1 164 21 is_stmt 1 view .LVU135
 164:quantum/send_string.c ****                     ms += keycode - '0';
 526               		.loc 1 164 24 is_stmt 0 view .LVU136
 527 00a6 089F      		mul r16,r24
 528 00a8 B001      		movw r22,r0
 529 00aa 099F      		mul r16,r25
 530 00ac 700D      		add r23,r0
 531 00ae 1124      		clr __zero_reg__
 532               	.LVL62:
 165:quantum/send_string.c ****                     keycode = *(++str);
 533               		.loc 1 165 21 is_stmt 1 view .LVU137
 165:quantum/send_string.c ****                     keycode = *(++str);
 534               		.loc 1 165 24 is_stmt 0 view .LVU138
 535 00b0 C901      		movw r24,r18
 536 00b2 860F      		add r24,r22
 537 00b4 971F      		adc r25,r23
 538               	.LVL63:
 166:quantum/send_string.c ****                 }
 539               		.loc 1 166 21 is_stmt 1 view .LVU139
 166:quantum/send_string.c ****                 }
 540               		.loc 1 166 29 is_stmt 0 view .LVU140
 541 00b6 2981      		ldd r18,Y+1
 542               	.LVL64:
 166:quantum/send_string.c ****                 }
 543               		.loc 1 166 29 view .LVU141
 544 00b8 EA01      		movw r28,r20
 545 00ba 00C0      		rjmp .L27
 546               	.LVL65:
 547               	.L21:
 166:quantum/send_string.c ****                 }
 548               		.loc 1 166 29 view .LVU142
 549               	.LBE44:
 171:quantum/send_string.c ****         }
 550               		.loc 1 171 13 is_stmt 1 view .LVU143
 551 00bc 0E94 0000 		call send_char
 552               	.LVL66:
 171:quantum/send_string.c ****         }
 553               		.loc 1 171 13 is_stmt 0 view .LVU144
 554 00c0 00C0      		rjmp .L23
 555               	.LVL67:
 556               	.L19:
 557               	/* epilogue start */
 171:quantum/send_string.c ****         }
 558               		.loc 1 171 13 view .LVU145
 559               	.LBE45:
 180:quantum/send_string.c **** 
 560               		.loc 1 180 1 view .LVU146
 561 00c2 DF91      		pop r29
 562 00c4 CF91      		pop r28
 563               	.LVL68:
 180:quantum/send_string.c **** 
 564               		.loc 1 180 1 view .LVU147
 565 00c6 1F91      		pop r17
 566               	.LVL69:
 180:quantum/send_string.c **** 
 567               		.loc 1 180 1 view .LVU148
 568 00c8 0F91      		pop r16
 569 00ca FF90      		pop r15
 570 00cc EF90      		pop r14
 571 00ce 0895      		ret
 572               		.cfi_endproc
 573               	.LFE26:
 575               		.section	.text.send_string,"ax",@progbits
 576               	.global	send_string
 578               	send_string:
 579               	.LVL70:
 580               	.LFB24:
 137:quantum/send_string.c **** 
 581               		.loc 1 137 35 is_stmt 1 view -0
 582               		.cfi_startproc
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 137:quantum/send_string.c **** 
 587               		.loc 1 137 37 view .LVU150
 588 0000 60E0      		ldi r22,0
 589 0002 0C94 0000 		jmp send_string_with_delay
 590               	.LVL71:
 137:quantum/send_string.c **** 
 591               		.loc 1 137 37 is_stmt 0 view .LVU151
 592               		.cfi_endproc
 593               	.LFE24:
 595               		.section	.text.send_string_with_delay_P,"ax",@progbits
 596               	.global	send_string_with_delay_P
 598               	send_string_with_delay_P:
 599               	.LVL72:
 600               	.LFB27:
 182:quantum/send_string.c ****     while (1) {
 601               		.loc 1 182 66 is_stmt 1 view -0
 602               		.cfi_startproc
 182:quantum/send_string.c ****     while (1) {
 603               		.loc 1 182 66 is_stmt 0 view .LVU153
 604 0000 EF92      		push r14
 605               	.LCFI13:
 606               		.cfi_def_cfa_offset 3
 607               		.cfi_offset 14, -2
 608 0002 FF92      		push r15
 609               	.LCFI14:
 610               		.cfi_def_cfa_offset 4
 611               		.cfi_offset 15, -3
 612 0004 0F93      		push r16
 613               	.LCFI15:
 614               		.cfi_def_cfa_offset 5
 615               		.cfi_offset 16, -4
 616 0006 1F93      		push r17
 617               	.LCFI16:
 618               		.cfi_def_cfa_offset 6
 619               		.cfi_offset 17, -5
 620 0008 CF93      		push r28
 621               	.LCFI17:
 622               		.cfi_def_cfa_offset 7
 623               		.cfi_offset 28, -6
 624 000a DF93      		push r29
 625               	.LCFI18:
 626               		.cfi_def_cfa_offset 8
 627               		.cfi_offset 29, -7
 628               	/* prologue: function */
 629               	/* frame size = 0 */
 630               	/* stack size = 6 */
 631               	.L__stack_usage = 6
 632 000c 8C01      		movw r16,r24
 633 000e F62E      		mov r15,r22
 634               	.LBB46:
 635               	.LBB47:
 205:quantum/send_string.c ****                     ms += keycode - '0';
 636               		.loc 1 205 24 view .LVU154
 637 0010 8AE0      		ldi r24,lo8(10)
 638 0012 E82E      		mov r14,r24
 639               	.LVL73:
 640               	.L49:
 205:quantum/send_string.c ****                     ms += keycode - '0';
 641               		.loc 1 205 24 view .LVU155
 642               	.LBE47:
 643               	.LBE46:
 183:quantum/send_string.c ****         char ascii_code = pgm_read_byte(str);
 644               		.loc 1 183 5 is_stmt 1 view .LVU156
 645               	.LBB64:
 184:quantum/send_string.c ****         if (!ascii_code) break;
 646               		.loc 1 184 9 view .LVU157
 647               	.LBB52:
 184:quantum/send_string.c ****         if (!ascii_code) break;
 648               		.loc 1 184 27 view .LVU158
 184:quantum/send_string.c ****         if (!ascii_code) break;
 649               		.loc 1 184 27 view .LVU159
 184:quantum/send_string.c ****         if (!ascii_code) break;
 650               		.loc 1 184 27 view .LVU160
 651 0014 F801      		movw r30,r16
 652               	/* #APP */
 653               	 ;  184 "quantum/send_string.c" 1
 654 0016 8491      		lpm r24, Z
 655               		
 656               	 ;  0 "" 2
 657               	.LVL74:
 184:quantum/send_string.c ****         if (!ascii_code) break;
 658               		.loc 1 184 27 view .LVU161
 184:quantum/send_string.c ****         if (!ascii_code) break;
 659               		.loc 1 184 27 is_stmt 0 view .LVU162
 660               	/* #NOAPP */
 661               	.LBE52:
 185:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 662               		.loc 1 185 9 is_stmt 1 view .LVU163
 185:quantum/send_string.c ****         if (ascii_code == SS_QMK_PREFIX) {
 663               		.loc 1 185 12 is_stmt 0 view .LVU164
 664 0018 8823      		tst r24
 665 001a 01F4      		brne .+2
 666 001c 00C0      		rjmp .L36
 186:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 667               		.loc 1 186 9 is_stmt 1 view .LVU165
 186:quantum/send_string.c ****             ascii_code = pgm_read_byte(++str);
 668               		.loc 1 186 12 is_stmt 0 view .LVU166
 669 001e 8130      		cpi r24,lo8(1)
 670 0020 01F0      		breq .+2
 671 0022 00C0      		rjmp .L38
 672 0024 E801      		movw r28,r16
 673 0026 2196      		adiw r28,1
 187:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 674               		.loc 1 187 13 is_stmt 1 view .LVU167
 675               	.LBB53:
 187:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 676               		.loc 1 187 26 view .LVU168
 677               	.LVL75:
 187:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 678               		.loc 1 187 26 view .LVU169
 187:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 679               		.loc 1 187 26 view .LVU170
 680 0028 FE01      		movw r30,r28
 681               	/* #APP */
 682               	 ;  187 "quantum/send_string.c" 1
 683 002a 8491      		lpm r24, Z
 684               		
 685               	 ;  0 "" 2
 686               	.LVL76:
 187:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 687               		.loc 1 187 26 view .LVU171
 187:quantum/send_string.c ****             if (ascii_code == SS_TAP_CODE) {
 688               		.loc 1 187 26 is_stmt 0 view .LVU172
 689               	/* #NOAPP */
 690               	.LBE53:
 188:quantum/send_string.c ****                 // tap
 691               		.loc 1 188 13 is_stmt 1 view .LVU173
 188:quantum/send_string.c ****                 // tap
 692               		.loc 1 188 16 is_stmt 0 view .LVU174
 693 002c 8130      		cpi r24,lo8(1)
 694 002e 01F4      		brne .L39
 695               	.LBB54:
 190:quantum/send_string.c ****                 tap_code(keycode);
 696               		.loc 1 190 17 is_stmt 1 view .LVU175
 697               	.LBB55:
 190:quantum/send_string.c ****                 tap_code(keycode);
 698               		.loc 1 190 35 view .LVU176
 699 0030 2196      		adiw r28,1
 700               	.LVL77:
 190:quantum/send_string.c ****                 tap_code(keycode);
 701               		.loc 1 190 35 view .LVU177
 190:quantum/send_string.c ****                 tap_code(keycode);
 702               		.loc 1 190 35 view .LVU178
 703 0032 FE01      		movw r30,r28
 704               	.LVL78:
 190:quantum/send_string.c ****                 tap_code(keycode);
 705               		.loc 1 190 35 is_stmt 0 view .LVU179
 706               	/* #APP */
 707               	 ;  190 "quantum/send_string.c" 1
 708 0034 8491      		lpm r24, Z
 709               		
 710               	 ;  0 "" 2
 711               	.LVL79:
 190:quantum/send_string.c ****                 tap_code(keycode);
 712               		.loc 1 190 35 is_stmt 1 view .LVU180
 190:quantum/send_string.c ****                 tap_code(keycode);
 713               		.loc 1 190 35 is_stmt 0 view .LVU181
 714               	/* #NOAPP */
 715               	.LBE55:
 191:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 716               		.loc 1 191 17 is_stmt 1 view .LVU182
 717 0036 0E94 0000 		call tap_code
 718               	.LVL80:
 719               	.L40:
 191:quantum/send_string.c ****             } else if (ascii_code == SS_DOWN_CODE) {
 720               		.loc 1 191 17 is_stmt 0 view .LVU183
 721               	.LBE54:
 214:quantum/send_string.c ****         // interval
 722               		.loc 1 214 9 is_stmt 1 view .LVU184
 723 003a 8E01      		movw r16,r28
 724               	.LVL81:
 214:quantum/send_string.c ****         // interval
 725               		.loc 1 214 9 is_stmt 0 view .LVU185
 726 003c 0F5F      		subi r16,-1
 727 003e 1F4F      		sbci r17,-1
 728               	.LVL82:
 729               	.LBB56:
 217:quantum/send_string.c ****             while (ms--) wait_ms(1);
 730               		.loc 1 217 13 is_stmt 1 view .LVU186
 218:quantum/send_string.c ****         }
 731               		.loc 1 218 13 view .LVU187
 217:quantum/send_string.c ****             while (ms--) wait_ms(1);
 732               		.loc 1 217 21 is_stmt 0 view .LVU188
 733 0040 8F2D      		mov r24,r15
 734               	.LVL83:
 735               	.L47:
 218:quantum/send_string.c ****         }
 736               		.loc 1 218 19 is_stmt 1 discriminator 1 view .LVU189
 218:quantum/send_string.c ****         }
 737               		.loc 1 218 22 is_stmt 0 discriminator 1 view .LVU190
 738               	.LVL84:
 739 0042 8150      		subi r24,1
 740 0044 00F0      		brcs .L49
 218:quantum/send_string.c ****         }
 741               		.loc 1 218 26 is_stmt 1 view .LVU191
 742               	.LBB57:
 743               	.LBI57:
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 744               		.loc 2 166 1 view .LVU192
 745               	.LBB58:
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 746               		.loc 2 168 2 view .LVU193
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 747               		.loc 2 172 2 view .LVU194
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 748               		.loc 2 173 2 view .LVU195
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 749               		.loc 2 174 2 view .LVU196
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 750               		.loc 2 184 3 view .LVU197
 751               		.loc 2 187 2 view .LVU198
 752 0046 EFE9      		ldi r30,lo8(3999)
 753 0048 FFE0      		ldi r31,hi8(3999)
 754 004a 3197      	1:	sbiw r30,1
 755 004c 01F4      		brne 1b
 756 004e 00C0      		rjmp .
 757 0050 0000      		nop
 758 0052 00C0      		rjmp .L47
 759               	.LVL85:
 760               	.L39:
 761               		.loc 2 187 2 is_stmt 0 view .LVU199
 762               	.LBE58:
 763               	.LBE57:
 764               	.LBE56:
 192:quantum/send_string.c ****                 // down
 765               		.loc 1 192 20 is_stmt 1 view .LVU200
 192:quantum/send_string.c ****                 // down
 766               		.loc 1 192 23 is_stmt 0 view .LVU201
 767 0054 8230      		cpi r24,lo8(2)
 768 0056 01F4      		brne .L41
 769               	.LBB59:
 194:quantum/send_string.c ****                 register_code(keycode);
 770               		.loc 1 194 17 is_stmt 1 view .LVU202
 771               	.LBB60:
 194:quantum/send_string.c ****                 register_code(keycode);
 772               		.loc 1 194 35 view .LVU203
 773 0058 E801      		movw r28,r16
 774               	.LVL86:
 194:quantum/send_string.c ****                 register_code(keycode);
 775               		.loc 1 194 35 is_stmt 0 view .LVU204
 776 005a 2296      		adiw r28,2
 777               	.LVL87:
 194:quantum/send_string.c ****                 register_code(keycode);
 778               		.loc 1 194 35 is_stmt 1 view .LVU205
 194:quantum/send_string.c ****                 register_code(keycode);
 779               		.loc 1 194 35 view .LVU206
 780 005c FE01      		movw r30,r28
 781               	.LVL88:
 194:quantum/send_string.c ****                 register_code(keycode);
 782               		.loc 1 194 35 is_stmt 0 view .LVU207
 783               	/* #APP */
 784               	 ;  194 "quantum/send_string.c" 1
 785 005e 8491      		lpm r24, Z
 786               		
 787               	 ;  0 "" 2
 788               	.LVL89:
 194:quantum/send_string.c ****                 register_code(keycode);
 789               		.loc 1 194 35 is_stmt 1 view .LVU208
 194:quantum/send_string.c ****                 register_code(keycode);
 790               		.loc 1 194 35 is_stmt 0 view .LVU209
 791               	/* #NOAPP */
 792               	.LBE60:
 195:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 793               		.loc 1 195 17 is_stmt 1 view .LVU210
 794 0060 0E94 0000 		call register_code
 795               	.LVL90:
 195:quantum/send_string.c ****             } else if (ascii_code == SS_UP_CODE) {
 796               		.loc 1 195 17 is_stmt 0 view .LVU211
 797               	.LBE59:
 798 0064 00C0      		rjmp .L40
 799               	.LVL91:
 800               	.L41:
 196:quantum/send_string.c ****                 // up
 801               		.loc 1 196 20 is_stmt 1 view .LVU212
 196:quantum/send_string.c ****                 // up
 802               		.loc 1 196 23 is_stmt 0 view .LVU213
 803 0066 8330      		cpi r24,lo8(3)
 804 0068 01F4      		brne .L42
 805               	.LBB61:
 198:quantum/send_string.c ****                 unregister_code(keycode);
 806               		.loc 1 198 17 is_stmt 1 view .LVU214
 807               	.LBB62:
 198:quantum/send_string.c ****                 unregister_code(keycode);
 808               		.loc 1 198 35 view .LVU215
 809 006a E801      		movw r28,r16
 810               	.LVL92:
 198:quantum/send_string.c ****                 unregister_code(keycode);
 811               		.loc 1 198 35 is_stmt 0 view .LVU216
 812 006c 2296      		adiw r28,2
 813               	.LVL93:
 198:quantum/send_string.c ****                 unregister_code(keycode);
 814               		.loc 1 198 35 is_stmt 1 view .LVU217
 198:quantum/send_string.c ****                 unregister_code(keycode);
 815               		.loc 1 198 35 view .LVU218
 816 006e FE01      		movw r30,r28
 817               	.LVL94:
 198:quantum/send_string.c ****                 unregister_code(keycode);
 818               		.loc 1 198 35 is_stmt 0 view .LVU219
 819               	/* #APP */
 820               	 ;  198 "quantum/send_string.c" 1
 821 0070 8491      		lpm r24, Z
 822               		
 823               	 ;  0 "" 2
 824               	.LVL95:
 198:quantum/send_string.c ****                 unregister_code(keycode);
 825               		.loc 1 198 35 is_stmt 1 view .LVU220
 198:quantum/send_string.c ****                 unregister_code(keycode);
 826               		.loc 1 198 35 is_stmt 0 view .LVU221
 827               	/* #NOAPP */
 828               	.LBE62:
 199:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 829               		.loc 1 199 17 is_stmt 1 view .LVU222
 830 0072 0E94 0000 		call unregister_code
 831               	.LVL96:
 199:quantum/send_string.c ****             } else if (ascii_code == SS_DELAY_CODE) {
 832               		.loc 1 199 17 is_stmt 0 view .LVU223
 833               	.LBE61:
 834 0076 00C0      		rjmp .L40
 835               	.LVL97:
 836               	.L42:
 200:quantum/send_string.c ****                 // delay
 837               		.loc 1 200 20 is_stmt 1 view .LVU224
 200:quantum/send_string.c ****                 // delay
 838               		.loc 1 200 23 is_stmt 0 view .LVU225
 839 0078 8430      		cpi r24,lo8(4)
 840 007a 01F4      		brne .L40
 841               	.LBB63:
 202:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 842               		.loc 1 202 17 is_stmt 1 view .LVU226
 843               	.LVL98:
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 844               		.loc 1 203 17 view .LVU227
 845               	.LBB48:
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 846               		.loc 1 203 35 view .LVU228
 847 007c E801      		movw r28,r16
 848               	.LVL99:
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 849               		.loc 1 203 35 is_stmt 0 view .LVU229
 850 007e 2296      		adiw r28,2
 851               	.LVL100:
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 852               		.loc 1 203 35 is_stmt 1 view .LVU230
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 853               		.loc 1 203 35 view .LVU231
 854 0080 FE01      		movw r30,r28
 855               	.LVL101:
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 856               		.loc 1 203 35 is_stmt 0 view .LVU232
 857               	/* #APP */
 858               	 ;  203 "quantum/send_string.c" 1
 859 0082 2491      		lpm r18, Z
 860               		
 861               	 ;  0 "" 2
 862               	.LVL102:
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 863               		.loc 1 203 35 is_stmt 1 view .LVU233
 203:quantum/send_string.c ****                 while (isdigit(keycode)) {
 864               		.loc 1 203 35 is_stmt 0 view .LVU234
 865               	/* #NOAPP */
 866               	.LBE48:
 204:quantum/send_string.c ****                     ms *= 10;
 867               		.loc 1 204 17 is_stmt 1 view .LVU235
 202:quantum/send_string.c ****                 uint8_t keycode = pgm_read_byte(++str);
 868               		.loc 1 202 25 is_stmt 0 view .LVU236
 869 0084 90E0      		ldi r25,0
 870 0086 80E0      		ldi r24,0
 871               	.LVL103:
 872               	.L43:
 204:quantum/send_string.c ****                     ms *= 10;
 873               		.loc 1 204 23 is_stmt 1 view .LVU237
 874 0088 FE01      		movw r30,r28
 875 008a 3196      		adiw r30,1
 204:quantum/send_string.c ****                     ms *= 10;
 876               		.loc 1 204 24 is_stmt 0 view .LVU238
 877 008c 2053      		subi r18,48
 878 008e 330B      		sbc r19,r19
 879               	.LVL104:
 204:quantum/send_string.c ****                     ms *= 10;
 880               		.loc 1 204 23 view .LVU239
 881 0090 2A30      		cpi r18,10
 882 0092 3105      		cpc r19,__zero_reg__
 883 0094 00F0      		brlo .L44
 884               	.L45:
 209:quantum/send_string.c ****             }
 885               		.loc 1 209 23 is_stmt 1 discriminator 1 view .LVU240
 209:quantum/send_string.c ****             }
 886               		.loc 1 209 26 is_stmt 0 discriminator 1 view .LVU241
 887               	.LVL105:
 888 0096 0197      		sbiw r24,1
 889 0098 00F0      		brcs .L40
 209:quantum/send_string.c ****             }
 890               		.loc 1 209 30 is_stmt 1 view .LVU242
 891               	.LBB49:
 892               	.LBI49:
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 893               		.loc 2 166 1 view .LVU243
 894               	.LBB50:
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 895               		.loc 2 168 2 view .LVU244
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 896               		.loc 2 172 2 view .LVU245
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 897               		.loc 2 173 2 view .LVU246
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 898               		.loc 2 174 2 view .LVU247
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 899               		.loc 2 184 3 view .LVU248
 900               		.loc 2 187 2 view .LVU249
 901 009a EFE9      		ldi r30,lo8(3999)
 902 009c FFE0      		ldi r31,hi8(3999)
 903 009e 3197      	1:	sbiw r30,1
 904 00a0 01F4      		brne 1b
 905 00a2 00C0      		rjmp .
 906 00a4 0000      		nop
 907 00a6 00C0      		rjmp .L45
 908               	.LVL106:
 909               	.L44:
 910               		.loc 2 187 2 is_stmt 0 view .LVU250
 911               	.LBE50:
 912               	.LBE49:
 205:quantum/send_string.c ****                     ms += keycode - '0';
 913               		.loc 1 205 21 is_stmt 1 view .LVU251
 205:quantum/send_string.c ****                     ms += keycode - '0';
 914               		.loc 1 205 24 is_stmt 0 view .LVU252
 915 00a8 E89E      		mul r14,r24
 916 00aa A001      		movw r20,r0
 917 00ac E99E      		mul r14,r25
 918 00ae 500D      		add r21,r0
 919 00b0 1124      		clr __zero_reg__
 920               	.LVL107:
 206:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 921               		.loc 1 206 21 is_stmt 1 view .LVU253
 206:quantum/send_string.c ****                     keycode = pgm_read_byte(++str);
 922               		.loc 1 206 24 is_stmt 0 view .LVU254
 923 00b2 C901      		movw r24,r18
 924 00b4 840F      		add r24,r20
 925 00b6 951F      		adc r25,r21
 926               	.LVL108:
 207:quantum/send_string.c ****                 }
 927               		.loc 1 207 21 is_stmt 1 view .LVU255
 928               	.LBB51:
 207:quantum/send_string.c ****                 }
 929               		.loc 1 207 31 view .LVU256
 207:quantum/send_string.c ****                 }
 930               		.loc 1 207 31 view .LVU257
 207:quantum/send_string.c ****                 }
 931               		.loc 1 207 31 view .LVU258
 932               	/* #APP */
 933               	 ;  207 "quantum/send_string.c" 1
 934 00b8 2491      		lpm r18, Z
 935               		
 936               	 ;  0 "" 2
 937               	.LVL109:
 207:quantum/send_string.c ****                 }
 938               		.loc 1 207 31 view .LVU259
 207:quantum/send_string.c ****                 }
 939               		.loc 1 207 31 is_stmt 0 view .LVU260
 940               	/* #NOAPP */
 941 00ba EF01      		movw r28,r30
 942 00bc 00C0      		rjmp .L43
 943               	.LVL110:
 944               	.L38:
 207:quantum/send_string.c ****                 }
 945               		.loc 1 207 31 view .LVU261
 946               	.LBE51:
 947               	.LBE63:
 212:quantum/send_string.c ****         }
 948               		.loc 1 212 13 is_stmt 1 view .LVU262
 949 00be 0E94 0000 		call send_char
 950               	.LVL111:
 212:quantum/send_string.c ****         }
 951               		.loc 1 212 13 is_stmt 0 view .LVU263
 952 00c2 E801      		movw r28,r16
 953 00c4 00C0      		rjmp .L40
 954               	.LVL112:
 955               	.L36:
 956               	/* epilogue start */
 212:quantum/send_string.c ****         }
 957               		.loc 1 212 13 view .LVU264
 958               	.LBE64:
 221:quantum/send_string.c **** 
 959               		.loc 1 221 1 view .LVU265
 960 00c6 DF91      		pop r29
 961 00c8 CF91      		pop r28
 962 00ca 1F91      		pop r17
 963 00cc 0F91      		pop r16
 964               	.LVL113:
 221:quantum/send_string.c **** 
 965               		.loc 1 221 1 view .LVU266
 966 00ce FF90      		pop r15
 967               	.LVL114:
 221:quantum/send_string.c **** 
 968               		.loc 1 221 1 view .LVU267
 969 00d0 EF90      		pop r14
 970 00d2 0895      		ret
 971               		.cfi_endproc
 972               	.LFE27:
 974               		.section	.text.send_string_P,"ax",@progbits
 975               	.global	send_string_P
 977               	send_string_P:
 978               	.LVL115:
 979               	.LFB25:
 139:quantum/send_string.c **** 
 980               		.loc 1 139 37 is_stmt 1 view -0
 981               		.cfi_startproc
 982               	/* prologue: function */
 983               	/* frame size = 0 */
 984               	/* stack size = 0 */
 985               	.L__stack_usage = 0
 139:quantum/send_string.c **** 
 986               		.loc 1 139 39 view .LVU269
 987 0000 60E0      		ldi r22,0
 988 0002 0C94 0000 		jmp send_string_with_delay_P
 989               	.LVL116:
 139:quantum/send_string.c **** 
 990               		.loc 1 139 39 is_stmt 0 view .LVU270
 991               		.cfi_endproc
 992               	.LFE25:
 994               		.section	.text.send_nibble,"ax",@progbits
 995               	.global	send_nibble
 997               	send_nibble:
 998               	.LVL117:
 999               	.LFB32:
 253:quantum/send_string.c **** 
 254:quantum/send_string.c **** void send_dword(uint32_t number) {
 255:quantum/send_string.c ****     send_word(number >> 16);
 256:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 257:quantum/send_string.c **** }
 258:quantum/send_string.c **** 
 259:quantum/send_string.c **** void send_word(uint16_t number) {
 260:quantum/send_string.c ****     send_byte(number >> 8);
 261:quantum/send_string.c ****     send_byte(number & 0xFF);
 262:quantum/send_string.c **** }
 263:quantum/send_string.c **** 
 264:quantum/send_string.c **** void send_byte(uint8_t number) {
 265:quantum/send_string.c ****     send_nibble(number >> 4);
 266:quantum/send_string.c ****     send_nibble(number & 0xF);
 267:quantum/send_string.c **** }
 268:quantum/send_string.c **** 
 269:quantum/send_string.c **** void send_nibble(uint8_t number) {
 1000               		.loc 1 269 34 is_stmt 1 view -0
 1001               		.cfi_startproc
 1002               	/* prologue: function */
 1003               	/* frame size = 0 */
 1004               	/* stack size = 0 */
 1005               	.L__stack_usage = 0
 270:quantum/send_string.c ****     switch (number & 0xF) {
 1006               		.loc 1 270 5 view .LVU272
 1007 0000 982F      		mov r25,r24
 1008 0002 9F70      		andi r25,lo8(15)
 1009 0004 9A50      		subi r25,lo8(-(-10))
 1010 0006 9630      		cpi r25,lo8(6)
 1011 0008 00F0      		brlo .L52
 271:quantum/send_string.c ****         case 0 ... 9:
 272:quantum/send_string.c ****             send_char(number + '0');
 1012               		.loc 1 272 13 view .LVU273
 1013 000a 805D      		subi r24,lo8(-(48))
 1014               	.LVL118:
 1015               	.L53:
 273:quantum/send_string.c ****             break;
 274:quantum/send_string.c ****         case 10 ... 15:
 275:quantum/send_string.c ****             send_char(number - 10 + 'a');
 1016               		.loc 1 275 13 is_stmt 0 view .LVU274
 1017 000c 0C94 0000 		jmp send_char
 1018               	.LVL119:
 1019               	.L52:
 1020               		.loc 1 275 13 is_stmt 1 view .LVU275
 1021 0010 895A      		subi r24,lo8(-(87))
 1022               	.LVL120:
 1023               		.loc 1 275 13 is_stmt 0 view .LVU276
 1024 0012 00C0      		rjmp .L53
 1025               		.cfi_endproc
 1026               	.LFE32:
 1028               		.section	.text.send_byte,"ax",@progbits
 1029               	.global	send_byte
 1031               	send_byte:
 1032               	.LVL121:
 1033               	.LFB31:
 264:quantum/send_string.c ****     send_nibble(number >> 4);
 1034               		.loc 1 264 32 is_stmt 1 view -0
 1035               		.cfi_startproc
 264:quantum/send_string.c ****     send_nibble(number >> 4);
 1036               		.loc 1 264 32 is_stmt 0 view .LVU278
 1037 0000 CF93      		push r28
 1038               	.LCFI19:
 1039               		.cfi_def_cfa_offset 3
 1040               		.cfi_offset 28, -2
 1041               	/* prologue: function */
 1042               	/* frame size = 0 */
 1043               	/* stack size = 1 */
 1044               	.L__stack_usage = 1
 1045 0002 C82F      		mov r28,r24
 265:quantum/send_string.c ****     send_nibble(number & 0xF);
 1046               		.loc 1 265 5 is_stmt 1 view .LVU279
 1047 0004 8295      		swap r24
 1048               	.LVL122:
 265:quantum/send_string.c ****     send_nibble(number & 0xF);
 1049               		.loc 1 265 5 is_stmt 0 view .LVU280
 1050 0006 8F70      		andi r24,lo8(15)
 1051 0008 0E94 0000 		call send_nibble
 1052               	.LVL123:
 266:quantum/send_string.c **** }
 1053               		.loc 1 266 5 is_stmt 1 view .LVU281
 1054 000c 8C2F      		mov r24,r28
 1055 000e 8F70      		andi r24,lo8(15)
 1056               	/* epilogue start */
 267:quantum/send_string.c **** 
 1057               		.loc 1 267 1 is_stmt 0 view .LVU282
 1058 0010 CF91      		pop r28
 1059               	.LVL124:
 266:quantum/send_string.c **** }
 1060               		.loc 1 266 5 view .LVU283
 1061 0012 0C94 0000 		jmp send_nibble
 1062               	.LVL125:
 1063               		.cfi_endproc
 1064               	.LFE31:
 1066               		.section	.text.send_word,"ax",@progbits
 1067               	.global	send_word
 1069               	send_word:
 1070               	.LVL126:
 1071               	.LFB30:
 259:quantum/send_string.c ****     send_byte(number >> 8);
 1072               		.loc 1 259 33 is_stmt 1 view -0
 1073               		.cfi_startproc
 259:quantum/send_string.c ****     send_byte(number >> 8);
 1074               		.loc 1 259 33 is_stmt 0 view .LVU285
 1075 0000 CF93      		push r28
 1076               	.LCFI20:
 1077               		.cfi_def_cfa_offset 3
 1078               		.cfi_offset 28, -2
 1079               	/* prologue: function */
 1080               	/* frame size = 0 */
 1081               	/* stack size = 1 */
 1082               	.L__stack_usage = 1
 1083 0002 C82F      		mov r28,r24
 260:quantum/send_string.c ****     send_byte(number & 0xFF);
 1084               		.loc 1 260 5 is_stmt 1 view .LVU286
 1085 0004 892F      		mov r24,r25
 1086               	.LVL127:
 260:quantum/send_string.c ****     send_byte(number & 0xFF);
 1087               		.loc 1 260 5 is_stmt 0 view .LVU287
 1088 0006 0E94 0000 		call send_byte
 1089               	.LVL128:
 261:quantum/send_string.c **** }
 1090               		.loc 1 261 5 is_stmt 1 view .LVU288
 1091 000a 8C2F      		mov r24,r28
 1092               	/* epilogue start */
 262:quantum/send_string.c **** 
 1093               		.loc 1 262 1 is_stmt 0 view .LVU289
 1094 000c CF91      		pop r28
 261:quantum/send_string.c **** }
 1095               		.loc 1 261 5 view .LVU290
 1096 000e 0C94 0000 		jmp send_byte
 1097               	.LVL129:
 1098               		.cfi_endproc
 1099               	.LFE30:
 1101               		.section	.text.send_dword,"ax",@progbits
 1102               	.global	send_dword
 1104               	send_dword:
 1105               	.LVL130:
 1106               	.LFB29:
 254:quantum/send_string.c ****     send_word(number >> 16);
 1107               		.loc 1 254 34 is_stmt 1 view -0
 1108               		.cfi_startproc
 254:quantum/send_string.c ****     send_word(number >> 16);
 1109               		.loc 1 254 34 is_stmt 0 view .LVU292
 1110 0000 CF92      		push r12
 1111               	.LCFI21:
 1112               		.cfi_def_cfa_offset 3
 1113               		.cfi_offset 12, -2
 1114 0002 DF92      		push r13
 1115               	.LCFI22:
 1116               		.cfi_def_cfa_offset 4
 1117               		.cfi_offset 13, -3
 1118 0004 EF92      		push r14
 1119               	.LCFI23:
 1120               		.cfi_def_cfa_offset 5
 1121               		.cfi_offset 14, -4
 1122 0006 FF92      		push r15
 1123               	.LCFI24:
 1124               		.cfi_def_cfa_offset 6
 1125               		.cfi_offset 15, -5
 1126               	/* prologue: function */
 1127               	/* frame size = 0 */
 1128               	/* stack size = 4 */
 1129               	.L__stack_usage = 4
 1130 0008 6B01      		movw r12,r22
 255:quantum/send_string.c ****     send_word(number & 0xFFFFUL);
 1131               		.loc 1 255 5 is_stmt 1 view .LVU293
 1132 000a 0E94 0000 		call send_word
 1133               	.LVL131:
 256:quantum/send_string.c **** }
 1134               		.loc 1 256 5 view .LVU294
 1135 000e C601      		movw r24,r12
 1136               	/* epilogue start */
 257:quantum/send_string.c **** 
 1137               		.loc 1 257 1 is_stmt 0 view .LVU295
 1138 0010 FF90      		pop r15
 1139 0012 EF90      		pop r14
 1140 0014 DF90      		pop r13
 1141 0016 CF90      		pop r12
 256:quantum/send_string.c **** }
 1142               		.loc 1 256 5 view .LVU296
 1143 0018 0C94 0000 		jmp send_word
 1144               	.LVL132:
 1145               		.cfi_endproc
 1146               	.LFE29:
 1148               		.section	.text.tap_random_base64,"ax",@progbits
 1149               	.global	tap_random_base64
 1151               	tap_random_base64:
 1152               	.LFB33:
 276:quantum/send_string.c ****             break;
 277:quantum/send_string.c ****     }
 278:quantum/send_string.c **** }
 279:quantum/send_string.c **** 
 280:quantum/send_string.c **** void tap_random_base64(void) {
 1153               		.loc 1 280 30 is_stmt 1 view -0
 1154               		.cfi_startproc
 1155               	/* prologue: function */
 1156               	/* frame size = 0 */
 1157               	/* stack size = 0 */
 1158               	.L__stack_usage = 0
 281:quantum/send_string.c **** #if defined(__AVR_ATmega32U4__)
 282:quantum/send_string.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1159               		.loc 1 282 5 view .LVU298
 1160               		.loc 1 282 20 is_stmt 0 view .LVU299
 1161 0000 96B5      		in r25,0x26
 1162               		.loc 1 282 28 view .LVU300
 1163 0002 2091 8400 		lds r18,132
 1164 0006 3091 8500 		lds r19,132+1
 1165               		.loc 1 282 36 view .LVU301
 1166 000a 6091 9400 		lds r22,148
 1167 000e 7091 9500 		lds r23,148+1
 1168               		.loc 1 282 44 view .LVU302
 1169 0012 4091 BE00 		lds r20,190
 1170 0016 5091 BF00 		lds r21,190+1
 1171               		.loc 1 282 34 view .LVU303
 1172 001a 822F      		mov r24,r18
 1173 001c 860F      		add r24,r22
 1174 001e 890F      		add r24,r25
 1175               		.loc 1 282 42 view .LVU304
 1176 0020 840F      		add r24,r20
 1177               		.loc 1 282 13 view .LVU305
 1178 0022 8F73      		andi r24,lo8(63)
 1179               	.LVL133:
 283:quantum/send_string.c **** #else
 284:quantum/send_string.c ****     uint8_t key = rand() % 64;
 285:quantum/send_string.c **** #endif
 286:quantum/send_string.c ****     switch (key) {
 1180               		.loc 1 286 5 is_stmt 1 view .LVU306
 1181 0024 8E33      		cpi r24,lo8(62)
 1182 0026 00F4      		brsh .L58
 1183 0028 8533      		cpi r24,lo8(53)
 1184 002a 00F4      		brsh .L59
 1185 002c 8A31      		cpi r24,lo8(26)
 1186 002e 00F0      		brlo .L60
 1187 0030 8433      		cpi r24,lo8(52)
 1188 0032 00F4      		brsh .L65
 287:quantum/send_string.c ****         case 0 ... 25:
 288:quantum/send_string.c ****             send_char(key + 'A');
 289:quantum/send_string.c ****             break;
 290:quantum/send_string.c ****         case 26 ... 51:
 291:quantum/send_string.c ****             send_char(key - 26 + 'a');
 1189               		.loc 1 291 13 view .LVU307
 1190 0034 895B      		subi r24,lo8(-(71))
 1191               	.LVL134:
 1192               		.loc 1 291 13 is_stmt 0 view .LVU308
 1193 0036 00C0      		rjmp .L66
 1194               	.LVL135:
 1195               	.L58:
 286:quantum/send_string.c ****         case 0 ... 25:
 1196               		.loc 1 286 5 view .LVU309
 1197 0038 8E33      		cpi r24,lo8(62)
 1198 003a 01F0      		breq .L63
 1199 003c 8F33      		cpi r24,lo8(63)
 1200 003e 01F0      		breq .L64
 1201               	.L60:
 288:quantum/send_string.c ****             break;
 1202               		.loc 1 288 13 is_stmt 1 view .LVU310
 1203 0040 8F5B      		subi r24,lo8(-(65))
 1204               	.LVL136:
 1205               	.L66:
 292:quantum/send_string.c ****             break;
 293:quantum/send_string.c ****         case 52:
 294:quantum/send_string.c ****             send_char('0');
 295:quantum/send_string.c ****             break;
 296:quantum/send_string.c ****         case 53 ... 61:
 297:quantum/send_string.c ****             send_char(key - 53 + '1');
 298:quantum/send_string.c ****             break;
 299:quantum/send_string.c ****         case 62:
 300:quantum/send_string.c ****             send_char('+');
 301:quantum/send_string.c ****             break;
 302:quantum/send_string.c ****         case 63:
 303:quantum/send_string.c ****             send_char('/');
 1206               		.loc 1 303 13 is_stmt 0 view .LVU311
 1207 0042 0C94 0000 		jmp send_char
 1208               	.LVL137:
 1209               	.L65:
 294:quantum/send_string.c ****             break;
 1210               		.loc 1 294 13 is_stmt 1 view .LVU312
 1211 0046 80E3      		ldi r24,lo8(48)
 1212               	.LVL138:
 294:quantum/send_string.c ****             break;
 1213               		.loc 1 294 13 is_stmt 0 view .LVU313
 1214 0048 00C0      		rjmp .L66
 1215               	.LVL139:
 1216               	.L59:
 297:quantum/send_string.c ****             break;
 1217               		.loc 1 297 13 is_stmt 1 view .LVU314
 1218 004a 8450      		subi r24,lo8(-(-4))
 1219               	.LVL140:
 297:quantum/send_string.c ****             break;
 1220               		.loc 1 297 13 is_stmt 0 view .LVU315
 1221 004c 00C0      		rjmp .L66
 1222               	.LVL141:
 1223               	.L63:
 300:quantum/send_string.c ****             break;
 1224               		.loc 1 300 13 is_stmt 1 view .LVU316
 1225 004e 8BE2      		ldi r24,lo8(43)
 1226               	.LVL142:
 300:quantum/send_string.c ****             break;
 1227               		.loc 1 300 13 is_stmt 0 view .LVU317
 1228 0050 00C0      		rjmp .L66
 1229               	.LVL143:
 1230               	.L64:
 1231               		.loc 1 303 13 is_stmt 1 view .LVU318
 1232 0052 8FE2      		ldi r24,lo8(47)
 1233               	.LVL144:
 1234               		.loc 1 303 13 is_stmt 0 view .LVU319
 1235 0054 00C0      		rjmp .L66
 1236               		.cfi_endproc
 1237               	.LFE33:
 1239               		.weak	ascii_to_keycode_lut
 1240               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 1243               	ascii_to_keycode_lut:
 1244 0000 00        		.byte	0
 1245 0001 00        		.byte	0
 1246 0002 00        		.byte	0
 1247 0003 00        		.byte	0
 1248 0004 00        		.byte	0
 1249 0005 00        		.byte	0
 1250 0006 00        		.byte	0
 1251 0007 00        		.byte	0
 1252 0008 2A        		.byte	42
 1253 0009 2B        		.byte	43
 1254 000a 28        		.byte	40
 1255 000b 00        		.byte	0
 1256 000c 00        		.byte	0
 1257 000d 00        		.byte	0
 1258 000e 00        		.byte	0
 1259 000f 00        		.byte	0
 1260 0010 00        		.byte	0
 1261 0011 00        		.byte	0
 1262 0012 00        		.byte	0
 1263 0013 00        		.byte	0
 1264 0014 00        		.byte	0
 1265 0015 00        		.byte	0
 1266 0016 00        		.byte	0
 1267 0017 00        		.byte	0
 1268 0018 00        		.byte	0
 1269 0019 00        		.byte	0
 1270 001a 00        		.byte	0
 1271 001b 29        		.byte	41
 1272 001c 00        		.byte	0
 1273 001d 00        		.byte	0
 1274 001e 00        		.byte	0
 1275 001f 00        		.byte	0
 1276 0020 2C        		.byte	44
 1277 0021 1E        		.byte	30
 1278 0022 34        		.byte	52
 1279 0023 20        		.byte	32
 1280 0024 21        		.byte	33
 1281 0025 22        		.byte	34
 1282 0026 24        		.byte	36
 1283 0027 34        		.byte	52
 1284 0028 26        		.byte	38
 1285 0029 27        		.byte	39
 1286 002a 25        		.byte	37
 1287 002b 2E        		.byte	46
 1288 002c 36        		.byte	54
 1289 002d 2D        		.byte	45
 1290 002e 37        		.byte	55
 1291 002f 38        		.byte	56
 1292 0030 27        		.byte	39
 1293 0031 1E        		.byte	30
 1294 0032 1F        		.byte	31
 1295 0033 20        		.byte	32
 1296 0034 21        		.byte	33
 1297 0035 22        		.byte	34
 1298 0036 23        		.byte	35
 1299 0037 24        		.byte	36
 1300 0038 25        		.byte	37
 1301 0039 26        		.byte	38
 1302 003a 33        		.byte	51
 1303 003b 33        		.byte	51
 1304 003c 36        		.byte	54
 1305 003d 2E        		.byte	46
 1306 003e 37        		.byte	55
 1307 003f 38        		.byte	56
 1308 0040 1F        		.byte	31
 1309 0041 04        		.byte	4
 1310 0042 05        		.byte	5
 1311 0043 06        		.byte	6
 1312 0044 07        		.byte	7
 1313 0045 08        		.byte	8
 1314 0046 09        		.byte	9
 1315 0047 0A        		.byte	10
 1316 0048 0B        		.byte	11
 1317 0049 0C        		.byte	12
 1318 004a 0D        		.byte	13
 1319 004b 0E        		.byte	14
 1320 004c 0F        		.byte	15
 1321 004d 10        		.byte	16
 1322 004e 11        		.byte	17
 1323 004f 12        		.byte	18
 1324 0050 13        		.byte	19
 1325 0051 14        		.byte	20
 1326 0052 15        		.byte	21
 1327 0053 16        		.byte	22
 1328 0054 17        		.byte	23
 1329 0055 18        		.byte	24
 1330 0056 19        		.byte	25
 1331 0057 1A        		.byte	26
 1332 0058 1B        		.byte	27
 1333 0059 1C        		.byte	28
 1334 005a 1D        		.byte	29
 1335 005b 2F        		.byte	47
 1336 005c 31        		.byte	49
 1337 005d 30        		.byte	48
 1338 005e 23        		.byte	35
 1339 005f 2D        		.byte	45
 1340 0060 35        		.byte	53
 1341 0061 04        		.byte	4
 1342 0062 05        		.byte	5
 1343 0063 06        		.byte	6
 1344 0064 07        		.byte	7
 1345 0065 08        		.byte	8
 1346 0066 09        		.byte	9
 1347 0067 0A        		.byte	10
 1348 0068 0B        		.byte	11
 1349 0069 0C        		.byte	12
 1350 006a 0D        		.byte	13
 1351 006b 0E        		.byte	14
 1352 006c 0F        		.byte	15
 1353 006d 10        		.byte	16
 1354 006e 11        		.byte	17
 1355 006f 12        		.byte	18
 1356 0070 13        		.byte	19
 1357 0071 14        		.byte	20
 1358 0072 15        		.byte	21
 1359 0073 16        		.byte	22
 1360 0074 17        		.byte	23
 1361 0075 18        		.byte	24
 1362 0076 19        		.byte	25
 1363 0077 1A        		.byte	26
 1364 0078 1B        		.byte	27
 1365 0079 1C        		.byte	28
 1366 007a 1D        		.byte	29
 1367 007b 2F        		.byte	47
 1368 007c 31        		.byte	49
 1369 007d 30        		.byte	48
 1370 007e 35        		.byte	53
 1371 007f 4C        		.byte	76
 1372               		.weak	ascii_to_dead_lut
 1373               		.section	.progmem.data.ascii_to_dead_lut,"a"
 1376               	ascii_to_dead_lut:
 1377 0000 0000 0000 		.zero	16
 1377      0000 0000 
 1377      0000 0000 
 1377      0000 0000 
 1378               		.weak	ascii_to_altgr_lut
 1379               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 1382               	ascii_to_altgr_lut:
 1383 0000 0000 0000 		.zero	16
 1383      0000 0000 
 1383      0000 0000 
 1383      0000 0000 
 1384               		.weak	ascii_to_shift_lut
 1385               		.section	.progmem.data.ascii_to_shift_lut,"a"
 1388               	ascii_to_shift_lut:
 1389 0000 00        		.byte	0
 1390 0001 00        		.byte	0
 1391 0002 00        		.byte	0
 1392 0003 00        		.byte	0
 1393 0004 7E        		.byte	126
 1394 0005 0F        		.byte	15
 1395 0006 00        		.byte	0
 1396 0007 D4        		.byte	-44
 1397 0008 FF        		.byte	-1
 1398 0009 FF        		.byte	-1
 1399 000a FF        		.byte	-1
 1400 000b C7        		.byte	-57
 1401 000c 00        		.byte	0
 1402 000d 00        		.byte	0
 1403 000e 00        		.byte	0
 1404 000f 78        		.byte	120
 1405               		.text
 1406               	.Letext0:
 1407               		.file 3 "c:\\qmk_msys\\mingw64\\avr\\include\\stdint.h"
 1408               		.file 4 "c:\\qmk_msys\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 1409               		.file 5 "tmk_core/common/report.h"
 1410               		.file 6 "tmk_core/common/action.h"
 1411               		.file 7 "tmk_core/common/host.h"
 1412               		.file 8 "tmk_core/common/debug.h"
 1413               		.file 9 "quantum/keycode_config.h"
 1414               		.file 10 "tmk_core/common/timer.h"
 1415               		.file 11 "quantum/sequencer/sequencer.h"
 1416               		.file 12 "tmk_core/common/keycode.h"
 1417               		.file 13 "quantum/keymap.h"
 1418               		.file 14 "quantum/color.h"
 1419               		.file 15 "quantum/rgb_matrix_types.h"
 1420               		.file 16 "quantum/rgb_matrix.h"
 1421               		.file 17 "tmk_core/common/action_layer.h"
 1422               		.file 18 "tmk_core/common/action_util.h"
 1423               		.file 19 "quantum/send_string.h"
 1424               		.file 20 "c:\\qmk_msys\\mingw64\\avr\\include\\stdlib.h"
 1425               		.file 21 "quantum/process_keycode/process_tap_dance.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 send_string.c
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:4      *ABS*:000000000000003f __SREG__
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:13     .text.send_char:0000000000000000 send_char
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1243   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1388   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1382   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1376   .progmem.data.ascii_to_dead_lut:0000000000000000 ascii_to_dead_lut
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:276    .text.send_string_with_delay:0000000000000000 send_string_with_delay
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:578    .text.send_string:0000000000000000 send_string
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:598    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:977    .text.send_string_P:0000000000000000 send_string_P
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:997    .text.send_nibble:0000000000000000 send_nibble
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1031   .text.send_byte:0000000000000000 send_byte
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1069   .text.send_word:0000000000000000 send_word
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1104   .text.send_dword:0000000000000000 send_dword
C:\Users\xue\AppData\Local\Temp\ccbAwAYb.s:1151   .text.tap_random_base64:0000000000000000 tap_random_base64

UNDEFINED SYMBOLS
register_code
tap_code
unregister_code
