   1               		.file	"rgb_matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scale16by8,"ax",@progbits
  12               	scale16by8:
  13               	.LVL0:
  14               	.LFB29:
  15               		.file 1 "./lib/lib8tion/scale8.h"
   1:./lib/lib8tion/scale8.h **** #ifndef __INC_LIB8TION_SCALE_H
   2:./lib/lib8tion/scale8.h **** #define __INC_LIB8TION_SCALE_H
   3:./lib/lib8tion/scale8.h **** 
   4:./lib/lib8tion/scale8.h **** ///@ingroup lib8tion
   5:./lib/lib8tion/scale8.h **** 
   6:./lib/lib8tion/scale8.h **** ///@defgroup Scaling Scaling functions
   7:./lib/lib8tion/scale8.h **** /// Fast, efficient 8-bit scaling functions specifically
   8:./lib/lib8tion/scale8.h **** /// designed for high-performance LED programming.
   9:./lib/lib8tion/scale8.h **** ///
  10:./lib/lib8tion/scale8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  11:./lib/lib8tion/scale8.h **** /// implementations provided, using these functions often
  12:./lib/lib8tion/scale8.h **** /// results in smaller and faster code than the equivalent
  13:./lib/lib8tion/scale8.h **** /// program using plain "C" arithmetic and logic.
  14:./lib/lib8tion/scale8.h **** ///@{
  15:./lib/lib8tion/scale8.h **** 
  16:./lib/lib8tion/scale8.h **** ///  scale one byte by a second one, which is treated as
  17:./lib/lib8tion/scale8.h **** ///  the numerator of a fraction whose denominator is 256
  18:./lib/lib8tion/scale8.h **** ///  In other words, it computes i * (scale / 256)
  19:./lib/lib8tion/scale8.h **** ///  4 clocks AVR with MUL, 2 clocks ARM
  20:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
  21:./lib/lib8tion/scale8.h **** {
  22:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1
  23:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  24:./lib/lib8tion/scale8.h ****     return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
  25:./lib/lib8tion/scale8.h **** #else
  26:./lib/lib8tion/scale8.h ****     return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
  27:./lib/lib8tion/scale8.h **** #endif
  28:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
  29:./lib/lib8tion/scale8.h **** #if defined(LIB8_ATTINY)
  30:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  31:./lib/lib8tion/scale8.h ****     uint8_t work=i;
  32:./lib/lib8tion/scale8.h **** #else
  33:./lib/lib8tion/scale8.h ****     uint8_t work=0;
  34:./lib/lib8tion/scale8.h **** #endif
  35:./lib/lib8tion/scale8.h ****     uint8_t cnt=0x80;
  36:./lib/lib8tion/scale8.h ****     asm volatile(
  37:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  38:./lib/lib8tion/scale8.h ****         "  inc %[scale]                 \n\t"
  39:./lib/lib8tion/scale8.h ****         "  breq DONE_%=                 \n\t"
  40:./lib/lib8tion/scale8.h ****         "  clr %[work]                  \n\t"
  41:./lib/lib8tion/scale8.h **** #endif
  42:./lib/lib8tion/scale8.h ****         "LOOP_%=:                       \n\t"
  43:./lib/lib8tion/scale8.h ****         /*"  sbrc %[scale], 0             \n\t"
  44:./lib/lib8tion/scale8.h ****         "  add %[work], %[i]            \n\t"
  45:./lib/lib8tion/scale8.h ****         "  ror %[work]                  \n\t"
  46:./lib/lib8tion/scale8.h ****         "  lsr %[scale]                 \n\t"
  47:./lib/lib8tion/scale8.h ****         "  clc                          \n\t"*/
  48:./lib/lib8tion/scale8.h ****         "  sbrc %[scale], 0             \n\t"
  49:./lib/lib8tion/scale8.h ****         "  add %[work], %[i]            \n\t"
  50:./lib/lib8tion/scale8.h ****         "  ror %[work]                  \n\t"
  51:./lib/lib8tion/scale8.h ****         "  lsr %[scale]                 \n\t"
  52:./lib/lib8tion/scale8.h ****         "  lsr %[cnt]                   \n\t"
  53:./lib/lib8tion/scale8.h ****         "brcc LOOP_%=                   \n\t"
  54:./lib/lib8tion/scale8.h ****         "DONE_%=:                       \n\t"
  55:./lib/lib8tion/scale8.h ****         : [work] "+r" (work), [cnt] "+r" (cnt)
  56:./lib/lib8tion/scale8.h ****         : [scale] "r" (scale), [i] "r" (i)
  57:./lib/lib8tion/scale8.h ****         :
  58:./lib/lib8tion/scale8.h ****       );
  59:./lib/lib8tion/scale8.h ****     return work;
  60:./lib/lib8tion/scale8.h **** #else
  61:./lib/lib8tion/scale8.h ****     asm volatile(
  62:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED==1)
  63:./lib/lib8tion/scale8.h ****         // Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0
  64:./lib/lib8tion/scale8.h ****         "mul %0, %1          \n\t"
  65:./lib/lib8tion/scale8.h ****         // Add i to r0, possibly setting the carry flag
  66:./lib/lib8tion/scale8.h ****         "add r0, %0         \n\t"
  67:./lib/lib8tion/scale8.h ****         // load the immediate 0 into i (note, this does _not_ touch any flags)
  68:./lib/lib8tion/scale8.h ****         "ldi %0, 0x00       \n\t"
  69:./lib/lib8tion/scale8.h ****         // walk and chew gum at the same time
  70:./lib/lib8tion/scale8.h ****         "adc %0, r1          \n\t"
  71:./lib/lib8tion/scale8.h **** #else
  72:./lib/lib8tion/scale8.h ****          /* Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0 */
  73:./lib/lib8tion/scale8.h ****          "mul %0, %1          \n\t"
  74:./lib/lib8tion/scale8.h ****          /* Move the high 8-bits of the product (r1) back to i */
  75:./lib/lib8tion/scale8.h ****          "mov %0, r1          \n\t"
  76:./lib/lib8tion/scale8.h ****          /* Restore r1 to "0"; it's expected to always be that */
  77:./lib/lib8tion/scale8.h **** #endif
  78:./lib/lib8tion/scale8.h ****          "clr __zero_reg__    \n\t"
  79:./lib/lib8tion/scale8.h **** 
  80:./lib/lib8tion/scale8.h ****          : "+a" (i)      /* writes to i */
  81:./lib/lib8tion/scale8.h ****          : "a"  (scale)  /* uses scale */
  82:./lib/lib8tion/scale8.h ****          : "r0", "r1"    /* clobbers r0, r1 */ );
  83:./lib/lib8tion/scale8.h **** 
  84:./lib/lib8tion/scale8.h ****     /* Return the result */
  85:./lib/lib8tion/scale8.h ****     return i;
  86:./lib/lib8tion/scale8.h **** #endif
  87:./lib/lib8tion/scale8.h **** #else
  88:./lib/lib8tion/scale8.h **** #error "No implementation for scale8 available."
  89:./lib/lib8tion/scale8.h **** #endif
  90:./lib/lib8tion/scale8.h **** }
  91:./lib/lib8tion/scale8.h **** 
  92:./lib/lib8tion/scale8.h **** 
  93:./lib/lib8tion/scale8.h **** ///  The "video" version of scale8 guarantees that the output will
  94:./lib/lib8tion/scale8.h **** ///  be only be zero if one or both of the inputs are zero.  If both
  95:./lib/lib8tion/scale8.h **** ///  inputs are non-zero, the output is guaranteed to be non-zero.
  96:./lib/lib8tion/scale8.h **** ///  This makes for better 'video'/LED dimming, at the cost of
  97:./lib/lib8tion/scale8.h **** ///  several additional cycles.
  98:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
  99:./lib/lib8tion/scale8.h **** {
 100:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1 || defined(LIB8_ATTINY)
 101:./lib/lib8tion/scale8.h ****     uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
 102:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 103:./lib/lib8tion/scale8.h ****     // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
 104:./lib/lib8tion/scale8.h ****     return j;
 105:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 106:./lib/lib8tion/scale8.h ****     uint8_t j=0;
 107:./lib/lib8tion/scale8.h ****     asm volatile(
 108:./lib/lib8tion/scale8.h ****         "  tst %[i]\n\t"
 109:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 110:./lib/lib8tion/scale8.h ****         "  mul %[i], %[scale]\n\t"
 111:./lib/lib8tion/scale8.h ****         "  mov %[j], r1\n\t"
 112:./lib/lib8tion/scale8.h ****         "  clr __zero_reg__\n\t"
 113:./lib/lib8tion/scale8.h ****         "  cpse %[scale], r1\n\t"
 114:./lib/lib8tion/scale8.h ****         "  subi %[j], 0xFF\n\t"
 115:./lib/lib8tion/scale8.h ****         "L_%=: \n\t"
 116:./lib/lib8tion/scale8.h ****         : [j] "+a" (j)
 117:./lib/lib8tion/scale8.h ****         : [i] "a" (i), [scale] "a" (scale)
 118:./lib/lib8tion/scale8.h ****         : "r0", "r1");
 119:./lib/lib8tion/scale8.h **** 
 120:./lib/lib8tion/scale8.h ****     return j;
 121:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 122:./lib/lib8tion/scale8.h ****     // asm volatile(
 123:./lib/lib8tion/scale8.h ****     //      "      tst %0           \n"
 124:./lib/lib8tion/scale8.h ****     //      "      breq L_%=        \n"
 125:./lib/lib8tion/scale8.h ****     //      "      mul %0, %1       \n"
 126:./lib/lib8tion/scale8.h ****     //      "      mov %0, r1       \n"
 127:./lib/lib8tion/scale8.h ****     //      "      add %0, %2       \n"
 128:./lib/lib8tion/scale8.h ****     //      "      clr __zero_reg__ \n"
 129:./lib/lib8tion/scale8.h ****     //      "L_%=:                  \n"
 130:./lib/lib8tion/scale8.h **** 
 131:./lib/lib8tion/scale8.h ****     //      : "+a" (i)
 132:./lib/lib8tion/scale8.h ****     //      : "a" (scale), "a" (nonzeroscale)
 133:./lib/lib8tion/scale8.h ****     //      : "r0", "r1");
 134:./lib/lib8tion/scale8.h **** 
 135:./lib/lib8tion/scale8.h ****     // // Return the result
 136:./lib/lib8tion/scale8.h ****     // return i;
 137:./lib/lib8tion/scale8.h **** #else
 138:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_video available."
 139:./lib/lib8tion/scale8.h **** #endif
 140:./lib/lib8tion/scale8.h **** }
 141:./lib/lib8tion/scale8.h **** 
 142:./lib/lib8tion/scale8.h **** 
 143:./lib/lib8tion/scale8.h **** /// This version of scale8 does not clean up the R1 register on AVR
 144:./lib/lib8tion/scale8.h **** /// If you are doing several 'scale8's in a row, use this, and
 145:./lib/lib8tion/scale8.h **** /// then explicitly call cleanup_R1.
 146:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
 147:./lib/lib8tion/scale8.h **** {
 148:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1
 149:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
 150:./lib/lib8tion/scale8.h ****     return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
 151:./lib/lib8tion/scale8.h **** #else
 152:./lib/lib8tion/scale8.h ****     return ((int)i * (int)(scale) ) >> 8;
 153:./lib/lib8tion/scale8.h **** #endif
 154:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 155:./lib/lib8tion/scale8.h ****     asm volatile(
 156:./lib/lib8tion/scale8.h ****       #if (FASTLED_SCALE8_FIXED==1)
 157:./lib/lib8tion/scale8.h ****               // Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0
 158:./lib/lib8tion/scale8.h ****               "mul %0, %1          \n\t"
 159:./lib/lib8tion/scale8.h ****               // Add i to r0, possibly setting the carry flag
 160:./lib/lib8tion/scale8.h ****               "add r0, %0         \n\t"
 161:./lib/lib8tion/scale8.h ****               // load the immediate 0 into i (note, this does _not_ touch any flags)
 162:./lib/lib8tion/scale8.h ****               "ldi %0, 0x00       \n\t"
 163:./lib/lib8tion/scale8.h ****               // walk and chew gum at the same time
 164:./lib/lib8tion/scale8.h ****               "adc %0, r1          \n\t"
 165:./lib/lib8tion/scale8.h ****       #else
 166:./lib/lib8tion/scale8.h ****          /* Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0 */
 167:./lib/lib8tion/scale8.h ****          "mul %0, %1    \n\t"
 168:./lib/lib8tion/scale8.h ****          /* Move the high 8-bits of the product (r1) back to i */
 169:./lib/lib8tion/scale8.h ****          "mov %0, r1    \n\t"
 170:./lib/lib8tion/scale8.h ****       #endif
 171:./lib/lib8tion/scale8.h ****          /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
 172:./lib/lib8tion/scale8.h ****          /* "clr __zero_reg__    \n\t" */
 173:./lib/lib8tion/scale8.h **** 
 174:./lib/lib8tion/scale8.h ****          : "+a" (i)      /* writes to i */
 175:./lib/lib8tion/scale8.h ****          : "a"  (scale)  /* uses scale */
 176:./lib/lib8tion/scale8.h ****          : "r0", "r1"    /* clobbers r0, r1 */ );
 177:./lib/lib8tion/scale8.h **** 
 178:./lib/lib8tion/scale8.h ****     // Return the result
 179:./lib/lib8tion/scale8.h ****     return i;
 180:./lib/lib8tion/scale8.h **** #else
 181:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_LEAVING_R1_DIRTY available."
 182:./lib/lib8tion/scale8.h **** #endif
 183:./lib/lib8tion/scale8.h **** }
 184:./lib/lib8tion/scale8.h **** 
 185:./lib/lib8tion/scale8.h **** 
 186:./lib/lib8tion/scale8.h **** /// This version of scale8_video does not clean up the R1 register on AVR
 187:./lib/lib8tion/scale8.h **** /// If you are doing several 'scale8_video's in a row, use this, and
 188:./lib/lib8tion/scale8.h **** /// then explicitly call cleanup_R1.
 189:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
 190:./lib/lib8tion/scale8.h **** {
 191:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1 || defined(LIB8_ATTINY)
 192:./lib/lib8tion/scale8.h ****     uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
 193:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 194:./lib/lib8tion/scale8.h ****     // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
 195:./lib/lib8tion/scale8.h ****     return j;
 196:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 197:./lib/lib8tion/scale8.h ****     uint8_t j=0;
 198:./lib/lib8tion/scale8.h ****     asm volatile(
 199:./lib/lib8tion/scale8.h ****         "  tst %[i]\n\t"
 200:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 201:./lib/lib8tion/scale8.h ****         "  mul %[i], %[scale]\n\t"
 202:./lib/lib8tion/scale8.h ****         "  mov %[j], r1\n\t"
 203:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 204:./lib/lib8tion/scale8.h ****         "  subi %[j], 0xFF\n\t"
 205:./lib/lib8tion/scale8.h ****         "L_%=: \n\t"
 206:./lib/lib8tion/scale8.h ****         : [j] "+a" (j)
 207:./lib/lib8tion/scale8.h ****         : [i] "a" (i), [scale] "a" (scale)
 208:./lib/lib8tion/scale8.h ****         : "r0", "r1");
 209:./lib/lib8tion/scale8.h **** 
 210:./lib/lib8tion/scale8.h ****     return j;
 211:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 212:./lib/lib8tion/scale8.h ****     // asm volatile(
 213:./lib/lib8tion/scale8.h ****     //      "      tst %0           \n"
 214:./lib/lib8tion/scale8.h ****     //      "      breq L_%=        \n"
 215:./lib/lib8tion/scale8.h ****     //      "      mul %0, %1       \n"
 216:./lib/lib8tion/scale8.h ****     //      "      mov %0, r1       \n"
 217:./lib/lib8tion/scale8.h ****     //      "      add %0, %2       \n"
 218:./lib/lib8tion/scale8.h ****     //      "      clr __zero_reg__ \n"
 219:./lib/lib8tion/scale8.h ****     //      "L_%=:                  \n"
 220:./lib/lib8tion/scale8.h **** 
 221:./lib/lib8tion/scale8.h ****     //      : "+a" (i)
 222:./lib/lib8tion/scale8.h ****     //      : "a" (scale), "a" (nonzeroscale)
 223:./lib/lib8tion/scale8.h ****     //      : "r0", "r1");
 224:./lib/lib8tion/scale8.h **** 
 225:./lib/lib8tion/scale8.h ****     // // Return the result
 226:./lib/lib8tion/scale8.h ****     // return i;
 227:./lib/lib8tion/scale8.h **** #else
 228:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_video_LEAVING_R1_DIRTY available."
 229:./lib/lib8tion/scale8.h **** #endif
 230:./lib/lib8tion/scale8.h **** }
 231:./lib/lib8tion/scale8.h **** 
 232:./lib/lib8tion/scale8.h **** /// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
 233:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE void cleanup_R1(void)
 234:./lib/lib8tion/scale8.h **** {
 235:./lib/lib8tion/scale8.h **** #if CLEANUP_R1_AVRASM == 1
 236:./lib/lib8tion/scale8.h ****     // Restore r1 to "0"; it's expected to always be that
 237:./lib/lib8tion/scale8.h ****     asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
 238:./lib/lib8tion/scale8.h **** #endif
 239:./lib/lib8tion/scale8.h **** }
 240:./lib/lib8tion/scale8.h **** 
 241:./lib/lib8tion/scale8.h **** 
 242:./lib/lib8tion/scale8.h **** /// scale a 16-bit unsigned value by an 8-bit value,
 243:./lib/lib8tion/scale8.h **** ///         considered as numerator of a fraction whose denominator
 244:./lib/lib8tion/scale8.h **** ///         is 256. In other words, it computes i * (scale / 256)
 245:./lib/lib8tion/scale8.h **** 
 246:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t scale16by8( uint16_t i, fract8 scale )
 247:./lib/lib8tion/scale8.h **** {
  16               		.loc 1 247 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 248:./lib/lib8tion/scale8.h **** #if SCALE16BY8_C == 1
 249:./lib/lib8tion/scale8.h ****     uint16_t result;
 250:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 251:./lib/lib8tion/scale8.h ****     result = (i * (1+((uint16_t)scale))) >> 8;
 252:./lib/lib8tion/scale8.h **** #else
 253:./lib/lib8tion/scale8.h ****     result = (i * scale) / 256;
 254:./lib/lib8tion/scale8.h **** #endif
 255:./lib/lib8tion/scale8.h ****     return result;
 256:./lib/lib8tion/scale8.h **** #elif SCALE16BY8_AVRASM == 1
 257:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 258:./lib/lib8tion/scale8.h ****     uint16_t result = 0;
 259:./lib/lib8tion/scale8.h ****     asm volatile(
 260:./lib/lib8tion/scale8.h ****                  // result.A = HighByte( (i.A x scale) + i.A )
 261:./lib/lib8tion/scale8.h ****                  "  mul %A[i], %[scale]                 \n\t"
 262:./lib/lib8tion/scale8.h ****                  "  add r0, %A[i]                       \n\t"
 263:./lib/lib8tion/scale8.h ****             //   "  adc r1, [zero]                      \n\t"
 264:./lib/lib8tion/scale8.h ****             //   "  mov %A[result], r1                  \n\t"
 265:./lib/lib8tion/scale8.h ****                  "  adc %A[result], r1                  \n\t"
 266:./lib/lib8tion/scale8.h **** 
 267:./lib/lib8tion/scale8.h ****                  // result.A-B += i.B x scale
 268:./lib/lib8tion/scale8.h ****                  "  mul %B[i], %[scale]                 \n\t"
 269:./lib/lib8tion/scale8.h ****                  "  add %A[result], r0                  \n\t"
 270:./lib/lib8tion/scale8.h ****                  "  adc %B[result], r1                  \n\t"
 271:./lib/lib8tion/scale8.h **** 
 272:./lib/lib8tion/scale8.h ****                  // cleanup r1
 273:./lib/lib8tion/scale8.h ****                  "  clr __zero_reg__                    \n\t"
 274:./lib/lib8tion/scale8.h **** 
 275:./lib/lib8tion/scale8.h ****                  // result.A-B += i.B
 276:./lib/lib8tion/scale8.h ****                  "  add %A[result], %B[i]               \n\t"
 277:./lib/lib8tion/scale8.h ****                  "  adc %B[result], __zero_reg__        \n\t"
 278:./lib/lib8tion/scale8.h **** 
 279:./lib/lib8tion/scale8.h ****                  : [result] "+r" (result)
 280:./lib/lib8tion/scale8.h ****                  : [i] "r" (i), [scale] "r" (scale)
 281:./lib/lib8tion/scale8.h ****                  : "r0", "r1"
 282:./lib/lib8tion/scale8.h ****                  );
 283:./lib/lib8tion/scale8.h ****     return result;
 284:./lib/lib8tion/scale8.h **** #else
 285:./lib/lib8tion/scale8.h ****     uint16_t result = 0;
  22               		.loc 1 285 5 view .LVU1
 286:./lib/lib8tion/scale8.h ****     asm volatile(
  23               		.loc 1 286 5 view .LVU2
  24 0000 30E0      		ldi r19,0
  25 0002 20E0      		ldi r18,0
  26               	/* #APP */
  27               	 ;  286 "./lib/lib8tion/scale8.h" 1
  28 0004 869F      		  mul r24, r22                 
  29 0006 212D      		  mov r18, r1                  
  30 0008 969F      		  mul r25, r22                 
  31 000a 200D      		  add r18, r0                  
  32 000c 311D      		  adc r19, r1                  
  33 000e 1124      		  clr __zero_reg__                    
  34               		
  35               	 ;  0 "" 2
  36               	.LVL1:
 287:./lib/lib8tion/scale8.h ****          // result.A = HighByte(i.A x j )
 288:./lib/lib8tion/scale8.h ****          "  mul %A[i], %[scale]                 \n\t"
 289:./lib/lib8tion/scale8.h ****          "  mov %A[result], r1                  \n\t"
 290:./lib/lib8tion/scale8.h ****          //"  clr %B[result]                      \n\t"
 291:./lib/lib8tion/scale8.h **** 
 292:./lib/lib8tion/scale8.h ****          // result.A-B += i.B x j
 293:./lib/lib8tion/scale8.h ****          "  mul %B[i], %[scale]                 \n\t"
 294:./lib/lib8tion/scale8.h ****          "  add %A[result], r0                  \n\t"
 295:./lib/lib8tion/scale8.h ****          "  adc %B[result], r1                  \n\t"
 296:./lib/lib8tion/scale8.h **** 
 297:./lib/lib8tion/scale8.h ****          // cleanup r1
 298:./lib/lib8tion/scale8.h ****          "  clr __zero_reg__                    \n\t"
 299:./lib/lib8tion/scale8.h **** 
 300:./lib/lib8tion/scale8.h ****          : [result] "+r" (result)
 301:./lib/lib8tion/scale8.h ****          : [i] "r" (i), [scale] "r" (scale)
 302:./lib/lib8tion/scale8.h ****          : "r0", "r1"
 303:./lib/lib8tion/scale8.h ****          );
 304:./lib/lib8tion/scale8.h ****     return result;
  37               		.loc 1 304 5 view .LVU3
 305:./lib/lib8tion/scale8.h **** #endif
 306:./lib/lib8tion/scale8.h **** #else
 307:./lib/lib8tion/scale8.h ****     #error "No implementation for scale16by8 available."
 308:./lib/lib8tion/scale8.h **** #endif
 309:./lib/lib8tion/scale8.h **** }
  38               		.loc 1 309 1 is_stmt 0 view .LVU4
  39               	/* #NOAPP */
  40 0010 C901      		movw r24,r18
  41               	.LVL2:
  42               	/* epilogue start */
  43               		.loc 1 309 1 view .LVU5
  44 0012 0895      		ret
  45               		.cfi_endproc
  46               	.LFE29:
  48               		.section	.text.sqrt16,"ax",@progbits
  50               	sqrt16:
  51               	.LVL3:
  52               	.LFB53:
  53               		.file 2 "./lib/lib8tion/math8.h"
   1:./lib/lib8tion/math8.h **** #ifndef __INC_LIB8TION_MATH_H
   2:./lib/lib8tion/math8.h **** #define __INC_LIB8TION_MATH_H
   3:./lib/lib8tion/math8.h **** 
   4:./lib/lib8tion/math8.h **** #include "scale8.h"
   5:./lib/lib8tion/math8.h **** 
   6:./lib/lib8tion/math8.h **** ///@ingroup lib8tion
   7:./lib/lib8tion/math8.h **** 
   8:./lib/lib8tion/math8.h **** ///@defgroup Math Basic math operations
   9:./lib/lib8tion/math8.h **** /// Fast, efficient 8-bit math functions specifically
  10:./lib/lib8tion/math8.h **** /// designed for high-performance LED programming.
  11:./lib/lib8tion/math8.h **** ///
  12:./lib/lib8tion/math8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  13:./lib/lib8tion/math8.h **** /// implementations provided, using these functions often
  14:./lib/lib8tion/math8.h **** /// results in smaller and faster code than the equivalent
  15:./lib/lib8tion/math8.h **** /// program using plain "C" arithmetic and logic.
  16:./lib/lib8tion/math8.h **** ///@{
  17:./lib/lib8tion/math8.h **** 
  18:./lib/lib8tion/math8.h **** 
  19:./lib/lib8tion/math8.h **** /// add one byte to another, saturating at 0xFF
  20:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  21:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  22:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  23:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
  24:./lib/lib8tion/math8.h **** {
  25:./lib/lib8tion/math8.h **** #if QADD8_C == 1
  26:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
  27:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
  28:./lib/lib8tion/math8.h ****     return t;
  29:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
  30:./lib/lib8tion/math8.h ****     asm volatile(
  31:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
  32:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  33:./lib/lib8tion/math8.h **** 
  34:./lib/lib8tion/math8.h ****          /* Now test the C flag.
  35:./lib/lib8tion/math8.h ****            If C is clear, we branch around a load of 0xFF into i.
  36:./lib/lib8tion/math8.h ****            If C is set, we go ahead and load 0xFF into i.
  37:./lib/lib8tion/math8.h ****          */
  38:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
  39:./lib/lib8tion/math8.h ****          "ldi %0, 0xFF  \n\t"
  40:./lib/lib8tion/math8.h ****          "L_%=: "
  41:./lib/lib8tion/math8.h ****          : "+a" (i)
  42:./lib/lib8tion/math8.h ****          : "a"  (j) );
  43:./lib/lib8tion/math8.h ****     return i;
  44:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
  45:./lib/lib8tion/math8.h ****     asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  46:./lib/lib8tion/math8.h ****     return i;
  47:./lib/lib8tion/math8.h **** #else
  48:./lib/lib8tion/math8.h **** #error "No implementation for qadd8 available."
  49:./lib/lib8tion/math8.h **** #endif
  50:./lib/lib8tion/math8.h **** }
  51:./lib/lib8tion/math8.h **** 
  52:./lib/lib8tion/math8.h **** /// Add one byte to another, saturating at 0x7F
  53:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  54:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  55:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  56:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)
  57:./lib/lib8tion/math8.h **** {
  58:./lib/lib8tion/math8.h **** #if QADD7_C == 1
  59:./lib/lib8tion/math8.h ****     int16_t t = i + j;
  60:./lib/lib8tion/math8.h ****     if (t > 127) t = 127;
  61:./lib/lib8tion/math8.h ****     return t;
  62:./lib/lib8tion/math8.h **** #elif QADD7_AVRASM == 1
  63:./lib/lib8tion/math8.h ****     asm volatile(
  64:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the V flag */
  65:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  66:./lib/lib8tion/math8.h **** 
  67:./lib/lib8tion/math8.h ****          /* Now test the V flag.
  68:./lib/lib8tion/math8.h ****           If V is clear, we branch around a load of 0x7F into i.
  69:./lib/lib8tion/math8.h ****           If V is set, we go ahead and load 0x7F into i.
  70:./lib/lib8tion/math8.h ****           */
  71:./lib/lib8tion/math8.h ****          "brvc L_%=     \n\t"
  72:./lib/lib8tion/math8.h ****          "ldi %0, 0x7F  \n\t"
  73:./lib/lib8tion/math8.h ****          "L_%=: "
  74:./lib/lib8tion/math8.h ****          : "+a" (i)
  75:./lib/lib8tion/math8.h ****          : "a"  (j) );
  76:./lib/lib8tion/math8.h **** 
  77:./lib/lib8tion/math8.h ****     return i;
  78:./lib/lib8tion/math8.h **** #elif QADD7_ARM_DSP_ASM == 1
  79:./lib/lib8tion/math8.h ****     asm volatile( "qadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  80:./lib/lib8tion/math8.h ****     return i;
  81:./lib/lib8tion/math8.h **** #else
  82:./lib/lib8tion/math8.h **** #error "No implementation for qadd7 available."
  83:./lib/lib8tion/math8.h **** #endif
  84:./lib/lib8tion/math8.h **** }
  85:./lib/lib8tion/math8.h **** 
  86:./lib/lib8tion/math8.h **** /// subtract one byte from another, saturating at 0x00
  87:./lib/lib8tion/math8.h **** /// @returns i - j with a floor of 0
  88:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
  89:./lib/lib8tion/math8.h **** {
  90:./lib/lib8tion/math8.h **** #if QSUB8_C == 1
  91:./lib/lib8tion/math8.h ****     int16_t t = i - j;
  92:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
  93:./lib/lib8tion/math8.h ****     return t;
  94:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
  95:./lib/lib8tion/math8.h **** 
  96:./lib/lib8tion/math8.h ****     asm volatile(
  97:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
  98:./lib/lib8tion/math8.h ****          "sub %0, %1    \n\t"
  99:./lib/lib8tion/math8.h **** 
 100:./lib/lib8tion/math8.h ****          /* Now test the C flag.
 101:./lib/lib8tion/math8.h ****           If C is clear, we branch around a load of 0x00 into i.
 102:./lib/lib8tion/math8.h ****           If C is set, we go ahead and load 0x00 into i.
 103:./lib/lib8tion/math8.h ****           */
 104:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
 105:./lib/lib8tion/math8.h ****          "ldi %0, 0x00  \n\t"
 106:./lib/lib8tion/math8.h ****          "L_%=: "
 107:./lib/lib8tion/math8.h ****          : "+a" (i)
 108:./lib/lib8tion/math8.h ****          : "a"  (j) );
 109:./lib/lib8tion/math8.h **** 
 110:./lib/lib8tion/math8.h ****     return i;
 111:./lib/lib8tion/math8.h **** #else
 112:./lib/lib8tion/math8.h **** #error "No implementation for qsub8 available."
 113:./lib/lib8tion/math8.h **** #endif
 114:./lib/lib8tion/math8.h **** }
 115:./lib/lib8tion/math8.h **** 
 116:./lib/lib8tion/math8.h **** /// add one byte to another, with one byte result
 117:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t add8( uint8_t i, uint8_t j)
 118:./lib/lib8tion/math8.h **** {
 119:./lib/lib8tion/math8.h **** #if ADD8_C == 1
 120:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
 121:./lib/lib8tion/math8.h ****     return t;
 122:./lib/lib8tion/math8.h **** #elif ADD8_AVRASM == 1
 123:./lib/lib8tion/math8.h ****     // Add j to i, period.
 124:./lib/lib8tion/math8.h ****     asm volatile( "add %0, %1" : "+a" (i) : "a" (j));
 125:./lib/lib8tion/math8.h ****     return i;
 126:./lib/lib8tion/math8.h **** #else
 127:./lib/lib8tion/math8.h **** #error "No implementation for add8 available."
 128:./lib/lib8tion/math8.h **** #endif
 129:./lib/lib8tion/math8.h **** }
 130:./lib/lib8tion/math8.h **** 
 131:./lib/lib8tion/math8.h **** /// add one byte to another, with one byte result
 132:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t add8to16( uint8_t i, uint16_t j)
 133:./lib/lib8tion/math8.h **** {
 134:./lib/lib8tion/math8.h **** #if ADD8_C == 1
 135:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
 136:./lib/lib8tion/math8.h ****     return t;
 137:./lib/lib8tion/math8.h **** #elif ADD8_AVRASM == 1
 138:./lib/lib8tion/math8.h ****     // Add i(one byte) to j(two bytes)
 139:./lib/lib8tion/math8.h ****     asm volatile( "add %A[j], %[i]              \n\t"
 140:./lib/lib8tion/math8.h ****                   "adc %B[j], __zero_reg__      \n\t"
 141:./lib/lib8tion/math8.h ****                  : [j] "+a" (j)
 142:./lib/lib8tion/math8.h ****                  : [i] "a"  (i)
 143:./lib/lib8tion/math8.h ****                  );
 144:./lib/lib8tion/math8.h ****     return i;
 145:./lib/lib8tion/math8.h **** #else
 146:./lib/lib8tion/math8.h **** #error "No implementation for add8to16 available."
 147:./lib/lib8tion/math8.h **** #endif
 148:./lib/lib8tion/math8.h **** }
 149:./lib/lib8tion/math8.h **** 
 150:./lib/lib8tion/math8.h **** 
 151:./lib/lib8tion/math8.h **** /// subtract one byte from another, 8-bit result
 152:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t sub8( uint8_t i, uint8_t j)
 153:./lib/lib8tion/math8.h **** {
 154:./lib/lib8tion/math8.h **** #if SUB8_C == 1
 155:./lib/lib8tion/math8.h ****     int16_t t = i - j;
 156:./lib/lib8tion/math8.h ****     return t;
 157:./lib/lib8tion/math8.h **** #elif SUB8_AVRASM == 1
 158:./lib/lib8tion/math8.h ****     // Subtract j from i, period.
 159:./lib/lib8tion/math8.h ****     asm volatile( "sub %0, %1" : "+a" (i) : "a" (j));
 160:./lib/lib8tion/math8.h ****     return i;
 161:./lib/lib8tion/math8.h **** #else
 162:./lib/lib8tion/math8.h **** #error "No implementation for sub8 available."
 163:./lib/lib8tion/math8.h **** #endif
 164:./lib/lib8tion/math8.h **** }
 165:./lib/lib8tion/math8.h **** 
 166:./lib/lib8tion/math8.h **** /// Calculate an integer average of two unsigned
 167:./lib/lib8tion/math8.h **** ///       8-bit integer values (uint8_t).
 168:./lib/lib8tion/math8.h **** ///       Fractional results are rounded down, e.g. avg8(20,41) = 30
 169:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t avg8( uint8_t i, uint8_t j)
 170:./lib/lib8tion/math8.h **** {
 171:./lib/lib8tion/math8.h **** #if AVG8_C == 1
 172:./lib/lib8tion/math8.h ****     return (i + j) >> 1;
 173:./lib/lib8tion/math8.h **** #elif AVG8_AVRASM == 1
 174:./lib/lib8tion/math8.h ****     asm volatile(
 175:./lib/lib8tion/math8.h ****          /* First, add j to i, 9th bit overflows into C flag */
 176:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
 177:./lib/lib8tion/math8.h ****          /* Divide by two, moving C flag into high 8th bit */
 178:./lib/lib8tion/math8.h ****          "ror %0        \n\t"
 179:./lib/lib8tion/math8.h ****          : "+a" (i)
 180:./lib/lib8tion/math8.h ****          : "a"  (j) );
 181:./lib/lib8tion/math8.h ****     return i;
 182:./lib/lib8tion/math8.h **** #else
 183:./lib/lib8tion/math8.h **** #error "No implementation for avg8 available."
 184:./lib/lib8tion/math8.h **** #endif
 185:./lib/lib8tion/math8.h **** }
 186:./lib/lib8tion/math8.h **** 
 187:./lib/lib8tion/math8.h **** /// Calculate an integer average of two unsigned
 188:./lib/lib8tion/math8.h **** ///       16-bit integer values (uint16_t).
 189:./lib/lib8tion/math8.h **** ///       Fractional results are rounded down, e.g. avg16(20,41) = 30
 190:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t avg16( uint16_t i, uint16_t j)
 191:./lib/lib8tion/math8.h **** {
 192:./lib/lib8tion/math8.h **** #if AVG16_C == 1
 193:./lib/lib8tion/math8.h ****     return (uint32_t)((uint32_t)(i) + (uint32_t)(j)) >> 1;
 194:./lib/lib8tion/math8.h **** #elif AVG16_AVRASM == 1
 195:./lib/lib8tion/math8.h ****     asm volatile(
 196:./lib/lib8tion/math8.h ****                  /* First, add jLo (heh) to iLo, 9th bit overflows into C flag */
 197:./lib/lib8tion/math8.h ****                  "add %A[i], %A[j]    \n\t"
 198:./lib/lib8tion/math8.h ****                  /* Now, add C + jHi to iHi, 17th bit overflows into C flag */
 199:./lib/lib8tion/math8.h ****                  "adc %B[i], %B[j]    \n\t"
 200:./lib/lib8tion/math8.h ****                  /* Divide iHi by two, moving C flag into high 16th bit, old 9th bit now in C */
 201:./lib/lib8tion/math8.h ****                  "ror %B[i]        \n\t"
 202:./lib/lib8tion/math8.h ****                  /* Divide iLo by two, moving C flag into high 8th bit */
 203:./lib/lib8tion/math8.h ****                  "ror %A[i]        \n\t"
 204:./lib/lib8tion/math8.h ****                  : [i] "+a" (i)
 205:./lib/lib8tion/math8.h ****                  : [j] "a"  (j) );
 206:./lib/lib8tion/math8.h ****     return i;
 207:./lib/lib8tion/math8.h **** #else
 208:./lib/lib8tion/math8.h **** #error "No implementation for avg16 available."
 209:./lib/lib8tion/math8.h **** #endif
 210:./lib/lib8tion/math8.h **** }
 211:./lib/lib8tion/math8.h **** 
 212:./lib/lib8tion/math8.h **** 
 213:./lib/lib8tion/math8.h **** /// Calculate an integer average of two signed 7-bit
 214:./lib/lib8tion/math8.h **** ///       integers (int8_t)
 215:./lib/lib8tion/math8.h **** ///       If the first argument is even, result is rounded down.
 216:./lib/lib8tion/math8.h **** ///       If the first argument is odd, result is result up.
 217:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)
 218:./lib/lib8tion/math8.h **** {
 219:./lib/lib8tion/math8.h **** #if AVG7_C == 1
 220:./lib/lib8tion/math8.h ****     return ((i + j) >> 1) + (i & 0x1);
 221:./lib/lib8tion/math8.h **** #elif AVG7_AVRASM == 1
 222:./lib/lib8tion/math8.h ****     asm volatile(
 223:./lib/lib8tion/math8.h ****                  "asr %1        \n\t"
 224:./lib/lib8tion/math8.h ****                  "asr %0        \n\t"
 225:./lib/lib8tion/math8.h ****                  "adc %0, %1    \n\t"
 226:./lib/lib8tion/math8.h ****                  : "+a" (i)
 227:./lib/lib8tion/math8.h ****                  : "a"  (j) );
 228:./lib/lib8tion/math8.h ****     return i;
 229:./lib/lib8tion/math8.h **** #else
 230:./lib/lib8tion/math8.h **** #error "No implementation for avg7 available."
 231:./lib/lib8tion/math8.h **** #endif
 232:./lib/lib8tion/math8.h **** }
 233:./lib/lib8tion/math8.h **** 
 234:./lib/lib8tion/math8.h **** /// Calculate an integer average of two signed 15-bit
 235:./lib/lib8tion/math8.h **** ///       integers (int16_t)
 236:./lib/lib8tion/math8.h **** ///       If the first argument is even, result is rounded down.
 237:./lib/lib8tion/math8.h **** ///       If the first argument is odd, result is result up.
 238:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int16_t avg15( int16_t i, int16_t j)
 239:./lib/lib8tion/math8.h **** {
 240:./lib/lib8tion/math8.h **** #if AVG15_C == 1
 241:./lib/lib8tion/math8.h ****     return ((int32_t)((int32_t)(i) + (int32_t)(j)) >> 1) + (i & 0x1);
 242:./lib/lib8tion/math8.h **** #elif AVG15_AVRASM == 1
 243:./lib/lib8tion/math8.h ****     asm volatile(
 244:./lib/lib8tion/math8.h ****                  /* first divide j by 2, throwing away lowest bit */
 245:./lib/lib8tion/math8.h ****                  "asr %B[j]          \n\t"
 246:./lib/lib8tion/math8.h ****                  "ror %A[j]          \n\t"
 247:./lib/lib8tion/math8.h ****                  /* now divide i by 2, with lowest bit going into C */
 248:./lib/lib8tion/math8.h ****                  "asr %B[i]          \n\t"
 249:./lib/lib8tion/math8.h ****                  "ror %A[i]          \n\t"
 250:./lib/lib8tion/math8.h ****                  /* add j + C to i */
 251:./lib/lib8tion/math8.h ****                  "adc %A[i], %A[j]   \n\t"
 252:./lib/lib8tion/math8.h ****                  "adc %B[i], %B[j]   \n\t"
 253:./lib/lib8tion/math8.h ****                  : [i] "+a" (i)
 254:./lib/lib8tion/math8.h ****                  : [j] "a"  (j) );
 255:./lib/lib8tion/math8.h ****     return i;
 256:./lib/lib8tion/math8.h **** #else
 257:./lib/lib8tion/math8.h **** #error "No implementation for avg15 available."
 258:./lib/lib8tion/math8.h **** #endif
 259:./lib/lib8tion/math8.h **** }
 260:./lib/lib8tion/math8.h **** 
 261:./lib/lib8tion/math8.h **** 
 262:./lib/lib8tion/math8.h **** ///       Calculate the remainder of one unsigned 8-bit
 263:./lib/lib8tion/math8.h **** ///       value divided by anoter, aka A % M.
 264:./lib/lib8tion/math8.h **** ///       Implemented by repeated subtraction, which is
 265:./lib/lib8tion/math8.h **** ///       very compact, and very fast if A is 'probably'
 266:./lib/lib8tion/math8.h **** ///       less than M.  If A is a large multiple of M,
 267:./lib/lib8tion/math8.h **** ///       the loop has to execute multiple times.  However,
 268:./lib/lib8tion/math8.h **** ///       even in that case, the loop is only two
 269:./lib/lib8tion/math8.h **** ///       instructions long on AVR, i.e., quick.
 270:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t mod8( uint8_t a, uint8_t m)
 271:./lib/lib8tion/math8.h **** {
 272:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 273:./lib/lib8tion/math8.h ****     asm volatile (
 274:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 275:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 276:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 277:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 278:./lib/lib8tion/math8.h ****                   : [m] "r"  (m)
 279:./lib/lib8tion/math8.h ****                   );
 280:./lib/lib8tion/math8.h **** #else
 281:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 282:./lib/lib8tion/math8.h **** #endif
 283:./lib/lib8tion/math8.h ****     return a;
 284:./lib/lib8tion/math8.h **** }
 285:./lib/lib8tion/math8.h **** 
 286:./lib/lib8tion/math8.h **** ///          Add two numbers, and calculate the modulo
 287:./lib/lib8tion/math8.h **** ///          of the sum and a third number, M.
 288:./lib/lib8tion/math8.h **** ///          In other words, it returns (A+B) % M.
 289:./lib/lib8tion/math8.h **** ///          It is designed as a compact mechanism for
 290:./lib/lib8tion/math8.h **** ///          incrementing a 'mode' switch and wrapping
 291:./lib/lib8tion/math8.h **** ///          around back to 'mode 0' when the switch
 292:./lib/lib8tion/math8.h **** ///          goes past the end of the available range.
 293:./lib/lib8tion/math8.h **** ///          e.g. if you have seven modes, this switches
 294:./lib/lib8tion/math8.h **** ///          to the next one and wraps around if needed:
 295:./lib/lib8tion/math8.h **** ///            mode = addmod8( mode, 1, 7);
 296:./lib/lib8tion/math8.h **** ///LIB8STATIC_ALWAYS_INLINESee 'mod8' for notes on performance.
 297:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t addmod8( uint8_t a, uint8_t b, uint8_t m)
 298:./lib/lib8tion/math8.h **** {
 299:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 300:./lib/lib8tion/math8.h ****     asm volatile (
 301:./lib/lib8tion/math8.h ****                   "       add %[a],%[b]    \n\t"
 302:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 303:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 304:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 305:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 306:./lib/lib8tion/math8.h ****                   : [b] "r"  (b), [m] "r" (m)
 307:./lib/lib8tion/math8.h ****                   );
 308:./lib/lib8tion/math8.h **** #else
 309:./lib/lib8tion/math8.h ****     a += b;
 310:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 311:./lib/lib8tion/math8.h **** #endif
 312:./lib/lib8tion/math8.h ****     return a;
 313:./lib/lib8tion/math8.h **** }
 314:./lib/lib8tion/math8.h **** 
 315:./lib/lib8tion/math8.h **** ///          Subtract two numbers, and calculate the modulo
 316:./lib/lib8tion/math8.h **** ///          of the difference and a third number, M.
 317:./lib/lib8tion/math8.h **** ///          In other words, it returns (A-B) % M.
 318:./lib/lib8tion/math8.h **** ///          It is designed as a compact mechanism for
 319:./lib/lib8tion/math8.h **** ///          incrementing a 'mode' switch and wrapping
 320:./lib/lib8tion/math8.h **** ///          around back to 'mode 0' when the switch
 321:./lib/lib8tion/math8.h **** ///          goes past the end of the available range.
 322:./lib/lib8tion/math8.h **** ///          e.g. if you have seven modes, this switches
 323:./lib/lib8tion/math8.h **** ///          to the next one and wraps around if needed:
 324:./lib/lib8tion/math8.h **** ///            mode = addmod8( mode, 1, 7);
 325:./lib/lib8tion/math8.h **** ///LIB8STATIC_ALWAYS_INLINESee 'mod8' for notes on performance.
 326:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t submod8( uint8_t a, uint8_t b, uint8_t m)
 327:./lib/lib8tion/math8.h **** {
 328:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 329:./lib/lib8tion/math8.h ****     asm volatile (
 330:./lib/lib8tion/math8.h ****                   "       sub %[a],%[b]    \n\t"
 331:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 332:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 333:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 334:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 335:./lib/lib8tion/math8.h ****                   : [b] "r"  (b), [m] "r" (m)
 336:./lib/lib8tion/math8.h ****                   );
 337:./lib/lib8tion/math8.h **** #else
 338:./lib/lib8tion/math8.h ****     a -= b;
 339:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 340:./lib/lib8tion/math8.h **** #endif
 341:./lib/lib8tion/math8.h ****     return a;
 342:./lib/lib8tion/math8.h **** }
 343:./lib/lib8tion/math8.h **** 
 344:./lib/lib8tion/math8.h **** /// 8x8 bit multiplication, with 8 bit result
 345:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t mul8( uint8_t i, uint8_t j)
 346:./lib/lib8tion/math8.h **** {
 347:./lib/lib8tion/math8.h **** #if MUL8_C == 1
 348:./lib/lib8tion/math8.h ****     return ((uint16_t)i * (uint16_t)(j) ) & 0xFF;
 349:./lib/lib8tion/math8.h **** #elif MUL8_AVRASM == 1
 350:./lib/lib8tion/math8.h ****     asm volatile(
 351:./lib/lib8tion/math8.h ****          /* Multiply 8-bit i * 8-bit j, giving 16-bit r1,r0 */
 352:./lib/lib8tion/math8.h ****          "mul %0, %1          \n\t"
 353:./lib/lib8tion/math8.h ****          /* Extract the LOW 8-bits (r0) */
 354:./lib/lib8tion/math8.h ****          "mov %0, r0          \n\t"
 355:./lib/lib8tion/math8.h ****          /* Restore r1 to "0"; it's expected to always be that */
 356:./lib/lib8tion/math8.h ****          "clr __zero_reg__    \n\t"
 357:./lib/lib8tion/math8.h ****          : "+a" (i)
 358:./lib/lib8tion/math8.h ****          : "a"  (j)
 359:./lib/lib8tion/math8.h ****          : "r0", "r1");
 360:./lib/lib8tion/math8.h **** 
 361:./lib/lib8tion/math8.h ****     return i;
 362:./lib/lib8tion/math8.h **** #else
 363:./lib/lib8tion/math8.h **** #error "No implementation for mul8 available."
 364:./lib/lib8tion/math8.h **** #endif
 365:./lib/lib8tion/math8.h **** }
 366:./lib/lib8tion/math8.h **** 
 367:./lib/lib8tion/math8.h **** 
 368:./lib/lib8tion/math8.h **** /// saturating 8x8 bit multiplication, with 8 bit result
 369:./lib/lib8tion/math8.h **** /// @returns the product of i * j, capping at 0xFF
 370:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)
 371:./lib/lib8tion/math8.h **** {
 372:./lib/lib8tion/math8.h **** #if QMUL8_C == 1
 373:./lib/lib8tion/math8.h ****     int p = ((uint16_t)i * (uint16_t)(j) );
 374:./lib/lib8tion/math8.h ****     if( p > 255) p = 255;
 375:./lib/lib8tion/math8.h ****     return p;
 376:./lib/lib8tion/math8.h **** #elif QMUL8_AVRASM == 1
 377:./lib/lib8tion/math8.h ****     asm volatile(
 378:./lib/lib8tion/math8.h ****                  /* Multiply 8-bit i * 8-bit j, giving 16-bit r1,r0 */
 379:./lib/lib8tion/math8.h ****                  "  mul %0, %1          \n\t"
 380:./lib/lib8tion/math8.h ****                  /* If high byte of result is zero, all is well. */
 381:./lib/lib8tion/math8.h ****                  "  tst r1              \n\t"
 382:./lib/lib8tion/math8.h ****                  "  breq Lnospill_%=    \n\t"
 383:./lib/lib8tion/math8.h ****                  /* If high byte of result > 0, saturate low byte to 0xFF */
 384:./lib/lib8tion/math8.h ****                  "  ldi %0,0xFF         \n\t"
 385:./lib/lib8tion/math8.h ****                  "  rjmp Ldone_%=       \n\t"
 386:./lib/lib8tion/math8.h ****                  "Lnospill_%=:          \n\t"
 387:./lib/lib8tion/math8.h ****                  /* Extract the LOW 8-bits (r0) */
 388:./lib/lib8tion/math8.h ****                  "  mov %0, r0          \n\t"
 389:./lib/lib8tion/math8.h ****                  "Ldone_%=:             \n\t"
 390:./lib/lib8tion/math8.h ****                  /* Restore r1 to "0"; it's expected to always be that */
 391:./lib/lib8tion/math8.h ****                  "  clr __zero_reg__    \n\t"
 392:./lib/lib8tion/math8.h ****                  : "+a" (i)
 393:./lib/lib8tion/math8.h ****                  : "a"  (j)
 394:./lib/lib8tion/math8.h ****                  : "r0", "r1");
 395:./lib/lib8tion/math8.h **** 
 396:./lib/lib8tion/math8.h ****     return i;
 397:./lib/lib8tion/math8.h **** #else
 398:./lib/lib8tion/math8.h **** #error "No implementation for qmul8 available."
 399:./lib/lib8tion/math8.h **** #endif
 400:./lib/lib8tion/math8.h **** }
 401:./lib/lib8tion/math8.h **** 
 402:./lib/lib8tion/math8.h **** 
 403:./lib/lib8tion/math8.h **** /// take abs() of a signed 8-bit uint8_t
 404:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t abs8( int8_t i)
 405:./lib/lib8tion/math8.h **** {
 406:./lib/lib8tion/math8.h **** #if ABS8_C == 1
 407:./lib/lib8tion/math8.h ****     if( i < 0) i = -i;
 408:./lib/lib8tion/math8.h ****     return i;
 409:./lib/lib8tion/math8.h **** #elif ABS8_AVRASM == 1
 410:./lib/lib8tion/math8.h **** 
 411:./lib/lib8tion/math8.h **** 
 412:./lib/lib8tion/math8.h ****     asm volatile(
 413:./lib/lib8tion/math8.h ****          /* First, check the high bit, and prepare to skip if it's clear */
 414:./lib/lib8tion/math8.h ****          "sbrc %0, 7 \n"
 415:./lib/lib8tion/math8.h **** 
 416:./lib/lib8tion/math8.h ****          /* Negate the value */
 417:./lib/lib8tion/math8.h ****          "neg %0     \n"
 418:./lib/lib8tion/math8.h **** 
 419:./lib/lib8tion/math8.h ****          : "+r" (i) : "r" (i) );
 420:./lib/lib8tion/math8.h ****     return i;
 421:./lib/lib8tion/math8.h **** #else
 422:./lib/lib8tion/math8.h **** #error "No implementation for abs8 available."
 423:./lib/lib8tion/math8.h **** #endif
 424:./lib/lib8tion/math8.h **** }
 425:./lib/lib8tion/math8.h **** 
 426:./lib/lib8tion/math8.h **** ///         square root for 16-bit integers
 427:./lib/lib8tion/math8.h **** ///         About three times faster and five times smaller
 428:./lib/lib8tion/math8.h **** ///         than Arduino's general sqrt on AVR.
 429:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t sqrt16(uint16_t x)
 430:./lib/lib8tion/math8.h **** {
  54               		.loc 2 430 1 is_stmt 1 view -0
  55               		.cfi_startproc
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  60               		.loc 2 430 1 is_stmt 0 view .LVU7
  61 0000 AC01      		movw r20,r24
 431:./lib/lib8tion/math8.h ****     if( x <= 1) {
  62               		.loc 2 431 5 is_stmt 1 view .LVU8
  63               		.loc 2 431 7 is_stmt 0 view .LVU9
  64 0002 8230      		cpi r24,2
  65 0004 9105      		cpc r25,__zero_reg__
  66 0006 00F4      		brsh .L3
 432:./lib/lib8tion/math8.h ****         return x;
  67               		.loc 2 432 9 is_stmt 1 view .LVU10
  68               		.loc 2 432 16 is_stmt 0 view .LVU11
  69 0008 0895      		ret
  70               	.L3:
 433:./lib/lib8tion/math8.h ****     }
 434:./lib/lib8tion/math8.h **** 
 435:./lib/lib8tion/math8.h ****     uint8_t low = 1; // lower bound
  71               		.loc 2 435 5 is_stmt 1 view .LVU12
  72               	.LVL4:
 436:./lib/lib8tion/math8.h ****     uint8_t hi, mid;
  73               		.loc 2 436 5 view .LVU13
 437:./lib/lib8tion/math8.h **** 
 438:./lib/lib8tion/math8.h ****     if( x > 7904) {
  74               		.loc 2 438 5 view .LVU14
 439:./lib/lib8tion/math8.h ****         hi = 255;
  75               		.loc 2 439 12 is_stmt 0 view .LVU15
  76 000a 9FEF      		ldi r25,lo8(-1)
 438:./lib/lib8tion/math8.h ****         hi = 255;
  77               		.loc 2 438 7 view .LVU16
  78 000c 413E      		cpi r20,-31
  79 000e 8EE1      		ldi r24,30
  80 0010 5807      		cpc r21,r24
  81               	.LVL5:
 438:./lib/lib8tion/math8.h ****         hi = 255;
  82               		.loc 2 438 7 view .LVU17
  83 0012 00F4      		brsh .L5
 440:./lib/lib8tion/math8.h ****     } else {
 441:./lib/lib8tion/math8.h ****         hi = (x >> 5) + 8; // initial estimate for upper bound
  84               		.loc 2 441 9 is_stmt 1 view .LVU18
  85               		.loc 2 441 17 is_stmt 0 view .LVU19
  86 0014 9A01      		movw r18,r20
  87 0016 95E0      		ldi r25,5
  88               		1:
  89 0018 3695      		lsr r19
  90 001a 2795      		ror r18
  91 001c 9A95      		dec r25
  92 001e 01F4      		brne 1b
  93               		.loc 2 441 12 view .LVU20
  94 0020 98E0      		ldi r25,lo8(8)
  95 0022 920F      		add r25,r18
  96               	.LVL6:
  97               	.L5:
 439:./lib/lib8tion/math8.h ****     } else {
  98               		.loc 2 439 12 view .LVU21
  99 0024 61E0      		ldi r22,lo8(1)
 100               	.LVL7:
 101               	.L8:
 442:./lib/lib8tion/math8.h ****     }
 443:./lib/lib8tion/math8.h **** 
 444:./lib/lib8tion/math8.h ****     do {
 102               		.loc 2 444 5 is_stmt 1 view .LVU22
 445:./lib/lib8tion/math8.h ****         mid = (low + hi) >> 1;
 103               		.loc 2 445 9 view .LVU23
 104               		.loc 2 445 20 is_stmt 0 view .LVU24
 105 0026 E62F      		mov r30,r22
 106 0028 E90F      		add r30,r25
 107 002a FF27      		clr r31
 108 002c FF1F      		rol r31
 109 002e 9F01      		movw r18,r30
 110               		.loc 2 445 26 view .LVU25
 111 0030 3595      		asr r19
 112 0032 2795      		ror r18
 113               		.loc 2 445 13 view .LVU26
 114 0034 822F      		mov r24,r18
 115               	.LVL8:
 446:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
 116               		.loc 2 446 9 is_stmt 1 view .LVU27
 117               		.loc 2 446 28 is_stmt 0 view .LVU28
 118 0036 229F      		mul r18,r18
 119 0038 F001      		movw r30,r0
 120 003a 239F      		mul r18,r19
 121 003c F00D      		add r31,r0
 122 003e F00D      		add r31,r0
 123 0040 1124      		clr r1
 124               		.loc 2 446 12 view .LVU29
 125 0042 4E17      		cp r20,r30
 126 0044 5F07      		cpc r21,r31
 127 0046 00F4      		brsh .L6
 447:./lib/lib8tion/math8.h ****             hi = mid - 1;
 128               		.loc 2 447 13 is_stmt 1 view .LVU30
 129               		.loc 2 447 16 is_stmt 0 view .LVU31
 130 0048 9FEF      		ldi r25,lo8(-1)
 131               	.LVL9:
 132               		.loc 2 447 16 view .LVU32
 133 004a 920F      		add r25,r18
 134               	.LVL10:
 135               	.L7:
 448:./lib/lib8tion/math8.h ****         } else {
 449:./lib/lib8tion/math8.h ****             if( mid == 255) {
 450:./lib/lib8tion/math8.h ****                 return 255;
 451:./lib/lib8tion/math8.h ****             }
 452:./lib/lib8tion/math8.h ****             low = mid + 1;
 453:./lib/lib8tion/math8.h ****         }
 454:./lib/lib8tion/math8.h ****     } while (hi >= low);
 136               		.loc 2 454 13 is_stmt 1 view .LVU33
 137               		.loc 2 454 5 is_stmt 0 view .LVU34
 138 004c 9617      		cp r25,r22
 139 004e 00F4      		brsh .L8
 455:./lib/lib8tion/math8.h **** 
 456:./lib/lib8tion/math8.h ****     return low - 1;
 140               		.loc 2 456 5 is_stmt 1 view .LVU35
 141               		.loc 2 456 16 is_stmt 0 view .LVU36
 142 0050 8FEF      		ldi r24,lo8(-1)
 143 0052 860F      		add r24,r22
 144               	.L2:
 145               	/* epilogue start */
 457:./lib/lib8tion/math8.h **** }
 146               		.loc 2 457 1 view .LVU37
 147 0054 0895      		ret
 148               	.L6:
 449:./lib/lib8tion/math8.h ****                 return 255;
 149               		.loc 2 449 13 is_stmt 1 view .LVU38
 449:./lib/lib8tion/math8.h ****                 return 255;
 150               		.loc 2 449 15 is_stmt 0 view .LVU39
 151 0056 2F3F      		cpi r18,lo8(-1)
 152 0058 01F0      		breq .L2
 452:./lib/lib8tion/math8.h ****         }
 153               		.loc 2 452 13 is_stmt 1 view .LVU40
 452:./lib/lib8tion/math8.h ****         }
 154               		.loc 2 452 17 is_stmt 0 view .LVU41
 155 005a 61E0      		ldi r22,lo8(1)
 156               	.LVL11:
 452:./lib/lib8tion/math8.h ****         }
 157               		.loc 2 452 17 view .LVU42
 158 005c 620F      		add r22,r18
 159               	.LVL12:
 452:./lib/lib8tion/math8.h ****         }
 160               		.loc 2 452 17 view .LVU43
 161 005e 00C0      		rjmp .L7
 162               		.cfi_endproc
 163               	.LFE53:
 165               		.section	.text.sin8_avr,"ax",@progbits
 167               	sin8_avr:
 168               	.LVL13:
 169               	.LFB67:
 170               		.file 3 "./lib/lib8tion/trig8.h"
   1:./lib/lib8tion/trig8.h **** #ifndef __INC_LIB8TION_TRIG_H
   2:./lib/lib8tion/trig8.h **** #define __INC_LIB8TION_TRIG_H
   3:./lib/lib8tion/trig8.h **** 
   4:./lib/lib8tion/trig8.h **** ///@ingroup lib8tion
   5:./lib/lib8tion/trig8.h **** 
   6:./lib/lib8tion/trig8.h **** ///@defgroup Trig Fast trig functions
   7:./lib/lib8tion/trig8.h **** /// Fast 8 and 16-bit approximations of sin(x) and cos(x).
   8:./lib/lib8tion/trig8.h **** ///        Don't use these approximations for calculating the
   9:./lib/lib8tion/trig8.h **** ///        trajectory of a rocket to Mars, but they're great
  10:./lib/lib8tion/trig8.h **** ///        for art projects and LED displays.
  11:./lib/lib8tion/trig8.h **** ///
  12:./lib/lib8tion/trig8.h **** ///        On Arduino/AVR, the 16-bit approximation is more than
  13:./lib/lib8tion/trig8.h **** ///        10X faster than floating point sin(x) and cos(x), while
  14:./lib/lib8tion/trig8.h **** /// the 8-bit approximation is more than 20X faster.
  15:./lib/lib8tion/trig8.h **** ///@{
  16:./lib/lib8tion/trig8.h **** 
  17:./lib/lib8tion/trig8.h **** #if defined(__AVR__)
  18:./lib/lib8tion/trig8.h **** #define sin16 sin16_avr
  19:./lib/lib8tion/trig8.h **** #else
  20:./lib/lib8tion/trig8.h **** #define sin16 sin16_C
  21:./lib/lib8tion/trig8.h **** #endif
  22:./lib/lib8tion/trig8.h **** 
  23:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of sin(x). This approximation never varies more than
  24:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
  25:./lib/lib8tion/trig8.h **** ///
  26:./lib/lib8tion/trig8.h **** ///     float s = sin(x) * 32767.0;
  27:./lib/lib8tion/trig8.h **** ///
  28:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
  29:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
  30:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t sin16_avr( uint16_t theta )
  31:./lib/lib8tion/trig8.h **** {
  32:./lib/lib8tion/trig8.h ****     static const uint8_t data[] =
  33:./lib/lib8tion/trig8.h ****     { 0,         0,         49, 0, 6393%256,   6393/256, 48, 0,
  34:./lib/lib8tion/trig8.h ****       12539%256, 12539/256, 44, 0, 18204%256, 18204/256, 38, 0,
  35:./lib/lib8tion/trig8.h ****       23170%256, 23170/256, 31, 0, 27245%256, 27245/256, 23, 0,
  36:./lib/lib8tion/trig8.h ****       30273%256, 30273/256, 14, 0, 32137%256, 32137/256,  4 /*,0*/ };
  37:./lib/lib8tion/trig8.h **** 
  38:./lib/lib8tion/trig8.h ****     uint16_t offset = (theta & 0x3FFF);
  39:./lib/lib8tion/trig8.h **** 
  40:./lib/lib8tion/trig8.h ****     // AVR doesn't have a multi-bit shift instruction,
  41:./lib/lib8tion/trig8.h ****     // so if we say "offset >>= 3", gcc makes a tiny loop.
  42:./lib/lib8tion/trig8.h ****     // Inserting empty volatile statements between each
  43:./lib/lib8tion/trig8.h ****     // bit shift forces gcc to unroll the loop.
  44:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..8191
  45:./lib/lib8tion/trig8.h ****     asm volatile("");
  46:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..4095
  47:./lib/lib8tion/trig8.h ****     asm volatile("");
  48:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..2047
  49:./lib/lib8tion/trig8.h **** 
  50:./lib/lib8tion/trig8.h ****     if( theta & 0x4000 ) offset = 2047 - offset;
  51:./lib/lib8tion/trig8.h **** 
  52:./lib/lib8tion/trig8.h ****     uint8_t sectionX4;
  53:./lib/lib8tion/trig8.h ****     sectionX4 = offset / 256;
  54:./lib/lib8tion/trig8.h ****     sectionX4 *= 4;
  55:./lib/lib8tion/trig8.h **** 
  56:./lib/lib8tion/trig8.h ****     uint8_t m;
  57:./lib/lib8tion/trig8.h **** 
  58:./lib/lib8tion/trig8.h ****     union {
  59:./lib/lib8tion/trig8.h ****         uint16_t b;
  60:./lib/lib8tion/trig8.h ****         struct {
  61:./lib/lib8tion/trig8.h ****             uint8_t blo;
  62:./lib/lib8tion/trig8.h ****             uint8_t bhi;
  63:./lib/lib8tion/trig8.h ****         };
  64:./lib/lib8tion/trig8.h ****     } u;
  65:./lib/lib8tion/trig8.h **** 
  66:./lib/lib8tion/trig8.h ****     //in effect u.b = blo + (256 * bhi);
  67:./lib/lib8tion/trig8.h ****     u.blo = data[ sectionX4 ];
  68:./lib/lib8tion/trig8.h ****     u.bhi = data[ sectionX4 + 1];
  69:./lib/lib8tion/trig8.h ****     m     = data[ sectionX4 + 2];
  70:./lib/lib8tion/trig8.h **** 
  71:./lib/lib8tion/trig8.h ****     uint8_t secoffset8 = (uint8_t)(offset) / 2;
  72:./lib/lib8tion/trig8.h **** 
  73:./lib/lib8tion/trig8.h ****     uint16_t mx = m * secoffset8;
  74:./lib/lib8tion/trig8.h **** 
  75:./lib/lib8tion/trig8.h ****     int16_t  y  = mx + u.b;
  76:./lib/lib8tion/trig8.h ****     if( theta & 0x8000 ) y = -y;
  77:./lib/lib8tion/trig8.h **** 
  78:./lib/lib8tion/trig8.h ****     return y;
  79:./lib/lib8tion/trig8.h **** }
  80:./lib/lib8tion/trig8.h **** 
  81:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of sin(x). This approximation never varies more than
  82:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
  83:./lib/lib8tion/trig8.h **** ///
  84:./lib/lib8tion/trig8.h **** ///     float s = sin(x) * 32767.0;
  85:./lib/lib8tion/trig8.h **** ///
  86:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
  87:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
  88:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t sin16_C( uint16_t theta )
  89:./lib/lib8tion/trig8.h **** {
  90:./lib/lib8tion/trig8.h ****     static const uint16_t base[] =
  91:./lib/lib8tion/trig8.h ****     { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
  92:./lib/lib8tion/trig8.h ****     static const uint8_t slope[] =
  93:./lib/lib8tion/trig8.h ****     { 49, 48, 44, 38, 31, 23, 14, 4 };
  94:./lib/lib8tion/trig8.h **** 
  95:./lib/lib8tion/trig8.h ****     uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
  96:./lib/lib8tion/trig8.h ****     if( theta & 0x4000 ) offset = 2047 - offset;
  97:./lib/lib8tion/trig8.h **** 
  98:./lib/lib8tion/trig8.h ****     uint8_t section = offset / 256; // 0..7
  99:./lib/lib8tion/trig8.h ****     uint16_t b   = base[section];
 100:./lib/lib8tion/trig8.h ****     uint8_t  m   = slope[section];
 101:./lib/lib8tion/trig8.h **** 
 102:./lib/lib8tion/trig8.h ****     uint8_t secoffset8 = (uint8_t)(offset) / 2;
 103:./lib/lib8tion/trig8.h **** 
 104:./lib/lib8tion/trig8.h ****     uint16_t mx = m * secoffset8;
 105:./lib/lib8tion/trig8.h ****     int16_t  y  = mx + b;
 106:./lib/lib8tion/trig8.h **** 
 107:./lib/lib8tion/trig8.h ****     if( theta & 0x8000 ) y = -y;
 108:./lib/lib8tion/trig8.h **** 
 109:./lib/lib8tion/trig8.h ****     return y;
 110:./lib/lib8tion/trig8.h **** }
 111:./lib/lib8tion/trig8.h **** 
 112:./lib/lib8tion/trig8.h **** 
 113:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of cos(x). This approximation never varies more than
 114:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
 115:./lib/lib8tion/trig8.h **** ///
 116:./lib/lib8tion/trig8.h **** ///     float s = cos(x) * 32767.0;
 117:./lib/lib8tion/trig8.h **** ///
 118:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
 119:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
 120:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t cos16( uint16_t theta)
 121:./lib/lib8tion/trig8.h **** {
 122:./lib/lib8tion/trig8.h ****     return sin16( theta + 16384);
 123:./lib/lib8tion/trig8.h **** }
 124:./lib/lib8tion/trig8.h **** 
 125:./lib/lib8tion/trig8.h **** ///////////////////////////////////////////////////////////////////////
 126:./lib/lib8tion/trig8.h **** 
 127:./lib/lib8tion/trig8.h **** // sin8 & cos8
 128:./lib/lib8tion/trig8.h **** //        Fast 8-bit approximations of sin(x) & cos(x).
 129:./lib/lib8tion/trig8.h **** //        Input angle is an unsigned int from 0-255.
 130:./lib/lib8tion/trig8.h **** //        Output is an unsigned int from 0 to 255.
 131:./lib/lib8tion/trig8.h **** //
 132:./lib/lib8tion/trig8.h **** //        This approximation can vary to to 2%
 133:./lib/lib8tion/trig8.h **** //        from the floating point value you'd get by doing
 134:./lib/lib8tion/trig8.h **** //          float s = (sin( x ) * 128.0) + 128;
 135:./lib/lib8tion/trig8.h **** //
 136:./lib/lib8tion/trig8.h **** //        Don't use this approximation for calculating the
 137:./lib/lib8tion/trig8.h **** //        "real" trigonometric calculations, but it's great
 138:./lib/lib8tion/trig8.h **** //        for art projects and LED displays.
 139:./lib/lib8tion/trig8.h **** //
 140:./lib/lib8tion/trig8.h **** //        On Arduino/AVR, this approximation is more than
 141:./lib/lib8tion/trig8.h **** //        20X faster than floating point sin(x) and cos(x)
 142:./lib/lib8tion/trig8.h **** 
 143:./lib/lib8tion/trig8.h **** #if defined(__AVR__) && !defined(LIB8_ATTINY)
 144:./lib/lib8tion/trig8.h **** #define sin8 sin8_avr
 145:./lib/lib8tion/trig8.h **** #else
 146:./lib/lib8tion/trig8.h **** #define sin8 sin8_C
 147:./lib/lib8tion/trig8.h **** #endif
 148:./lib/lib8tion/trig8.h **** 
 149:./lib/lib8tion/trig8.h **** 
 150:./lib/lib8tion/trig8.h **** static const uint8_t b_m16_interleave[8] = { 0, 49, 49, 41, 90, 27, 117, 10 };
 151:./lib/lib8tion/trig8.h **** 
 152:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of sin(x). This approximation never varies more than
 153:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 154:./lib/lib8tion/trig8.h **** ///
 155:./lib/lib8tion/trig8.h **** ///     float s = (sin(x) * 128.0) + 128;
 156:./lib/lib8tion/trig8.h **** ///
 157:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 158:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 159:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t  sin8_avr( uint8_t theta)
 160:./lib/lib8tion/trig8.h **** {
 171               		.loc 3 160 1 is_stmt 1 view -0
 172               		.cfi_startproc
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
 161:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 177               		.loc 3 161 5 view .LVU45
 162:./lib/lib8tion/trig8.h **** 
 163:./lib/lib8tion/trig8.h ****     asm volatile(
 178               		.loc 3 163 5 view .LVU46
 179 0000 E82F      		mov r30,r24
 180               	/* #APP */
 181               	 ;  163 "./lib/lib8tion/trig8.h" 1
 182 0002 86FD      		sbrc r24,6         
 183 0004 E095      		com  r30           
 184               		
 185               	 ;  0 "" 2
 186               	.LVL14:
 164:./lib/lib8tion/trig8.h ****                  "sbrc %[theta],6         \n\t"
 165:./lib/lib8tion/trig8.h ****                  "com  %[offset]           \n\t"
 166:./lib/lib8tion/trig8.h ****                  : [theta] "+r" (theta), [offset] "+r" (offset)
 167:./lib/lib8tion/trig8.h ****                  );
 168:./lib/lib8tion/trig8.h **** 
 169:./lib/lib8tion/trig8.h ****     offset &= 0x3F; // 0..63
 187               		.loc 3 169 5 view .LVU47
 170:./lib/lib8tion/trig8.h **** 
 171:./lib/lib8tion/trig8.h ****     uint8_t secoffset  = offset & 0x0F; // 0..15
 188               		.loc 3 171 5 view .LVU48
 189               		.loc 3 171 13 is_stmt 0 view .LVU49
 190               	/* #NOAPP */
 191 0006 2E2F      		mov r18,r30
 192 0008 2F70      		andi r18,lo8(15)
 193               	.LVL15:
 172:./lib/lib8tion/trig8.h ****     if( theta & 0x40) secoffset++;
 194               		.loc 3 172 5 is_stmt 1 view .LVU50
 195               		.loc 3 172 7 is_stmt 0 view .LVU51
 196 000a 86FD      		sbrc r24,6
 197               		.loc 3 172 23 is_stmt 1 discriminator 1 view .LVU52
 198               		.loc 3 172 32 is_stmt 0 discriminator 1 view .LVU53
 199 000c 2F5F      		subi r18,lo8(-(1))
 200               	.LVL16:
 201               	.L15:
 173:./lib/lib8tion/trig8.h **** 
 174:./lib/lib8tion/trig8.h ****     uint8_t m16; uint8_t b;
 202               		.loc 3 174 5 is_stmt 1 view .LVU54
 203               		.loc 3 174 18 view .LVU55
 175:./lib/lib8tion/trig8.h **** 
 176:./lib/lib8tion/trig8.h ****     uint8_t section = offset >> 4; // 0..3
 204               		.loc 3 176 5 view .LVU56
 177:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 205               		.loc 3 177 5 view .LVU57
 178:./lib/lib8tion/trig8.h **** 
 179:./lib/lib8tion/trig8.h ****     const uint8_t* p = b_m16_interleave;
 206               		.loc 3 179 5 view .LVU58
 180:./lib/lib8tion/trig8.h ****     p += s2;
 207               		.loc 3 180 5 view .LVU59
 176:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 208               		.loc 3 176 13 is_stmt 0 view .LVU60
 209 000e E695      		lsr r30
 210 0010 E695      		lsr r30
 211 0012 E695      		lsr r30
 212               	.LVL17:
 177:./lib/lib8tion/trig8.h **** 
 213               		.loc 3 177 13 view .LVU61
 214 0014 E670      		andi r30,lo8(6)
 215               		.loc 3 180 7 view .LVU62
 216 0016 F0E0      		ldi r31,0
 217 0018 E050      		subi r30,lo8(-(b_m16_interleave))
 218 001a F040      		sbci r31,hi8(-(b_m16_interleave))
 219               	.LVL18:
 181:./lib/lib8tion/trig8.h ****     b   = *p;
 220               		.loc 3 181 5 is_stmt 1 view .LVU63
 182:./lib/lib8tion/trig8.h ****     p++;
 221               		.loc 3 182 5 view .LVU64
 183:./lib/lib8tion/trig8.h ****     m16 = *p;
 222               		.loc 3 183 5 view .LVU65
 184:./lib/lib8tion/trig8.h **** 
 185:./lib/lib8tion/trig8.h ****     uint8_t mx;
 223               		.loc 3 185 5 view .LVU66
 186:./lib/lib8tion/trig8.h ****     uint8_t xr1;
 224               		.loc 3 186 5 view .LVU67
 187:./lib/lib8tion/trig8.h ****     asm volatile(
 225               		.loc 3 187 5 view .LVU68
 226 001c 9181      		ldd r25,Z+1
 227               	/* #APP */
 228               	 ;  187 "./lib/lib8tion/trig8.h" 1
 229 001e 929F      		mul r25,r18   
 230 0020 902D      		mov r25,r0              
 231 0022 212D      		mov r18,r1             
 232 0024 1124      		eor  r1, r1               
 233 0026 9295      		swap r25                
 234 0028 9F70      		andi r25,0x0F           
 235 002a 2295      		swap r18               
 236 002c 207F      		andi r18, 0xF0         
 237 002e 922B      		or   r25, r18        
 238               		
 239               	 ;  0 "" 2
 240               	.LVL19:
 188:./lib/lib8tion/trig8.h ****                  "mul %[m16],%[secoffset]   \n\t"
 189:./lib/lib8tion/trig8.h ****                  "mov %[mx],r0              \n\t"
 190:./lib/lib8tion/trig8.h ****                  "mov %[xr1],r1             \n\t"
 191:./lib/lib8tion/trig8.h ****                  "eor  r1, r1               \n\t"
 192:./lib/lib8tion/trig8.h ****                  "swap %[mx]                \n\t"
 193:./lib/lib8tion/trig8.h ****                  "andi %[mx],0x0F           \n\t"
 194:./lib/lib8tion/trig8.h ****                  "swap %[xr1]               \n\t"
 195:./lib/lib8tion/trig8.h ****                  "andi %[xr1], 0xF0         \n\t"
 196:./lib/lib8tion/trig8.h ****                  "or   %[mx], %[xr1]        \n\t"
 197:./lib/lib8tion/trig8.h ****                  : [mx] "=d" (mx), [xr1] "=d" (xr1)
 198:./lib/lib8tion/trig8.h ****                  : [m16] "d" (m16), [secoffset] "d" (secoffset)
 199:./lib/lib8tion/trig8.h ****                  );
 200:./lib/lib8tion/trig8.h **** 
 201:./lib/lib8tion/trig8.h ****     int8_t y = mx + b;
 241               		.loc 3 201 5 view .LVU69
 242               		.loc 3 201 19 is_stmt 0 view .LVU70
 243               	/* #NOAPP */
 244 0030 2081      		ld r18,Z
 245 0032 920F      		add r25,r18
 246               	.LVL20:
 202:./lib/lib8tion/trig8.h ****     if( theta & 0x80 ) y = -y;
 247               		.loc 3 202 5 is_stmt 1 view .LVU71
 248               		.loc 3 202 7 is_stmt 0 view .LVU72
 249 0034 87FD      		sbrc r24,7
 250               		.loc 3 202 24 is_stmt 1 discriminator 1 view .LVU73
 251               		.loc 3 202 26 is_stmt 0 discriminator 1 view .LVU74
 252 0036 9195      		neg r25
 253               	.LVL21:
 254               	.L16:
 203:./lib/lib8tion/trig8.h **** 
 204:./lib/lib8tion/trig8.h ****     y += 128;
 255               		.loc 3 204 5 is_stmt 1 view .LVU75
 205:./lib/lib8tion/trig8.h **** 
 206:./lib/lib8tion/trig8.h ****     return y;
 256               		.loc 3 206 5 view .LVU76
 207:./lib/lib8tion/trig8.h **** }
 257               		.loc 3 207 1 is_stmt 0 view .LVU77
 258 0038 80E8      		ldi r24,lo8(-128)
 259               	.LVL22:
 260               		.loc 3 207 1 view .LVU78
 261 003a 890F      		add r24,r25
 262               	.LVL23:
 263               	/* epilogue start */
 264               		.loc 3 207 1 view .LVU79
 265 003c 0895      		ret
 266               		.cfi_endproc
 267               	.LFE67:
 269               		.section	.text.SOLID_SPLASH_math,"ax",@progbits
 270               	.global	SOLID_SPLASH_math
 272               	SOLID_SPLASH_math:
 273               	.LVL24:
 274               	.LFB104:
 275               		.file 4 "quantum/rgb_matrix_animations/solid_splash_anim.h"
   1:quantum/rgb_matrix_animations/solid_splash_anim.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_splash_anim.h **** #    if !defined(DISABLE_RGB_MATRIX_SOLID_SPLASH) || !defined(DISABLE_RGB_MATRIX_SOLID_MULTISPLASH)
   3:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
   4:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_SPLASH
   5:quantum/rgb_matrix_animations/solid_splash_anim.h **** RGB_MATRIX_EFFECT(SOLID_SPLASH)
   6:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
   7:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
   8:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_MULTISPLASH
   9:quantum/rgb_matrix_animations/solid_splash_anim.h **** RGB_MATRIX_EFFECT(SOLID_MULTISPLASH)
  10:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
  11:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  12:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  13:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  14:quantum/rgb_matrix_animations/solid_splash_anim.h **** HSV SOLID_SPLASH_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
 276               		.loc 4 14 85 is_stmt 1 view -0
 277               		.cfi_startproc
 278               		.loc 4 14 85 is_stmt 0 view .LVU81
 279 0000 EF92      		push r14
 280               	.LCFI0:
 281               		.cfi_def_cfa_offset 3
 282               		.cfi_offset 14, -2
 283 0002 FF92      		push r15
 284               	.LCFI1:
 285               		.cfi_def_cfa_offset 4
 286               		.cfi_offset 15, -3
 287 0004 0F93      		push r16
 288               	.LCFI2:
 289               		.cfi_def_cfa_offset 5
 290               		.cfi_offset 16, -4
 291               	/* prologue: function */
 292               	/* frame size = 0 */
 293               	/* stack size = 3 */
 294               	.L__stack_usage = 3
  15:quantum/rgb_matrix_animations/solid_splash_anim.h ****     uint16_t effect = tick - dist;
 295               		.loc 4 15 5 is_stmt 1 view .LVU82
 296               	.LVL25:
  16:quantum/rgb_matrix_animations/solid_splash_anim.h ****     if (effect > 255) effect = 255;
 297               		.loc 4 16 5 view .LVU83
  17:quantum/rgb_matrix_animations/solid_splash_anim.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 298               		.loc 4 17 5 view .LVU84
 299               	.LBB28:
 300               	.LBI28:
  23:./lib/lib8tion/math8.h **** {
 301               		.loc 2 23 34 view .LVU85
 302               	.LBB29:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 303               		.loc 2 30 5 view .LVU86
 304               	.LBE29:
 305               	.LBE28:
 306               		.loc 4 17 13 is_stmt 0 view .LVU87
 307 0006 9701      		movw r18,r14
 308               	.LVL26:
 309               		.loc 4 17 13 view .LVU88
 310 0008 201B      		sub r18,r16
 311 000a 3109      		sbc r19,__zero_reg__
 312               	.LVL27:
 313               		.loc 4 17 13 view .LVU89
 314 000c 2F3F      		cpi r18,-1
 315 000e 3105      		cpc r19,__zero_reg__
 316 0010 01F0      		breq .L21
 317 0012 00F0      		brlo .L21
 318 0014 2FEF      		ldi r18,lo8(-1)
 319 0016 30E0      		ldi r19,0
 320               	.LVL28:
 321               	.L21:
 322               		.loc 4 17 13 view .LVU90
 323 0018 2095      		com r18
 324               	.LBB31:
 325               	.LBB30:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 326               		.loc 2 30 5 view .LVU91
 327 001a 382F      		mov r19,r24
 328               	/* #APP */
 329               	 ;  30 "./lib/lib8tion/math8.h" 1
 330 001c 320F      		add r19, r18    
 331 001e 00F4      		brcc L_273     
 332 0020 3FEF      		ldi r19, 0xFF  
 333               		L_273: 
 334               	 ;  0 "" 2
 335               	/* #NOAPP */
 336 0022 832F      		mov r24,r19
 337               	.LVL29:
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 338               		.loc 2 43 5 is_stmt 1 view .LVU92
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 339               		.loc 2 43 5 is_stmt 0 view .LVU93
 340               	.LBE30:
 341               	.LBE31:
  18:quantum/rgb_matrix_animations/solid_splash_anim.h ****     return hsv;
 342               		.loc 4 18 5 is_stmt 1 view .LVU94
 343               	.LVL30:
 344               	/* epilogue start */
  19:quantum/rgb_matrix_animations/solid_splash_anim.h **** }
 345               		.loc 4 19 1 is_stmt 0 view .LVU95
 346 0024 0F91      		pop r16
 347               	.LVL31:
 348               		.loc 4 19 1 view .LVU96
 349 0026 FF90      		pop r15
 350 0028 EF90      		pop r14
 351               	.LVL32:
 352               		.loc 4 19 1 view .LVU97
 353 002a 0895      		ret
 354               		.cfi_endproc
 355               	.LFE104:
 357               		.section	.text.rgb_matrix_hsv_to_rgb,"ax",@progbits
 358               		.weak	rgb_matrix_hsv_to_rgb
 360               	rgb_matrix_hsv_to_rgb:
 361               	.LVL33:
 362               	.LFB96:
 363               		.file 5 "quantum/rgb_matrix.c"
   1:quantum/rgb_matrix.c **** /* Copyright 2017 Jason Williams
   2:quantum/rgb_matrix.c ****  * Copyright 2017 Jack Humbert
   3:quantum/rgb_matrix.c ****  * Copyright 2018 Yiancar
   4:quantum/rgb_matrix.c ****  *
   5:quantum/rgb_matrix.c ****  * This program is free software: you can redistribute it and/or modify
   6:quantum/rgb_matrix.c ****  * it under the terms of the GNU General Public License as published by
   7:quantum/rgb_matrix.c ****  * the Free Software Foundation, either version 2 of the License, or
   8:quantum/rgb_matrix.c ****  * (at your option) any later version.
   9:quantum/rgb_matrix.c ****  *
  10:quantum/rgb_matrix.c ****  * This program is distributed in the hope that it will be useful,
  11:quantum/rgb_matrix.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/rgb_matrix.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/rgb_matrix.c ****  * GNU General Public License for more details.
  14:quantum/rgb_matrix.c ****  *
  15:quantum/rgb_matrix.c ****  * You should have received a copy of the GNU General Public License
  16:quantum/rgb_matrix.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/rgb_matrix.c ****  */
  18:quantum/rgb_matrix.c **** 
  19:quantum/rgb_matrix.c **** #include "rgb_matrix.h"
  20:quantum/rgb_matrix.c **** #include "progmem.h"
  21:quantum/rgb_matrix.c **** #include "config.h"
  22:quantum/rgb_matrix.c **** #include "eeprom.h"
  23:quantum/rgb_matrix.c **** #include <string.h>
  24:quantum/rgb_matrix.c **** #include <math.h>
  25:quantum/rgb_matrix.c **** 
  26:quantum/rgb_matrix.c **** #include <lib/lib8tion/lib8tion.h>
  27:quantum/rgb_matrix.c **** 
  28:quantum/rgb_matrix.c **** #ifndef RGB_MATRIX_CENTER
  29:quantum/rgb_matrix.c **** const led_point_t k_rgb_matrix_center = {112, 32};
  30:quantum/rgb_matrix.c **** #else
  31:quantum/rgb_matrix.c **** const led_point_t k_rgb_matrix_center = RGB_MATRIX_CENTER;
  32:quantum/rgb_matrix.c **** #endif
  33:quantum/rgb_matrix.c **** 
  34:quantum/rgb_matrix.c **** __attribute__((weak)) RGB rgb_matrix_hsv_to_rgb(HSV hsv) { return hsv_to_rgb(hsv); }
 364               		.loc 5 34 58 is_stmt 1 view -0
 365               		.cfi_startproc
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 0 */
 369               	.L__stack_usage = 0
 370               		.loc 5 34 60 view .LVU99
 371               		.loc 5 34 67 is_stmt 0 view .LVU100
 372 0000 0C94 0000 		jmp hsv_to_rgb
 373               	.LVL34:
 374               		.loc 5 34 67 view .LVU101
 375               		.cfi_endproc
 376               	.LFE96:
 378               		.section	.text.eeconfig_read_rgb_matrix,"ax",@progbits
 379               	.global	eeconfig_read_rgb_matrix
 381               	eeconfig_read_rgb_matrix:
 382               	.LFB110:
  35:quantum/rgb_matrix.c **** 
  36:quantum/rgb_matrix.c **** // Generic effect runners
  37:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_dx_dy_dist.h"
  38:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_dx_dy.h"
  39:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_i.h"
  40:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_sin_cos_i.h"
  41:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_reactive.h"
  42:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_reactive_splash.h"
  43:quantum/rgb_matrix.c **** 
  44:quantum/rgb_matrix.c **** // ------------------------------------------
  45:quantum/rgb_matrix.c **** // -----Begin rgb effect includes macros-----
  46:quantum/rgb_matrix.c **** #define RGB_MATRIX_EFFECT(name)
  47:quantum/rgb_matrix.c **** #define RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  48:quantum/rgb_matrix.c **** 
  49:quantum/rgb_matrix.c **** #include "rgb_matrix_animations/rgb_matrix_effects.inc"
  50:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_CUSTOM_KB
  51:quantum/rgb_matrix.c **** #    include "rgb_matrix_kb.inc"
  52:quantum/rgb_matrix.c **** #endif
  53:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_CUSTOM_USER
  54:quantum/rgb_matrix.c **** #    include "rgb_matrix_user.inc"
  55:quantum/rgb_matrix.c **** #endif
  56:quantum/rgb_matrix.c **** 
  57:quantum/rgb_matrix.c **** #undef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  58:quantum/rgb_matrix.c **** #undef RGB_MATRIX_EFFECT
  59:quantum/rgb_matrix.c **** // -----End rgb effect includes macros-------
  60:quantum/rgb_matrix.c **** // ------------------------------------------
  61:quantum/rgb_matrix.c **** 
  62:quantum/rgb_matrix.c **** #if defined(RGB_DISABLE_AFTER_TIMEOUT) && !defined(RGB_DISABLE_TIMEOUT)
  63:quantum/rgb_matrix.c **** #    define RGB_DISABLE_TIMEOUT (RGB_DISABLE_AFTER_TIMEOUT * 1200UL)
  64:quantum/rgb_matrix.c **** #endif
  65:quantum/rgb_matrix.c **** 
  66:quantum/rgb_matrix.c **** #ifndef RGB_DISABLE_TIMEOUT
  67:quantum/rgb_matrix.c **** #    define RGB_DISABLE_TIMEOUT 0
  68:quantum/rgb_matrix.c **** #endif
  69:quantum/rgb_matrix.c **** 
  70:quantum/rgb_matrix.c **** #if RGB_DISABLE_WHEN_USB_SUSPENDED == false
  71:quantum/rgb_matrix.c **** #    undef RGB_DISABLE_WHEN_USB_SUSPENDED
  72:quantum/rgb_matrix.c **** #endif
  73:quantum/rgb_matrix.c **** 
  74:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_MAXIMUM_BRIGHTNESS) || RGB_MATRIX_MAXIMUM_BRIGHTNESS > UINT8_MAX
  75:quantum/rgb_matrix.c **** #    undef RGB_MATRIX_MAXIMUM_BRIGHTNESS
  76:quantum/rgb_matrix.c **** #    define RGB_MATRIX_MAXIMUM_BRIGHTNESS UINT8_MAX
  77:quantum/rgb_matrix.c **** #endif
  78:quantum/rgb_matrix.c **** 
  79:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_HUE_STEP)
  80:quantum/rgb_matrix.c **** #    define RGB_MATRIX_HUE_STEP 8
  81:quantum/rgb_matrix.c **** #endif
  82:quantum/rgb_matrix.c **** 
  83:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_SAT_STEP)
  84:quantum/rgb_matrix.c **** #    define RGB_MATRIX_SAT_STEP 16
  85:quantum/rgb_matrix.c **** #endif
  86:quantum/rgb_matrix.c **** 
  87:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_VAL_STEP)
  88:quantum/rgb_matrix.c **** #    define RGB_MATRIX_VAL_STEP 16
  89:quantum/rgb_matrix.c **** #endif
  90:quantum/rgb_matrix.c **** 
  91:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_SPD_STEP)
  92:quantum/rgb_matrix.c **** #    define RGB_MATRIX_SPD_STEP 16
  93:quantum/rgb_matrix.c **** #endif
  94:quantum/rgb_matrix.c **** 
  95:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_MODE)
  96:quantum/rgb_matrix.c **** #    ifndef DISABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT
  97:quantum/rgb_matrix.c **** #        define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_CYCLE_LEFT_RIGHT
  98:quantum/rgb_matrix.c **** #    else
  99:quantum/rgb_matrix.c **** // fallback to solid colors if RGB_MATRIX_CYCLE_LEFT_RIGHT is disabled in userspace
 100:quantum/rgb_matrix.c **** #        define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_SOLID_COLOR
 101:quantum/rgb_matrix.c **** #    endif
 102:quantum/rgb_matrix.c **** #endif
 103:quantum/rgb_matrix.c **** 
 104:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_HUE)
 105:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_HUE 0
 106:quantum/rgb_matrix.c **** #endif
 107:quantum/rgb_matrix.c **** 
 108:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_SAT)
 109:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_SAT UINT8_MAX
 110:quantum/rgb_matrix.c **** #endif
 111:quantum/rgb_matrix.c **** 
 112:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_VAL)
 113:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_VAL RGB_MATRIX_MAXIMUM_BRIGHTNESS
 114:quantum/rgb_matrix.c **** #endif
 115:quantum/rgb_matrix.c **** 
 116:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_SPD)
 117:quantum/rgb_matrix.c **** #    define RGB_MATRIX_STARTUP_SPD UINT8_MAX / 2
 118:quantum/rgb_matrix.c **** #endif
 119:quantum/rgb_matrix.c **** 
 120:quantum/rgb_matrix.c **** // globals
 121:quantum/rgb_matrix.c **** rgb_config_t rgb_matrix_config;  // TODO: would like to prefix this with g_ for global consistancy,
 122:quantum/rgb_matrix.c **** uint32_t     g_rgb_timer;
 123:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_FRAMEBUFFER_EFFECTS
 124:quantum/rgb_matrix.c **** uint8_t g_rgb_frame_buffer[MATRIX_ROWS][MATRIX_COLS] = {{0}};
 125:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_FRAMEBUFFER_EFFECTS
 126:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 127:quantum/rgb_matrix.c **** last_hit_t g_last_hit_tracker;
 128:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 129:quantum/rgb_matrix.c **** 
 130:quantum/rgb_matrix.c **** // internals
 131:quantum/rgb_matrix.c **** static bool            suspend_state     = false;
 132:quantum/rgb_matrix.c **** static uint8_t         rgb_last_enable   = UINT8_MAX;
 133:quantum/rgb_matrix.c **** static uint8_t         rgb_last_effect   = UINT8_MAX;
 134:quantum/rgb_matrix.c **** static effect_params_t rgb_effect_params = {0, LED_FLAG_ALL, false};
 135:quantum/rgb_matrix.c **** static rgb_task_states rgb_task_state    = SYNCING;
 136:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 137:quantum/rgb_matrix.c **** static uint32_t rgb_anykey_timer;
 138:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 139:quantum/rgb_matrix.c **** 
 140:quantum/rgb_matrix.c **** // double buffers
 141:quantum/rgb_matrix.c **** static uint32_t rgb_timer_buffer;
 142:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 143:quantum/rgb_matrix.c **** static last_hit_t last_hit_buffer;
 144:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 145:quantum/rgb_matrix.c **** 
 146:quantum/rgb_matrix.c **** // split rgb matrix
 147:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_SPLIT)
 148:quantum/rgb_matrix.c **** const uint8_t k_rgb_matrix_split[2] = RGB_MATRIX_SPLIT;
 149:quantum/rgb_matrix.c **** #endif
 150:quantum/rgb_matrix.c **** 
 151:quantum/rgb_matrix.c **** void eeconfig_read_rgb_matrix(void) { eeprom_read_block(&rgb_matrix_config, EECONFIG_RGB_MATRIX, si
 383               		.loc 5 151 37 is_stmt 1 view -0
 384               		.cfi_startproc
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 0 */
 388               	.L__stack_usage = 0
 389               		.loc 5 151 39 view .LVU103
 390 0000 46E0      		ldi r20,lo8(6)
 391 0002 50E0      		ldi r21,0
 392 0004 6CE1      		ldi r22,lo8(28)
 393 0006 70E0      		ldi r23,0
 394 0008 80E0      		ldi r24,lo8(rgb_matrix_config)
 395 000a 90E0      		ldi r25,hi8(rgb_matrix_config)
 396 000c 0C94 0000 		jmp eeprom_read_block
 397               	.LVL35:
 398               		.cfi_endproc
 399               	.LFE110:
 401               		.section	.text.eeconfig_update_rgb_matrix,"ax",@progbits
 402               	.global	eeconfig_update_rgb_matrix
 404               	eeconfig_update_rgb_matrix:
 405               	.LFB111:
 152:quantum/rgb_matrix.c **** 
 153:quantum/rgb_matrix.c **** void eeconfig_update_rgb_matrix(void) { eeprom_update_block(&rgb_matrix_config, EECONFIG_RGB_MATRIX
 406               		.loc 5 153 39 view -0
 407               		.cfi_startproc
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
 412               		.loc 5 153 41 view .LVU105
 413 0000 46E0      		ldi r20,lo8(6)
 414 0002 50E0      		ldi r21,0
 415 0004 6CE1      		ldi r22,lo8(28)
 416 0006 70E0      		ldi r23,0
 417 0008 80E0      		ldi r24,lo8(rgb_matrix_config)
 418 000a 90E0      		ldi r25,hi8(rgb_matrix_config)
 419 000c 0C94 0000 		jmp eeprom_update_block
 420               	.LVL36:
 421               		.cfi_endproc
 422               	.LFE111:
 424               		.section	.rodata
 425               	.LC0:
 426 0000 00        		.byte	0
 427 0001 FF        		.byte	-1
 428 0002 FF        		.byte	-1
 429               		.section	.text.eeconfig_update_rgb_matrix_default,"ax",@progbits
 430               	.global	eeconfig_update_rgb_matrix_default
 432               	eeconfig_update_rgb_matrix_default:
 433               	.LFB112:
 154:quantum/rgb_matrix.c **** 
 155:quantum/rgb_matrix.c **** void eeconfig_update_rgb_matrix_default(void) {
 434               		.loc 5 155 47 view -0
 435               		.cfi_startproc
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 156:quantum/rgb_matrix.c ****     dprintf("eeconfig_update_rgb_matrix_default\n");
 440               		.loc 5 156 52 view .LVU107
 157:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 441               		.loc 5 157 5 view .LVU108
 158:quantum/rgb_matrix.c ****     rgb_matrix_config.mode   = RGB_MATRIX_STARTUP_MODE;
 442               		.loc 5 158 5 view .LVU109
 157:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 443               		.loc 5 157 30 is_stmt 0 view .LVU110
 444 0000 E0E0      		ldi r30,lo8(rgb_matrix_config)
 445 0002 F0E0      		ldi r31,hi8(rgb_matrix_config)
 446 0004 85E0      		ldi r24,lo8(5)
 447 0006 8083      		st Z,r24
 159:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv    = (HSV){RGB_MATRIX_STARTUP_HUE, RGB_MATRIX_STARTUP_SAT, RGB_MATRIX_STA
 448               		.loc 5 159 5 is_stmt 1 view .LVU111
 449               		.loc 5 159 30 is_stmt 0 view .LVU112
 450 0008 8091 0000 		lds r24,.LC0
 451 000c 9091 0000 		lds r25,.LC0+1
 452 0010 A091 0000 		lds r26,.LC0+2
 453 0014 8183      		std Z+1,r24
 454 0016 9283      		std Z+2,r25
 455 0018 A383      		std Z+3,r26
 160:quantum/rgb_matrix.c ****     rgb_matrix_config.speed  = RGB_MATRIX_STARTUP_SPD;
 456               		.loc 5 160 5 is_stmt 1 view .LVU113
 457               		.loc 5 160 30 is_stmt 0 view .LVU114
 458 001a 8FE7      		ldi r24,lo8(127)
 459 001c 8483      		std Z+4,r24
 161:quantum/rgb_matrix.c ****     rgb_matrix_config.flags  = LED_FLAG_ALL;
 460               		.loc 5 161 5 is_stmt 1 view .LVU115
 461               		.loc 5 161 30 is_stmt 0 view .LVU116
 462 001e 8FEF      		ldi r24,lo8(-1)
 463 0020 8583      		std Z+5,r24
 162:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 464               		.loc 5 162 5 is_stmt 1 view .LVU117
 465 0022 0C94 0000 		jmp eeconfig_update_rgb_matrix
 466               	.LVL37:
 467               		.cfi_endproc
 468               	.LFE112:
 470               		.section	.text.eeconfig_debug_rgb_matrix,"ax",@progbits
 471               	.global	eeconfig_debug_rgb_matrix
 473               	eeconfig_debug_rgb_matrix:
 474               	.LFB113:
 163:quantum/rgb_matrix.c **** }
 164:quantum/rgb_matrix.c **** 
 165:quantum/rgb_matrix.c **** void eeconfig_debug_rgb_matrix(void) {
 475               		.loc 5 165 38 view -0
 476               		.cfi_startproc
 477               	/* prologue: function */
 478               	/* frame size = 0 */
 479               	/* stack size = 0 */
 480               	.L__stack_usage = 0
 166:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config EEPROM\n");
 481               		.loc 5 166 42 view .LVU119
 167:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.enable = %d\n", rgb_matrix_config.enable);
 482               		.loc 5 167 73 view .LVU120
 168:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.mode = %d\n", rgb_matrix_config.mode);
 483               		.loc 5 168 69 view .LVU121
 169:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.h = %d\n", rgb_matrix_config.hsv.h);
 484               		.loc 5 169 71 view .LVU122
 170:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.s = %d\n", rgb_matrix_config.hsv.s);
 485               		.loc 5 170 71 view .LVU123
 171:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.v = %d\n", rgb_matrix_config.hsv.v);
 486               		.loc 5 171 71 view .LVU124
 172:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.speed = %d\n", rgb_matrix_config.speed);
 487               		.loc 5 172 71 view .LVU125
 173:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.flags = %d\n", rgb_matrix_config.flags);
 488               		.loc 5 173 71 view .LVU126
 489               	/* epilogue start */
 174:quantum/rgb_matrix.c **** }
 490               		.loc 5 174 1 is_stmt 0 view .LVU127
 491 0000 0895      		ret
 492               		.cfi_endproc
 493               	.LFE113:
 495               		.section	.text.rgb_matrix_map_row_column_to_led_kb,"ax",@progbits
 496               		.weak	rgb_matrix_map_row_column_to_led_kb
 498               	rgb_matrix_map_row_column_to_led_kb:
 499               	.LVL38:
 500               	.LFB114:
 175:quantum/rgb_matrix.c **** 
 176:quantum/rgb_matrix.c **** __attribute__((weak)) uint8_t rgb_matrix_map_row_column_to_led_kb(uint8_t row, uint8_t column, uint
 501               		.loc 5 176 112 is_stmt 1 view -0
 502               		.cfi_startproc
 503               	/* prologue: function */
 504               	/* frame size = 0 */
 505               	/* stack size = 0 */
 506               	.L__stack_usage = 0
 507               		.loc 5 176 114 view .LVU129
 508               		.loc 5 176 1 is_stmt 0 view .LVU130
 509 0000 80E0      		ldi r24,0
 510               	.LVL39:
 511               	/* epilogue start */
 512               		.loc 5 176 1 view .LVU131
 513 0002 0895      		ret
 514               		.cfi_endproc
 515               	.LFE114:
 517               		.section	.text.rgb_matrix_map_row_column_to_led,"ax",@progbits
 518               	.global	rgb_matrix_map_row_column_to_led
 520               	rgb_matrix_map_row_column_to_led:
 521               	.LVL40:
 522               	.LFB115:
 177:quantum/rgb_matrix.c **** 
 178:quantum/rgb_matrix.c **** uint8_t rgb_matrix_map_row_column_to_led(uint8_t row, uint8_t column, uint8_t *led_i) {
 523               		.loc 5 178 87 is_stmt 1 view -0
 524               		.cfi_startproc
 525               		.loc 5 178 87 is_stmt 0 view .LVU133
 526 0000 0F93      		push r16
 527               	.LCFI3:
 528               		.cfi_def_cfa_offset 3
 529               		.cfi_offset 16, -2
 530 0002 1F93      		push r17
 531               	.LCFI4:
 532               		.cfi_def_cfa_offset 4
 533               		.cfi_offset 17, -3
 534 0004 CF93      		push r28
 535               	.LCFI5:
 536               		.cfi_def_cfa_offset 5
 537               		.cfi_offset 28, -4
 538 0006 DF93      		push r29
 539               	.LCFI6:
 540               		.cfi_def_cfa_offset 6
 541               		.cfi_offset 29, -5
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 4 */
 545               	.L__stack_usage = 4
 546 0008 C82F      		mov r28,r24
 547 000a D62F      		mov r29,r22
 548 000c 8A01      		movw r16,r20
 179:quantum/rgb_matrix.c ****     uint8_t led_count = rgb_matrix_map_row_column_to_led_kb(row, column, led_i);
 549               		.loc 5 179 5 is_stmt 1 view .LVU134
 550               		.loc 5 179 25 is_stmt 0 view .LVU135
 551 000e 0E94 0000 		call rgb_matrix_map_row_column_to_led_kb
 552               	.LVL41:
 180:quantum/rgb_matrix.c ****     uint8_t led_index = g_led_config.matrix_co[row][column];
 553               		.loc 5 180 5 is_stmt 1 view .LVU136
 554               		.loc 5 180 13 is_stmt 0 view .LVU137
 555 0012 9CE0      		ldi r25,lo8(12)
 556 0014 C99F      		mul r28,r25
 557 0016 B001      		movw r22,r0
 558 0018 1124      		clr __zero_reg__
 559 001a 6050      		subi r22,lo8(-(g_led_config))
 560 001c 7040      		sbci r23,hi8(-(g_led_config))
 561 001e 6D0F      		add r22,r29
 562 0020 711D      		adc r23,__zero_reg__
 563 0022 FB01      		movw r30,r22
 564 0024 9081      		ld r25,Z
 565               	.LVL42:
 181:quantum/rgb_matrix.c ****     if (led_index != NO_LED) {
 566               		.loc 5 181 5 is_stmt 1 view .LVU138
 567               		.loc 5 181 8 is_stmt 0 view .LVU139
 568 0026 9F3F      		cpi r25,lo8(-1)
 569 0028 01F0      		breq .L28
 182:quantum/rgb_matrix.c ****         led_i[led_count] = led_index;
 570               		.loc 5 182 9 is_stmt 1 view .LVU140
 571               		.loc 5 182 26 is_stmt 0 view .LVU141
 572 002a F801      		movw r30,r16
 573 002c E80F      		add r30,r24
 574 002e F11D      		adc r31,__zero_reg__
 575 0030 9083      		st Z,r25
 183:quantum/rgb_matrix.c ****         led_count++;
 576               		.loc 5 183 9 is_stmt 1 view .LVU142
 577               		.loc 5 183 18 is_stmt 0 view .LVU143
 578 0032 8F5F      		subi r24,lo8(-(1))
 579               	.LVL43:
 184:quantum/rgb_matrix.c ****     }
 185:quantum/rgb_matrix.c ****     return led_count;
 580               		.loc 5 185 5 is_stmt 1 view .LVU144
 581               	.L28:
 582               	/* epilogue start */
 186:quantum/rgb_matrix.c **** }
 583               		.loc 5 186 1 is_stmt 0 view .LVU145
 584 0034 DF91      		pop r29
 585               	.LVL44:
 586               		.loc 5 186 1 view .LVU146
 587 0036 CF91      		pop r28
 588               	.LVL45:
 589               		.loc 5 186 1 view .LVU147
 590 0038 1F91      		pop r17
 591 003a 0F91      		pop r16
 592               	.LVL46:
 593               		.loc 5 186 1 view .LVU148
 594 003c 0895      		ret
 595               		.cfi_endproc
 596               	.LFE115:
 598               		.section	.text.rgb_matrix_update_pwm_buffers,"ax",@progbits
 599               	.global	rgb_matrix_update_pwm_buffers
 601               	rgb_matrix_update_pwm_buffers:
 602               	.LFB116:
 187:quantum/rgb_matrix.c **** 
 188:quantum/rgb_matrix.c **** void rgb_matrix_update_pwm_buffers(void) { rgb_matrix_driver.flush(); }
 603               		.loc 5 188 42 is_stmt 1 view -0
 604               		.cfi_startproc
 605               	/* prologue: function */
 606               	/* frame size = 0 */
 607               	/* stack size = 0 */
 608               	.L__stack_usage = 0
 609               		.loc 5 188 44 view .LVU150
 610 0000 E091 0000 		lds r30,rgb_matrix_driver+6
 611 0004 F091 0000 		lds r31,rgb_matrix_driver+6+1
 612 0008 0994      		ijmp
 613               	.LVL47:
 614               		.cfi_endproc
 615               	.LFE116:
 617               		.section	.text.rgb_matrix_set_color,"ax",@progbits
 618               	.global	rgb_matrix_set_color
 620               	rgb_matrix_set_color:
 621               	.LVL48:
 622               	.LFB117:
 189:quantum/rgb_matrix.c **** 
 190:quantum/rgb_matrix.c **** void rgb_matrix_set_color(int index, uint8_t red, uint8_t green, uint8_t blue) {
 623               		.loc 5 190 80 view -0
 624               		.cfi_startproc
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 0 */
 628               	.L__stack_usage = 0
 191:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_SPLIT)
 192:quantum/rgb_matrix.c ****     if (!is_keyboard_left() && index >= k_rgb_matrix_split[0])
 193:quantum/rgb_matrix.c ****         rgb_matrix_driver.set_color(index - k_rgb_matrix_split[0], red, green, blue);
 194:quantum/rgb_matrix.c ****     else if (is_keyboard_left() && index < k_rgb_matrix_split[0])
 195:quantum/rgb_matrix.c **** #endif
 196:quantum/rgb_matrix.c ****         rgb_matrix_driver.set_color(index, red, green, blue);
 629               		.loc 5 196 9 view .LVU152
 630 0000 E091 0000 		lds r30,rgb_matrix_driver+2
 631 0004 F091 0000 		lds r31,rgb_matrix_driver+2+1
 632 0008 0994      		ijmp
 633               	.LVL49:
 634               		.loc 5 196 9 is_stmt 0 view .LVU153
 635               		.cfi_endproc
 636               	.LFE117:
 638               		.section	.text.effect_runner_dx_dy_dist,"ax",@progbits
 639               	.global	effect_runner_dx_dy_dist
 641               	effect_runner_dx_dy_dist:
 642               	.LVL50:
 643               	.LFB97:
 644               		.file 6 "quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h"
   1:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** typedef HSV (*dx_dy_dist_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** bool effect_runner_dx_dy_dist(effect_params_t* params, dx_dy_dist_f effect_func) {
 645               		.loc 6 5 82 is_stmt 1 view -0
 646               		.cfi_startproc
 647               		.loc 6 5 82 is_stmt 0 view .LVU155
 648 0000 3F92      		push r3
 649               	.LCFI7:
 650               		.cfi_def_cfa_offset 3
 651               		.cfi_offset 3, -2
 652 0002 4F92      		push r4
 653               	.LCFI8:
 654               		.cfi_def_cfa_offset 4
 655               		.cfi_offset 4, -3
 656 0004 5F92      		push r5
 657               	.LCFI9:
 658               		.cfi_def_cfa_offset 5
 659               		.cfi_offset 5, -4
 660 0006 6F92      		push r6
 661               	.LCFI10:
 662               		.cfi_def_cfa_offset 6
 663               		.cfi_offset 6, -5
 664 0008 7F92      		push r7
 665               	.LCFI11:
 666               		.cfi_def_cfa_offset 7
 667               		.cfi_offset 7, -6
 668 000a 8F92      		push r8
 669               	.LCFI12:
 670               		.cfi_def_cfa_offset 8
 671               		.cfi_offset 8, -7
 672 000c 9F92      		push r9
 673               	.LCFI13:
 674               		.cfi_def_cfa_offset 9
 675               		.cfi_offset 9, -8
 676 000e AF92      		push r10
 677               	.LCFI14:
 678               		.cfi_def_cfa_offset 10
 679               		.cfi_offset 10, -9
 680 0010 BF92      		push r11
 681               	.LCFI15:
 682               		.cfi_def_cfa_offset 11
 683               		.cfi_offset 11, -10
 684 0012 CF92      		push r12
 685               	.LCFI16:
 686               		.cfi_def_cfa_offset 12
 687               		.cfi_offset 12, -11
 688 0014 DF92      		push r13
 689               	.LCFI17:
 690               		.cfi_def_cfa_offset 13
 691               		.cfi_offset 13, -12
 692 0016 EF92      		push r14
 693               	.LCFI18:
 694               		.cfi_def_cfa_offset 14
 695               		.cfi_offset 14, -13
 696 0018 FF92      		push r15
 697               	.LCFI19:
 698               		.cfi_def_cfa_offset 15
 699               		.cfi_offset 15, -14
 700 001a 0F93      		push r16
 701               	.LCFI20:
 702               		.cfi_def_cfa_offset 16
 703               		.cfi_offset 16, -15
 704 001c 1F93      		push r17
 705               	.LCFI21:
 706               		.cfi_def_cfa_offset 17
 707               		.cfi_offset 17, -16
 708 001e CF93      		push r28
 709               	.LCFI22:
 710               		.cfi_def_cfa_offset 18
 711               		.cfi_offset 28, -17
 712 0020 DF93      		push r29
 713               	.LCFI23:
 714               		.cfi_def_cfa_offset 19
 715               		.cfi_offset 29, -18
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 17 */
 719               	.L__stack_usage = 17
 720 0022 3C01      		movw r6,r24
 721 0024 2B01      		movw r4,r22
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 722               		.loc 6 6 5 is_stmt 1 view .LVU156
 723 0026 FC01      		movw r30,r24
 724 0028 C081      		ld r28,Z
 725 002a 8BE0      		ldi r24,lo8(11)
 726               	.LVL51:
 727               		.loc 6 6 5 is_stmt 0 view .LVU157
 728 002c C89F      		mul r28,r24
 729 002e C02D      		mov r28,r0
 730 0030 1124      		clr r1
 731               	.LVL52:
 732               		.loc 6 6 5 is_stmt 1 view .LVU158
 733 0032 1BE0      		ldi r17,lo8(11)
 734 0034 1C0F      		add r17,r28
 735               	.LVL53:
 736               		.loc 6 6 5 view .LVU159
 737 0036 F12E      		mov r15,r17
 738 0038 1633      		cpi r17,lo8(54)
 739 003a 00F0      		brlo .L36
 740 003c 35E3      		ldi r19,lo8(53)
 741 003e F32E      		mov r15,r19
 742               	.L36:
 743               	.LVL54:
 744               		.loc 6 6 44 view .LVU160
   7:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     uint8_t time = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 2);
 745               		.loc 6 8 5 view .LVU161
 746               		.loc 6 8 20 is_stmt 0 view .LVU162
 747 0040 6091 0000 		lds r22,rgb_matrix_config+4
 748               	.LVL55:
 749               		.loc 6 8 20 view .LVU163
 750 0044 6695      		lsr r22
 751 0046 8091 0000 		lds r24,g_rgb_timer
 752 004a 9091 0000 		lds r25,g_rgb_timer+1
 753 004e 0E94 0000 		call scale16by8
 754               	.LVL56:
 755 0052 382E      		mov r3,r24
 756               	.LVL57:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 757               		.loc 6 9 5 is_stmt 1 view .LVU164
 758               	.LBB32:
 759               		.loc 6 9 10 view .LVU165
 760               		.loc 6 9 10 is_stmt 0 view .LVU166
 761 0054 D0E0      		ldi r29,0
 762 0056 CE01      		movw r24,r28
 763 0058 880F      		lsl r24
 764 005a 991F      		rol r25
 765 005c 9C01      		movw r18,r24
 766 005e 2050      		subi r18,lo8(-(g_led_config))
 767 0060 3040      		sbci r19,hi8(-(g_led_config))
 768 0062 6901      		movw r12,r18
 769               	.LVL58:
 770               	.L37:
 771               		.loc 6 9 31 is_stmt 1 discriminator 1 view .LVU167
 772               		.loc 6 9 5 is_stmt 0 discriminator 1 view .LVU168
 773 0064 CF15      		cp r28,r15
 774 0066 00F0      		brlo .L40
 775               	.LBE32:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time)
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  16:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
  17:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     return led_max < DRIVER_LED_TOTAL;
 776               		.loc 6 17 5 is_stmt 1 view .LVU169
 777               		.loc 6 17 20 is_stmt 0 view .LVU170
 778 0068 81E0      		ldi r24,lo8(1)
 779 006a 1533      		cpi r17,lo8(53)
 780 006c 00F0      		brlo .L41
 781 006e 80E0      		ldi r24,0
 782               	.L41:
 783               	/* epilogue start */
  18:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** }
 784               		.loc 6 18 1 view .LVU171
 785 0070 DF91      		pop r29
 786 0072 CF91      		pop r28
 787               	.LVL59:
 788               		.loc 6 18 1 view .LVU172
 789 0074 1F91      		pop r17
 790 0076 0F91      		pop r16
 791 0078 FF90      		pop r15
 792               	.LVL60:
 793               		.loc 6 18 1 view .LVU173
 794 007a EF90      		pop r14
 795 007c DF90      		pop r13
 796 007e CF90      		pop r12
 797 0080 BF90      		pop r11
 798 0082 AF90      		pop r10
 799 0084 9F90      		pop r9
 800 0086 8F90      		pop r8
 801 0088 7F90      		pop r7
 802 008a 6F90      		pop r6
 803               	.LVL61:
 804               		.loc 6 18 1 view .LVU174
 805 008c 5F90      		pop r5
 806 008e 4F90      		pop r4
 807               	.LVL62:
 808               		.loc 6 18 1 view .LVU175
 809 0090 3F90      		pop r3
 810               	.LVL63:
 811               		.loc 6 18 1 view .LVU176
 812 0092 0895      		ret
 813               	.LVL64:
 814               	.L40:
 815               	.LBB34:
 816               	.LBB33:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 817               		.loc 6 10 9 is_stmt 1 view .LVU177
 818 0094 FE01      		movw r30,r28
 819 0096 E050      		subi r30,lo8(-(g_led_config+154))
 820 0098 F040      		sbci r31,hi8(-(g_led_config+154))
 821 009a 8081      		ld r24,Z
 822 009c F301      		movw r30,r6
 823 009e 9181      		ldd r25,Z+1
 824 00a0 8923      		and r24,r25
 825 00a2 01F0      		breq .L39
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
 826               		.loc 6 11 9 view .LVU178
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
 827               		.loc 6 11 45 is_stmt 0 view .LVU179
 828 00a4 F601      		movw r30,r12
 829 00a6 80A9      		ldd r24,Z+48
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
 830               		.loc 6 11 17 view .LVU180
 831 00a8 282F      		mov r18,r24
 832 00aa 2057      		subi r18,112
 833 00ac 330B      		sbc r19,r19
 834 00ae 5901      		movw r10,r18
 835               	.LVL65:
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 836               		.loc 6 12 9 is_stmt 1 view .LVU181
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 837               		.loc 6 12 45 is_stmt 0 view .LVU182
 838 00b0 81A9      		ldd r24,Z+49
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 839               		.loc 6 12 17 view .LVU183
 840 00b2 E82F      		mov r30,r24
 841 00b4 E052      		subi r30,32
 842 00b6 FF0B      		sbc r31,r31
 843 00b8 4F01      		movw r8,r30
 844               	.LVL66:
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time)
 845               		.loc 6 13 9 is_stmt 1 view .LVU184
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time)
 846               		.loc 6 13 34 is_stmt 0 view .LVU185
 847 00ba AA9C      		mul r10,r10
 848 00bc 9001      		movw r18,r0
 849 00be AB9C      		mul r10,r11
 850 00c0 300D      		add r19,r0
 851 00c2 300D      		add r19,r0
 852 00c4 1124      		clr r1
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time)
 853               		.loc 6 13 44 view .LVU186
 854 00c6 EE9F      		mul r30,r30
 855 00c8 C001      		movw r24,r0
 856 00ca EF9F      		mul r30,r31
 857 00cc 900D      		add r25,r0
 858 00ce 900D      		add r25,r0
 859 00d0 1124      		clr r1
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time)
 860               		.loc 6 13 24 view .LVU187
 861 00d2 820F      		add r24,r18
 862 00d4 931F      		adc r25,r19
 863 00d6 0E94 0000 		call sqrt16
 864               	.LVL67:
 865 00da 082F      		mov r16,r24
 866               	.LVL68:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 867               		.loc 6 14 9 is_stmt 1 view .LVU188
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 868               		.loc 6 14 24 is_stmt 0 view .LVU189
 869 00dc 6091 0000 		lds r22,rgb_matrix_config+1
 870 00e0 7091 0000 		lds r23,rgb_matrix_config+1+1
 871 00e4 8091 0000 		lds r24,rgb_matrix_config+1+2
 872 00e8 E32C      		mov r14,r3
 873 00ea 9401      		movw r18,r8
 874 00ec A501      		movw r20,r10
 875 00ee F201      		movw r30,r4
 876 00f0 0995      		icall
 877               	.LVL69:
 878 00f2 0E94 0000 		call rgb_matrix_hsv_to_rgb
 879               	.LVL70:
 880 00f6 462F      		mov r20,r22
 881               	.LVL71:
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 882               		.loc 6 15 9 is_stmt 1 view .LVU190
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 883               		.loc 6 15 9 is_stmt 0 view .LVU191
 884 00f8 282F      		mov r18,r24
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 885               		.loc 6 15 9 view .LVU192
 886 00fa 672F      		mov r22,r23
 887 00fc CE01      		movw r24,r28
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 888               		.loc 6 15 9 view .LVU193
 889 00fe 0E94 0000 		call rgb_matrix_set_color
 890               	.LVL72:
 891               	.L39:
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 892               		.loc 6 15 9 view .LVU194
 893               	.LBE33:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 894               		.loc 6 9 44 is_stmt 1 discriminator 2 view .LVU195
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 895               		.loc 6 9 44 is_stmt 0 discriminator 2 view .LVU196
 896 0102 F2E0      		ldi r31,2
 897 0104 CF0E      		add r12,r31
 898 0106 D11C      		adc r13,__zero_reg__
 899 0108 2196      		adiw r28,1
 900               	.LVL73:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 901               		.loc 6 9 44 discriminator 2 view .LVU197
 902 010a 00C0      		rjmp .L37
 903               	.LBE34:
 904               		.cfi_endproc
 905               	.LFE97:
 907               		.section	.text.effect_runner_dx_dy,"ax",@progbits
 908               	.global	effect_runner_dx_dy
 910               	effect_runner_dx_dy:
 911               	.LVL74:
 912               	.LFB98:
 913               		.file 7 "quantum/rgb_matrix_runners/effect_runner_dx_dy.h"
   1:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** typedef HSV (*dx_dy_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** bool effect_runner_dx_dy(effect_params_t* params, dx_dy_f effect_func) {
 914               		.loc 7 5 72 is_stmt 1 view -0
 915               		.cfi_startproc
 916               		.loc 7 5 72 is_stmt 0 view .LVU199
 917 0000 8F92      		push r8
 918               	.LCFI24:
 919               		.cfi_def_cfa_offset 3
 920               		.cfi_offset 8, -2
 921 0002 9F92      		push r9
 922               	.LCFI25:
 923               		.cfi_def_cfa_offset 4
 924               		.cfi_offset 9, -3
 925 0004 AF92      		push r10
 926               	.LCFI26:
 927               		.cfi_def_cfa_offset 5
 928               		.cfi_offset 10, -4
 929 0006 BF92      		push r11
 930               	.LCFI27:
 931               		.cfi_def_cfa_offset 6
 932               		.cfi_offset 11, -5
 933 0008 CF92      		push r12
 934               	.LCFI28:
 935               		.cfi_def_cfa_offset 7
 936               		.cfi_offset 12, -6
 937 000a DF92      		push r13
 938               	.LCFI29:
 939               		.cfi_def_cfa_offset 8
 940               		.cfi_offset 13, -7
 941 000c EF92      		push r14
 942               	.LCFI30:
 943               		.cfi_def_cfa_offset 9
 944               		.cfi_offset 14, -8
 945 000e FF92      		push r15
 946               	.LCFI31:
 947               		.cfi_def_cfa_offset 10
 948               		.cfi_offset 15, -9
 949 0010 0F93      		push r16
 950               	.LCFI32:
 951               		.cfi_def_cfa_offset 11
 952               		.cfi_offset 16, -10
 953 0012 1F93      		push r17
 954               	.LCFI33:
 955               		.cfi_def_cfa_offset 12
 956               		.cfi_offset 17, -11
 957 0014 CF93      		push r28
 958               	.LCFI34:
 959               		.cfi_def_cfa_offset 13
 960               		.cfi_offset 28, -12
 961 0016 DF93      		push r29
 962               	.LCFI35:
 963               		.cfi_def_cfa_offset 14
 964               		.cfi_offset 29, -13
 965               	/* prologue: function */
 966               	/* frame size = 0 */
 967               	/* stack size = 12 */
 968               	.L__stack_usage = 12
 969 0018 5C01      		movw r10,r24
 970 001a 6B01      		movw r12,r22
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 971               		.loc 7 6 5 is_stmt 1 view .LVU200
 972 001c FC01      		movw r30,r24
 973 001e C081      		ld r28,Z
 974 0020 8BE0      		ldi r24,lo8(11)
 975               	.LVL75:
 976               		.loc 7 6 5 is_stmt 0 view .LVU201
 977 0022 C89F      		mul r28,r24
 978 0024 C02D      		mov r28,r0
 979 0026 1124      		clr r1
 980               	.LVL76:
 981               		.loc 7 6 5 is_stmt 1 view .LVU202
 982 0028 1BE0      		ldi r17,lo8(11)
 983 002a 1C0F      		add r17,r28
 984               	.LVL77:
 985               		.loc 7 6 5 view .LVU203
 986 002c 912E      		mov r9,r17
 987 002e 1633      		cpi r17,lo8(54)
 988 0030 00F0      		brlo .L43
 989 0032 35E3      		ldi r19,lo8(53)
 990 0034 932E      		mov r9,r19
 991               	.L43:
 992               	.LVL78:
 993               		.loc 7 6 44 view .LVU204
   7:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     uint8_t time = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 2);
 994               		.loc 7 8 5 view .LVU205
 995               		.loc 7 8 20 is_stmt 0 view .LVU206
 996 0036 6091 0000 		lds r22,rgb_matrix_config+4
 997               	.LVL79:
 998               		.loc 7 8 20 view .LVU207
 999 003a 6695      		lsr r22
 1000 003c 8091 0000 		lds r24,g_rgb_timer
 1001 0040 9091 0000 		lds r25,g_rgb_timer+1
 1002 0044 0E94 0000 		call scale16by8
 1003               	.LVL80:
 1004 0048 882E      		mov r8,r24
 1005               	.LVL81:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1006               		.loc 7 9 5 is_stmt 1 view .LVU208
 1007               	.LBB35:
 1008               		.loc 7 9 10 view .LVU209
 1009               		.loc 7 9 10 is_stmt 0 view .LVU210
 1010 004a D0E0      		ldi r29,0
 1011 004c CE01      		movw r24,r28
 1012 004e 880F      		lsl r24
 1013 0050 991F      		rol r25
 1014 0052 9C01      		movw r18,r24
 1015 0054 2050      		subi r18,lo8(-(g_led_config))
 1016 0056 3040      		sbci r19,hi8(-(g_led_config))
 1017 0058 7901      		movw r14,r18
 1018               	.LVL82:
 1019               	.L44:
 1020               		.loc 7 9 31 is_stmt 1 discriminator 1 view .LVU211
 1021               		.loc 7 9 5 is_stmt 0 discriminator 1 view .LVU212
 1022 005a C915      		cp r28,r9
 1023 005c 00F0      		brlo .L47
 1024               	.LBE35:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dx  = g_led_config.point[i].x - k_rgb_matrix_center.x;
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
  16:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     return led_max < DRIVER_LED_TOTAL;
 1025               		.loc 7 16 5 is_stmt 1 view .LVU213
 1026               		.loc 7 16 20 is_stmt 0 view .LVU214
 1027 005e 81E0      		ldi r24,lo8(1)
 1028 0060 1533      		cpi r17,lo8(53)
 1029 0062 00F0      		brlo .L48
 1030 0064 80E0      		ldi r24,0
 1031               	.L48:
 1032               	/* epilogue start */
  17:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** }
 1033               		.loc 7 17 1 view .LVU215
 1034 0066 DF91      		pop r29
 1035 0068 CF91      		pop r28
 1036               	.LVL83:
 1037               		.loc 7 17 1 view .LVU216
 1038 006a 1F91      		pop r17
 1039 006c 0F91      		pop r16
 1040 006e FF90      		pop r15
 1041 0070 EF90      		pop r14
 1042 0072 DF90      		pop r13
 1043 0074 CF90      		pop r12
 1044               	.LVL84:
 1045               		.loc 7 17 1 view .LVU217
 1046 0076 BF90      		pop r11
 1047 0078 AF90      		pop r10
 1048               	.LVL85:
 1049               		.loc 7 17 1 view .LVU218
 1050 007a 9F90      		pop r9
 1051               	.LVL86:
 1052               		.loc 7 17 1 view .LVU219
 1053 007c 8F90      		pop r8
 1054               	.LVL87:
 1055               		.loc 7 17 1 view .LVU220
 1056 007e 0895      		ret
 1057               	.LVL88:
 1058               	.L47:
 1059               	.LBB37:
 1060               	.LBB36:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1061               		.loc 7 10 9 is_stmt 1 view .LVU221
 1062 0080 FE01      		movw r30,r28
 1063 0082 E050      		subi r30,lo8(-(g_led_config+154))
 1064 0084 F040      		sbci r31,hi8(-(g_led_config+154))
 1065 0086 8081      		ld r24,Z
 1066 0088 F501      		movw r30,r10
 1067 008a 9181      		ldd r25,Z+1
 1068 008c 8923      		and r24,r25
 1069 008e 01F0      		breq .L46
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
 1070               		.loc 7 11 9 view .LVU222
 1071               	.LVL89:
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
 1072               		.loc 7 12 9 view .LVU223
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1073               		.loc 7 13 9 view .LVU224
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
 1074               		.loc 7 12 44 is_stmt 0 view .LVU225
 1075 0090 F701      		movw r30,r14
 1076 0092 21A9      		ldd r18,Z+49
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
 1077               		.loc 7 12 17 view .LVU226
 1078 0094 2052      		subi r18,32
 1079 0096 330B      		sbc r19,r19
 1080               	.LVL90:
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
 1081               		.loc 7 11 44 view .LVU227
 1082 0098 40A9      		ldd r20,Z+48
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
 1083               		.loc 7 11 17 view .LVU228
 1084 009a 4057      		subi r20,112
 1085 009c 550B      		sbc r21,r21
 1086               	.LVL91:
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1087               		.loc 7 13 23 view .LVU229
 1088 009e 6091 0000 		lds r22,rgb_matrix_config+1
 1089 00a2 7091 0000 		lds r23,rgb_matrix_config+1+1
 1090 00a6 8091 0000 		lds r24,rgb_matrix_config+1+2
 1091 00aa 082D      		mov r16,r8
 1092 00ac F601      		movw r30,r12
 1093 00ae 0995      		icall
 1094               	.LVL92:
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1095               		.loc 7 13 23 view .LVU230
 1096 00b0 0E94 0000 		call rgb_matrix_hsv_to_rgb
 1097               	.LVL93:
 1098 00b4 462F      		mov r20,r22
 1099               	.LVL94:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 1100               		.loc 7 14 9 is_stmt 1 view .LVU231
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 1101               		.loc 7 14 9 is_stmt 0 view .LVU232
 1102 00b6 282F      		mov r18,r24
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 1103               		.loc 7 14 9 view .LVU233
 1104 00b8 672F      		mov r22,r23
 1105 00ba CE01      		movw r24,r28
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 1106               		.loc 7 14 9 view .LVU234
 1107 00bc 0E94 0000 		call rgb_matrix_set_color
 1108               	.LVL95:
 1109               	.L46:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 1110               		.loc 7 14 9 view .LVU235
 1111               	.LBE36:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1112               		.loc 7 9 44 is_stmt 1 discriminator 2 view .LVU236
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1113               		.loc 7 9 44 is_stmt 0 discriminator 2 view .LVU237
 1114 00c0 F2E0      		ldi r31,2
 1115 00c2 EF0E      		add r14,r31
 1116 00c4 F11C      		adc r15,__zero_reg__
 1117 00c6 2196      		adiw r28,1
 1118               	.LVL96:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1119               		.loc 7 9 44 discriminator 2 view .LVU238
 1120 00c8 00C0      		rjmp .L44
 1121               	.LBE37:
 1122               		.cfi_endproc
 1123               	.LFE98:
 1125               		.section	.text.effect_runner_i,"ax",@progbits
 1126               	.global	effect_runner_i
 1128               	effect_runner_i:
 1129               	.LVL97:
 1130               	.LFB99:
 1131               		.file 8 "quantum/rgb_matrix_runners/effect_runner_i.h"
   1:quantum/rgb_matrix_runners/effect_runner_i.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_i.h **** typedef HSV (*i_f)(HSV hsv, uint8_t i, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_i.h **** bool effect_runner_i(effect_params_t* params, i_f effect_func) {
 1132               		.loc 8 5 64 is_stmt 1 view -0
 1133               		.cfi_startproc
 1134               		.loc 8 5 64 is_stmt 0 view .LVU240
 1135 0000 BF92      		push r11
 1136               	.LCFI36:
 1137               		.cfi_def_cfa_offset 3
 1138               		.cfi_offset 11, -2
 1139 0002 CF92      		push r12
 1140               	.LCFI37:
 1141               		.cfi_def_cfa_offset 4
 1142               		.cfi_offset 12, -3
 1143 0004 DF92      		push r13
 1144               	.LCFI38:
 1145               		.cfi_def_cfa_offset 5
 1146               		.cfi_offset 13, -4
 1147 0006 EF92      		push r14
 1148               	.LCFI39:
 1149               		.cfi_def_cfa_offset 6
 1150               		.cfi_offset 14, -5
 1151 0008 FF92      		push r15
 1152               	.LCFI40:
 1153               		.cfi_def_cfa_offset 7
 1154               		.cfi_offset 15, -6
 1155 000a 0F93      		push r16
 1156               	.LCFI41:
 1157               		.cfi_def_cfa_offset 8
 1158               		.cfi_offset 16, -7
 1159 000c 1F93      		push r17
 1160               	.LCFI42:
 1161               		.cfi_def_cfa_offset 9
 1162               		.cfi_offset 17, -8
 1163 000e CF93      		push r28
 1164               	.LCFI43:
 1165               		.cfi_def_cfa_offset 10
 1166               		.cfi_offset 28, -9
 1167 0010 DF93      		push r29
 1168               	.LCFI44:
 1169               		.cfi_def_cfa_offset 11
 1170               		.cfi_offset 29, -10
 1171               	/* prologue: function */
 1172               	/* frame size = 0 */
 1173               	/* stack size = 9 */
 1174               	.L__stack_usage = 9
 1175 0012 6C01      		movw r12,r24
 1176 0014 7B01      		movw r14,r22
   6:quantum/rgb_matrix_runners/effect_runner_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1177               		.loc 8 6 5 is_stmt 1 view .LVU241
 1178 0016 FC01      		movw r30,r24
 1179 0018 C081      		ld r28,Z
 1180 001a 8BE0      		ldi r24,lo8(11)
 1181               	.LVL98:
 1182               		.loc 8 6 5 is_stmt 0 view .LVU242
 1183 001c C89F      		mul r28,r24
 1184 001e C02D      		mov r28,r0
 1185 0020 1124      		clr r1
 1186               	.LVL99:
 1187               		.loc 8 6 5 is_stmt 1 view .LVU243
 1188 0022 1BE0      		ldi r17,lo8(11)
 1189 0024 1C0F      		add r17,r28
 1190               	.LVL100:
 1191               		.loc 8 6 5 view .LVU244
 1192 0026 012F      		mov r16,r17
 1193 0028 1633      		cpi r17,lo8(54)
 1194 002a 00F0      		brlo .L50
 1195 002c 05E3      		ldi r16,lo8(53)
 1196               	.L50:
 1197               	.LVL101:
 1198               		.loc 8 6 44 view .LVU245
   7:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_i.h ****     uint8_t time = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 4);
 1199               		.loc 8 8 5 view .LVU246
 1200               		.loc 8 8 20 is_stmt 0 view .LVU247
 1201 002e 6091 0000 		lds r22,rgb_matrix_config+4
 1202               	.LVL102:
 1203               		.loc 8 8 20 view .LVU248
 1204 0032 6695      		lsr r22
 1205 0034 6695      		lsr r22
 1206 0036 8091 0000 		lds r24,g_rgb_timer
 1207 003a 9091 0000 		lds r25,g_rgb_timer+1
 1208 003e 0E94 0000 		call scale16by8
 1209               	.LVL103:
 1210 0042 B82E      		mov r11,r24
 1211               	.LVL104:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1212               		.loc 8 9 5 is_stmt 1 view .LVU249
 1213               	.LBB38:
 1214               		.loc 8 9 10 view .LVU250
 1215               		.loc 8 9 10 is_stmt 0 view .LVU251
 1216 0044 D0E0      		ldi r29,0
 1217               	.LVL105:
 1218               	.L51:
 1219               		.loc 8 9 31 is_stmt 1 discriminator 1 view .LVU252
 1220               		.loc 8 9 5 is_stmt 0 discriminator 1 view .LVU253
 1221 0046 C017      		cp r28,r16
 1222 0048 00F0      		brlo .L54
 1223               	.LBE38:
  10:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  13:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
  14:quantum/rgb_matrix_runners/effect_runner_i.h ****     return led_max < DRIVER_LED_TOTAL;
 1224               		.loc 8 14 5 is_stmt 1 view .LVU254
 1225               		.loc 8 14 20 is_stmt 0 view .LVU255
 1226 004a 81E0      		ldi r24,lo8(1)
 1227 004c 1533      		cpi r17,lo8(53)
 1228 004e 00F0      		brlo .L55
 1229 0050 80E0      		ldi r24,0
 1230               	.L55:
 1231               	/* epilogue start */
  15:quantum/rgb_matrix_runners/effect_runner_i.h **** }
 1232               		.loc 8 15 1 view .LVU256
 1233 0052 DF91      		pop r29
 1234 0054 CF91      		pop r28
 1235               	.LVL106:
 1236               		.loc 8 15 1 view .LVU257
 1237 0056 1F91      		pop r17
 1238 0058 0F91      		pop r16
 1239               	.LVL107:
 1240               		.loc 8 15 1 view .LVU258
 1241 005a FF90      		pop r15
 1242 005c EF90      		pop r14
 1243               	.LVL108:
 1244               		.loc 8 15 1 view .LVU259
 1245 005e DF90      		pop r13
 1246 0060 CF90      		pop r12
 1247               	.LVL109:
 1248               		.loc 8 15 1 view .LVU260
 1249 0062 BF90      		pop r11
 1250               	.LVL110:
 1251               		.loc 8 15 1 view .LVU261
 1252 0064 0895      		ret
 1253               	.LVL111:
 1254               	.L54:
 1255               	.LBB40:
 1256               	.LBB39:
  10:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1257               		.loc 8 10 9 is_stmt 1 view .LVU262
 1258 0066 FE01      		movw r30,r28
 1259 0068 E050      		subi r30,lo8(-(g_led_config+154))
 1260 006a F040      		sbci r31,hi8(-(g_led_config+154))
 1261 006c 8081      		ld r24,Z
 1262 006e F601      		movw r30,r12
 1263 0070 9181      		ldd r25,Z+1
 1264 0072 8923      		and r24,r25
 1265 0074 01F0      		breq .L53
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1266               		.loc 8 11 9 view .LVU263
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1267               		.loc 8 11 19 is_stmt 0 view .LVU264
 1268 0076 6091 0000 		lds r22,rgb_matrix_config+1
 1269 007a 7091 0000 		lds r23,rgb_matrix_config+1+1
 1270 007e 8091 0000 		lds r24,rgb_matrix_config+1+2
 1271 0082 2B2D      		mov r18,r11
 1272 0084 4C2F      		mov r20,r28
 1273 0086 F701      		movw r30,r14
 1274 0088 0995      		icall
 1275               	.LVL112:
 1276 008a 0E94 0000 		call rgb_matrix_hsv_to_rgb
 1277               	.LVL113:
 1278 008e 462F      		mov r20,r22
 1279               	.LVL114:
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1280               		.loc 8 12 9 is_stmt 1 view .LVU265
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1281               		.loc 8 12 9 is_stmt 0 view .LVU266
 1282 0090 282F      		mov r18,r24
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1283               		.loc 8 12 9 view .LVU267
 1284 0092 672F      		mov r22,r23
 1285 0094 CE01      		movw r24,r28
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1286               		.loc 8 12 9 view .LVU268
 1287 0096 0E94 0000 		call rgb_matrix_set_color
 1288               	.LVL115:
 1289               	.L53:
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 1290               		.loc 8 12 9 view .LVU269
 1291               	.LBE39:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1292               		.loc 8 9 44 is_stmt 1 discriminator 2 view .LVU270
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1293               		.loc 8 9 44 is_stmt 0 discriminator 2 view .LVU271
 1294 009a 2196      		adiw r28,1
 1295               	.LVL116:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1296               		.loc 8 9 44 discriminator 2 view .LVU272
 1297 009c 00C0      		rjmp .L51
 1298               	.LBE40:
 1299               		.cfi_endproc
 1300               	.LFE99:
 1302               		.section	.text.effect_runner_sin_cos_i,"ax",@progbits
 1303               	.global	effect_runner_sin_cos_i
 1305               	effect_runner_sin_cos_i:
 1306               	.LVL117:
 1307               	.LFB100:
 1308               		.file 9 "quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h"
   1:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** typedef HSV (*sin_cos_i_f)(HSV hsv, int8_t sin, int8_t cos, uint8_t i, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** bool effect_runner_sin_cos_i(effect_params_t* params, sin_cos_i_f effect_func) {
 1309               		.loc 9 5 80 is_stmt 1 view -0
 1310               		.cfi_startproc
 1311               		.loc 9 5 80 is_stmt 0 view .LVU274
 1312 0000 7F92      		push r7
 1313               	.LCFI45:
 1314               		.cfi_def_cfa_offset 3
 1315               		.cfi_offset 7, -2
 1316 0002 8F92      		push r8
 1317               	.LCFI46:
 1318               		.cfi_def_cfa_offset 4
 1319               		.cfi_offset 8, -3
 1320 0004 9F92      		push r9
 1321               	.LCFI47:
 1322               		.cfi_def_cfa_offset 5
 1323               		.cfi_offset 9, -4
 1324 0006 AF92      		push r10
 1325               	.LCFI48:
 1326               		.cfi_def_cfa_offset 6
 1327               		.cfi_offset 10, -5
 1328 0008 BF92      		push r11
 1329               	.LCFI49:
 1330               		.cfi_def_cfa_offset 7
 1331               		.cfi_offset 11, -6
 1332 000a CF92      		push r12
 1333               	.LCFI50:
 1334               		.cfi_def_cfa_offset 8
 1335               		.cfi_offset 12, -7
 1336 000c DF92      		push r13
 1337               	.LCFI51:
 1338               		.cfi_def_cfa_offset 9
 1339               		.cfi_offset 13, -8
 1340 000e EF92      		push r14
 1341               	.LCFI52:
 1342               		.cfi_def_cfa_offset 10
 1343               		.cfi_offset 14, -9
 1344 0010 FF92      		push r15
 1345               	.LCFI53:
 1346               		.cfi_def_cfa_offset 11
 1347               		.cfi_offset 15, -10
 1348 0012 0F93      		push r16
 1349               	.LCFI54:
 1350               		.cfi_def_cfa_offset 12
 1351               		.cfi_offset 16, -11
 1352 0014 1F93      		push r17
 1353               	.LCFI55:
 1354               		.cfi_def_cfa_offset 13
 1355               		.cfi_offset 17, -12
 1356 0016 CF93      		push r28
 1357               	.LCFI56:
 1358               		.cfi_def_cfa_offset 14
 1359               		.cfi_offset 28, -13
 1360 0018 DF93      		push r29
 1361               	.LCFI57:
 1362               		.cfi_def_cfa_offset 15
 1363               		.cfi_offset 29, -14
 1364               	/* prologue: function */
 1365               	/* frame size = 0 */
 1366               	/* stack size = 13 */
 1367               	.L__stack_usage = 13
 1368 001a 5C01      		movw r10,r24
 1369 001c 6B01      		movw r12,r22
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1370               		.loc 9 6 5 is_stmt 1 view .LVU275
 1371 001e FC01      		movw r30,r24
 1372 0020 C081      		ld r28,Z
 1373 0022 8BE0      		ldi r24,lo8(11)
 1374               	.LVL118:
 1375               		.loc 9 6 5 is_stmt 0 view .LVU276
 1376 0024 C89F      		mul r28,r24
 1377 0026 C02D      		mov r28,r0
 1378 0028 1124      		clr r1
 1379               	.LVL119:
 1380               		.loc 9 6 5 is_stmt 1 view .LVU277
 1381 002a 1BE0      		ldi r17,lo8(11)
 1382 002c 1C0F      		add r17,r28
 1383               	.LVL120:
 1384               		.loc 9 6 5 view .LVU278
 1385 002e 912E      		mov r9,r17
 1386 0030 1633      		cpi r17,lo8(54)
 1387 0032 00F0      		brlo .L57
 1388 0034 35E3      		ldi r19,lo8(53)
 1389 0036 932E      		mov r9,r19
 1390               	.L57:
 1391               	.LVL121:
 1392               		.loc 9 6 44 view .LVU279
   7:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     uint16_t time      = scale16by8(g_rgb_timer, rgb_matrix_config.speed / 4);
 1393               		.loc 9 8 5 view .LVU280
 1394               		.loc 9 8 26 is_stmt 0 view .LVU281
 1395 0038 6091 0000 		lds r22,rgb_matrix_config+4
 1396               	.LVL122:
 1397               		.loc 9 8 26 view .LVU282
 1398 003c 6695      		lsr r22
 1399 003e 6695      		lsr r22
 1400 0040 8091 0000 		lds r24,g_rgb_timer
 1401 0044 9091 0000 		lds r25,g_rgb_timer+1
 1402 0048 0E94 0000 		call scale16by8
 1403               	.LVL123:
 1404 004c F82E      		mov r15,r24
   9:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   cos_value = cos8(time) - 128;
 1405               		.loc 9 9 5 is_stmt 1 view .LVU283
 1406               	.LVL124:
 1407               	.LBB45:
 1408               	.LBI45:
 208:./lib/lib8tion/trig8.h **** 
 209:./lib/lib8tion/trig8.h **** 
 210:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of sin(x). This approximation never varies more than
 211:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 212:./lib/lib8tion/trig8.h **** ///
 213:./lib/lib8tion/trig8.h **** ///     float s = (sin(x) * 128.0) + 128;
 214:./lib/lib8tion/trig8.h **** ///
 215:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 216:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 217:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t sin8_C( uint8_t theta)
 218:./lib/lib8tion/trig8.h **** {
 219:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 220:./lib/lib8tion/trig8.h ****     if( theta & 0x40 ) {
 221:./lib/lib8tion/trig8.h ****         offset = (uint8_t)255 - offset;
 222:./lib/lib8tion/trig8.h ****     }
 223:./lib/lib8tion/trig8.h ****     offset &= 0x3F; // 0..63
 224:./lib/lib8tion/trig8.h **** 
 225:./lib/lib8tion/trig8.h ****     uint8_t secoffset  = offset & 0x0F; // 0..15
 226:./lib/lib8tion/trig8.h ****     if( theta & 0x40) secoffset++;
 227:./lib/lib8tion/trig8.h **** 
 228:./lib/lib8tion/trig8.h ****     uint8_t section = offset >> 4; // 0..3
 229:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 230:./lib/lib8tion/trig8.h ****     const uint8_t* p = b_m16_interleave;
 231:./lib/lib8tion/trig8.h ****     p += s2;
 232:./lib/lib8tion/trig8.h ****     uint8_t b   =  *p;
 233:./lib/lib8tion/trig8.h ****     p++;
 234:./lib/lib8tion/trig8.h ****     uint8_t m16 =  *p;
 235:./lib/lib8tion/trig8.h **** 
 236:./lib/lib8tion/trig8.h ****     uint8_t mx = (m16 * secoffset) >> 4;
 237:./lib/lib8tion/trig8.h **** 
 238:./lib/lib8tion/trig8.h ****     int8_t y = mx + b;
 239:./lib/lib8tion/trig8.h ****     if( theta & 0x80 ) y = -y;
 240:./lib/lib8tion/trig8.h **** 
 241:./lib/lib8tion/trig8.h ****     y += 128;
 242:./lib/lib8tion/trig8.h **** 
 243:./lib/lib8tion/trig8.h ****     return y;
 244:./lib/lib8tion/trig8.h **** }
 245:./lib/lib8tion/trig8.h **** 
 246:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of cos(x). This approximation never varies more than
 247:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 248:./lib/lib8tion/trig8.h **** ///
 249:./lib/lib8tion/trig8.h **** ///     float s = (cos(x) * 128.0) + 128;
 250:./lib/lib8tion/trig8.h **** ///
 251:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 252:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 253:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t cos8( uint8_t theta)
 1409               		.loc 3 253 20 view .LVU284
 1410               	.LBB46:
 254:./lib/lib8tion/trig8.h **** {
 255:./lib/lib8tion/trig8.h ****     return sin8( theta + 64);
 1411               		.loc 3 255 5 view .LVU285
 1412               		.loc 3 255 12 is_stmt 0 view .LVU286
 1413 004e 80E4      		ldi r24,lo8(64)
 1414 0050 8F0D      		add r24,r15
 1415 0052 0E94 0000 		call sin8_avr
 1416               	.LVL125:
 1417               		.loc 3 255 12 view .LVU287
 1418               	.LBE46:
 1419               	.LBE45:
 1420               		.loc 9 9 37 view .LVU288
 1421 0056 90E8      		ldi r25,lo8(-128)
 1422 0058 892E      		mov r8,r25
 1423 005a 880E      		add r8,r24
 1424               	.LVL126:
  10:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   sin_value = sin8(time) - 128;
 1425               		.loc 9 10 5 is_stmt 1 view .LVU289
 1426               		.loc 9 10 26 is_stmt 0 view .LVU290
 1427 005c 8F2D      		mov r24,r15
 1428 005e 0E94 0000 		call sin8_avr
 1429               	.LVL127:
 1430               		.loc 9 10 37 view .LVU291
 1431 0062 20E8      		ldi r18,lo8(-128)
 1432 0064 722E      		mov r7,r18
 1433 0066 780E      		add r7,r24
 1434               	.LVL128:
  11:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1435               		.loc 9 11 5 is_stmt 1 view .LVU292
 1436               	.LBB47:
 1437               		.loc 9 11 10 view .LVU293
 1438               		.loc 9 11 10 is_stmt 0 view .LVU294
 1439 0068 D0E0      		ldi r29,0
 1440               	.LVL129:
 1441               	.L58:
 1442               		.loc 9 11 31 is_stmt 1 discriminator 1 view .LVU295
 1443               		.loc 9 11 5 is_stmt 0 discriminator 1 view .LVU296
 1444 006a C915      		cp r28,r9
 1445 006c 00F0      		brlo .L61
 1446               	.LBE47:
  12:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB rgb = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, cos_value, sin_value, i,
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
  16:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     return led_max < DRIVER_LED_TOTAL;
 1447               		.loc 9 16 5 is_stmt 1 view .LVU297
 1448               		.loc 9 16 20 is_stmt 0 view .LVU298
 1449 006e 81E0      		ldi r24,lo8(1)
 1450 0070 1533      		cpi r17,lo8(53)
 1451 0072 00F0      		brlo .L62
 1452 0074 80E0      		ldi r24,0
 1453               	.L62:
 1454               	/* epilogue start */
  17:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** }
 1455               		.loc 9 17 1 view .LVU299
 1456 0076 DF91      		pop r29
 1457 0078 CF91      		pop r28
 1458               	.LVL130:
 1459               		.loc 9 17 1 view .LVU300
 1460 007a 1F91      		pop r17
 1461 007c 0F91      		pop r16
 1462 007e FF90      		pop r15
 1463 0080 EF90      		pop r14
 1464 0082 DF90      		pop r13
 1465 0084 CF90      		pop r12
 1466               	.LVL131:
 1467               		.loc 9 17 1 view .LVU301
 1468 0086 BF90      		pop r11
 1469 0088 AF90      		pop r10
 1470               	.LVL132:
 1471               		.loc 9 17 1 view .LVU302
 1472 008a 9F90      		pop r9
 1473               	.LVL133:
 1474               		.loc 9 17 1 view .LVU303
 1475 008c 8F90      		pop r8
 1476               	.LVL134:
 1477               		.loc 9 17 1 view .LVU304
 1478 008e 7F90      		pop r7
 1479               	.LVL135:
 1480               		.loc 9 17 1 view .LVU305
 1481 0090 0895      		ret
 1482               	.LVL136:
 1483               	.L61:
 1484               	.LBB49:
 1485               	.LBB48:
  12:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1486               		.loc 9 12 9 is_stmt 1 view .LVU306
 1487 0092 FE01      		movw r30,r28
 1488 0094 E050      		subi r30,lo8(-(g_led_config+154))
 1489 0096 F040      		sbci r31,hi8(-(g_led_config+154))
 1490 0098 8081      		ld r24,Z
 1491 009a F501      		movw r30,r10
 1492 009c 9181      		ldd r25,Z+1
 1493 009e 8923      		and r24,r25
 1494 00a0 01F0      		breq .L60
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1495               		.loc 9 13 9 view .LVU307
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1496               		.loc 9 13 19 is_stmt 0 view .LVU308
 1497 00a2 6091 0000 		lds r22,rgb_matrix_config+1
 1498 00a6 7091 0000 		lds r23,rgb_matrix_config+1+1
 1499 00aa 8091 0000 		lds r24,rgb_matrix_config+1+2
 1500 00ae EF2C      		mov r14,r15
 1501 00b0 0C2F      		mov r16,r28
 1502 00b2 272D      		mov r18,r7
 1503 00b4 482D      		mov r20,r8
 1504 00b6 F601      		movw r30,r12
 1505 00b8 0995      		icall
 1506               	.LVL137:
 1507 00ba 0E94 0000 		call rgb_matrix_hsv_to_rgb
 1508               	.LVL138:
 1509 00be 462F      		mov r20,r22
 1510               	.LVL139:
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1511               		.loc 9 14 9 is_stmt 1 view .LVU309
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1512               		.loc 9 14 9 is_stmt 0 view .LVU310
 1513 00c0 282F      		mov r18,r24
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1514               		.loc 9 14 9 view .LVU311
 1515 00c2 672F      		mov r22,r23
 1516 00c4 CE01      		movw r24,r28
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1517               		.loc 9 14 9 view .LVU312
 1518 00c6 0E94 0000 		call rgb_matrix_set_color
 1519               	.LVL140:
 1520               	.L60:
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 1521               		.loc 9 14 9 view .LVU313
 1522               	.LBE48:
  11:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1523               		.loc 9 11 44 is_stmt 1 discriminator 2 view .LVU314
  11:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1524               		.loc 9 11 44 is_stmt 0 discriminator 2 view .LVU315
 1525 00ca 2196      		adiw r28,1
 1526               	.LVL141:
  11:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1527               		.loc 9 11 44 discriminator 2 view .LVU316
 1528 00cc 00C0      		rjmp .L58
 1529               	.LBE49:
 1530               		.cfi_endproc
 1531               	.LFE100:
 1533               		.section	.text.effect_runner_reactive,"ax",@progbits
 1534               	.global	effect_runner_reactive
 1536               	effect_runner_reactive:
 1537               	.LVL142:
 1538               	.LFB101:
 1539               		.file 10 "quantum/rgb_matrix_runners/effect_runner_reactive.h"
   1:quantum/rgb_matrix_runners/effect_runner_reactive.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_reactive.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   4:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_reactive.h **** typedef HSV (*reactive_f)(HSV hsv, uint16_t offset);
   6:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h **** bool effect_runner_reactive(effect_params_t* params, reactive_f effect_func) {
 1540               		.loc 10 7 78 is_stmt 1 view -0
 1541               		.cfi_startproc
 1542               		.loc 10 7 78 is_stmt 0 view .LVU318
 1543 0000 AF92      		push r10
 1544               	.LCFI58:
 1545               		.cfi_def_cfa_offset 3
 1546               		.cfi_offset 10, -2
 1547 0002 BF92      		push r11
 1548               	.LCFI59:
 1549               		.cfi_def_cfa_offset 4
 1550               		.cfi_offset 11, -3
 1551 0004 CF92      		push r12
 1552               	.LCFI60:
 1553               		.cfi_def_cfa_offset 5
 1554               		.cfi_offset 12, -4
 1555 0006 DF92      		push r13
 1556               	.LCFI61:
 1557               		.cfi_def_cfa_offset 6
 1558               		.cfi_offset 13, -5
 1559 0008 EF92      		push r14
 1560               	.LCFI62:
 1561               		.cfi_def_cfa_offset 7
 1562               		.cfi_offset 14, -6
 1563 000a FF92      		push r15
 1564               	.LCFI63:
 1565               		.cfi_def_cfa_offset 8
 1566               		.cfi_offset 15, -7
 1567 000c 0F93      		push r16
 1568               	.LCFI64:
 1569               		.cfi_def_cfa_offset 9
 1570               		.cfi_offset 16, -8
 1571 000e 1F93      		push r17
 1572               	.LCFI65:
 1573               		.cfi_def_cfa_offset 10
 1574               		.cfi_offset 17, -9
 1575 0010 CF93      		push r28
 1576               	.LCFI66:
 1577               		.cfi_def_cfa_offset 11
 1578               		.cfi_offset 28, -10
 1579 0012 DF93      		push r29
 1580               	.LCFI67:
 1581               		.cfi_def_cfa_offset 12
 1582               		.cfi_offset 29, -11
 1583               	/* prologue: function */
 1584               	/* frame size = 0 */
 1585               	/* stack size = 10 */
 1586               	.L__stack_usage = 10
 1587 0014 7C01      		movw r14,r24
 1588 0016 6B01      		movw r12,r22
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1589               		.loc 10 8 5 is_stmt 1 view .LVU319
 1590 0018 FC01      		movw r30,r24
 1591 001a C081      		ld r28,Z
 1592 001c 8BE0      		ldi r24,lo8(11)
 1593               	.LVL143:
 1594               		.loc 10 8 5 is_stmt 0 view .LVU320
 1595 001e C89F      		mul r28,r24
 1596 0020 C02D      		mov r28,r0
 1597 0022 1124      		clr r1
 1598               	.LVL144:
 1599               		.loc 10 8 5 is_stmt 1 view .LVU321
 1600 0024 2BE0      		ldi r18,lo8(11)
 1601 0026 B22E      		mov r11,r18
 1602 0028 BC0E      		add r11,r28
 1603               	.LVL145:
 1604               		.loc 10 8 5 view .LVU322
 1605 002a AB2C      		mov r10,r11
 1606 002c F5E3      		ldi r31,lo8(53)
 1607 002e FB15      		cp r31,r11
 1608 0030 00F4      		brsh .L64
 1609 0032 95E3      		ldi r25,lo8(53)
 1610 0034 A92E      		mov r10,r25
 1611               	.L64:
 1612               	.LVL146:
 1613               		.loc 10 8 44 view .LVU323
   9:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     uint16_t max_tick = 65535 / rgb_matrix_config.speed;
 1614               		.loc 10 10 5 view .LVU324
 1615               		.loc 10 10 50 is_stmt 0 view .LVU325
 1616 0036 2091 0000 		lds r18,rgb_matrix_config+4
 1617 003a 30E0      		ldi r19,0
 1618 003c 50E0      		ldi r21,0
 1619 003e 40E0      		ldi r20,0
 1620               		.loc 10 10 31 view .LVU326
 1621 0040 6FEF      		ldi r22,lo8(-1)
 1622 0042 7FEF      		ldi r23,lo8(-1)
 1623 0044 80E0      		ldi r24,0
 1624 0046 90E0      		ldi r25,0
 1625               	.LVL147:
 1626               		.loc 10 10 31 view .LVU327
 1627 0048 0E94 0000 		call __divmodsi4
 1628               		.loc 10 10 14 view .LVU328
 1629 004c 8901      		movw r16,r18
 1630               	.LVL148:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1631               		.loc 10 11 5 is_stmt 1 view .LVU329
 1632               	.LBB50:
 1633               		.loc 10 11 10 view .LVU330
 1634               		.loc 10 11 10 is_stmt 0 view .LVU331
 1635 004e D0E0      		ldi r29,0
 1636               	.LVL149:
 1637               	.L65:
 1638               		.loc 10 11 31 is_stmt 1 discriminator 1 view .LVU332
 1639 0050 2C2F      		mov r18,r28
 1640               		.loc 10 11 5 is_stmt 0 discriminator 1 view .LVU333
 1641 0052 CA15      		cp r28,r10
 1642 0054 00F0      		brlo .L72
 1643               	.LBE50:
  12:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t tick = max_tick;
  14:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         // Reverse search to find most recent key hit
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         for (int8_t j = g_last_hit_tracker.count - 1; j >= 0; j--) {
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
  17:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
  18:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 break;
  19:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             }
  20:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         }
  21:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t offset = scale16by8(tick, rgb_matrix_config.speed);
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  25:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
  26:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     return led_max < DRIVER_LED_TOTAL;
 1644               		.loc 10 26 5 is_stmt 1 view .LVU334
 1645               		.loc 10 26 20 is_stmt 0 view .LVU335
 1646 0056 81E0      		ldi r24,lo8(1)
 1647 0058 F4E3      		ldi r31,lo8(52)
 1648 005a FB15      		cp r31,r11
 1649 005c 00F4      		brsh .L73
 1650 005e 80E0      		ldi r24,0
 1651               	.L73:
 1652               	/* epilogue start */
  27:quantum/rgb_matrix_runners/effect_runner_reactive.h **** }
 1653               		.loc 10 27 1 view .LVU336
 1654 0060 DF91      		pop r29
 1655 0062 CF91      		pop r28
 1656               	.LVL150:
 1657               		.loc 10 27 1 view .LVU337
 1658 0064 1F91      		pop r17
 1659 0066 0F91      		pop r16
 1660 0068 FF90      		pop r15
 1661 006a EF90      		pop r14
 1662               	.LVL151:
 1663               		.loc 10 27 1 view .LVU338
 1664 006c DF90      		pop r13
 1665 006e CF90      		pop r12
 1666               	.LVL152:
 1667               		.loc 10 27 1 view .LVU339
 1668 0070 BF90      		pop r11
 1669 0072 AF90      		pop r10
 1670               	.LVL153:
 1671               		.loc 10 27 1 view .LVU340
 1672 0074 0895      		ret
 1673               	.LVL154:
 1674               	.L72:
 1675               	.LBB56:
 1676               	.LBB51:
  12:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1677               		.loc 10 12 9 is_stmt 1 view .LVU341
 1678 0076 FE01      		movw r30,r28
 1679 0078 E050      		subi r30,lo8(-(g_led_config+154))
 1680 007a F040      		sbci r31,hi8(-(g_led_config+154))
 1681 007c 8081      		ld r24,Z
 1682 007e F701      		movw r30,r14
 1683 0080 9181      		ldd r25,Z+1
 1684 0082 8923      		and r24,r25
 1685 0084 01F0      		breq .L67
  13:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         // Reverse search to find most recent key hit
 1686               		.loc 10 13 9 view .LVU342
 1687               	.LVL155:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1688               		.loc 10 15 9 view .LVU343
 1689               	.LBB52:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1690               		.loc 10 15 14 view .LVU344
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1691               		.loc 10 15 50 is_stmt 0 view .LVU345
 1692 0086 4091 0000 		lds r20,g_last_hit_tracker
 1693 008a 4150      		subi r20,lo8(-(-1))
 1694               	.LVL156:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1695               		.loc 10 15 50 view .LVU346
 1696 008c 042E      		mov __tmp_reg__,r20
 1697 008e 000C      		lsl r0
 1698 0090 550B      		sbc r21,r21
 1699               	.LVL157:
 1700               	.L68:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1701               		.loc 10 15 55 is_stmt 1 discriminator 1 view .LVU347
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1702               		.loc 10 15 9 is_stmt 0 discriminator 1 view .LVU348
 1703 0092 47FF      		sbrs r20,7
 1704 0094 00C0      		rjmp .L71
 1705               	.LBE52:
 1706               	.LBE51:
 1707               	.LBE56:
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1708               		.loc 10 10 14 view .LVU349
 1709 0096 C801      		movw r24,r16
 1710               	.L70:
 1711               	.LVL158:
 1712               	.LBB57:
 1713               	.LBB54:
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
 1714               		.loc 10 22 9 is_stmt 1 view .LVU350
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
 1715               		.loc 10 22 27 is_stmt 0 view .LVU351
 1716 0098 6091 0000 		lds r22,rgb_matrix_config+4
 1717 009c 0E94 0000 		call scale16by8
 1718               	.LVL159:
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = rgb_matrix_hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
 1719               		.loc 10 22 27 view .LVU352
 1720 00a0 AC01      		movw r20,r24
 1721               	.LVL160:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1722               		.loc 10 23 9 is_stmt 1 view .LVU353
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1723               		.loc 10 23 27 is_stmt 0 view .LVU354
 1724 00a2 6091 0000 		lds r22,rgb_matrix_config+1
 1725 00a6 7091 0000 		lds r23,rgb_matrix_config+1+1
 1726 00aa 8091 0000 		lds r24,rgb_matrix_config+1+2
 1727 00ae F601      		movw r30,r12
 1728 00b0 0995      		icall
 1729               	.LVL161:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 1730               		.loc 10 23 27 view .LVU355
 1731 00b2 0E94 0000 		call rgb_matrix_hsv_to_rgb
 1732               	.LVL162:
 1733 00b6 462F      		mov r20,r22
 1734               	.LVL163:
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1735               		.loc 10 24 9 is_stmt 1 view .LVU356
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1736               		.loc 10 24 9 is_stmt 0 view .LVU357
 1737 00b8 282F      		mov r18,r24
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1738               		.loc 10 24 9 view .LVU358
 1739 00ba 672F      		mov r22,r23
 1740 00bc CE01      		movw r24,r28
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1741               		.loc 10 24 9 view .LVU359
 1742 00be 0E94 0000 		call rgb_matrix_set_color
 1743               	.LVL164:
 1744               	.L67:
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 1745               		.loc 10 24 9 view .LVU360
 1746               	.LBE54:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1747               		.loc 10 11 44 is_stmt 1 discriminator 2 view .LVU361
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1748               		.loc 10 11 44 is_stmt 0 discriminator 2 view .LVU362
 1749 00c2 2196      		adiw r28,1
 1750               	.LVL165:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1751               		.loc 10 11 44 discriminator 2 view .LVU363
 1752 00c4 00C0      		rjmp .L65
 1753               	.LVL166:
 1754               	.L71:
 1755               	.LBB55:
 1756               	.LBB53:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1757               		.loc 10 16 13 is_stmt 1 view .LVU364
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1758               		.loc 10 16 41 is_stmt 0 view .LVU365
 1759 00c6 FA01      		movw r30,r20
 1760 00c8 E050      		subi r30,lo8(-(g_last_hit_tracker))
 1761 00ca F040      		sbci r31,hi8(-(g_last_hit_tracker))
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1762               		.loc 10 16 16 view .LVU366
 1763 00cc 8189      		ldd r24,Z+17
 1764 00ce 8213      		cpse r24,r18
 1765 00d0 00C0      		rjmp .L69
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1766               		.loc 10 16 76 discriminator 1 view .LVU367
 1767 00d2 FA01      		movw r30,r20
 1768 00d4 EE0F      		lsl r30
 1769 00d6 FF1F      		rol r31
 1770 00d8 E050      		subi r30,lo8(-(g_last_hit_tracker))
 1771 00da F040      		sbci r31,hi8(-(g_last_hit_tracker))
 1772 00dc 818D      		ldd r24,Z+25
 1773 00de 928D      		ldd r25,Z+26
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 1774               		.loc 10 16 50 discriminator 1 view .LVU368
 1775 00e0 8017      		cp r24,r16
 1776 00e2 9107      		cpc r25,r17
 1777 00e4 00F0      		brlo .L70
 1778               	.L69:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1779               		.loc 10 15 63 is_stmt 1 discriminator 2 view .LVU369
 1780               	.LVL167:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1781               		.loc 10 15 63 is_stmt 0 discriminator 2 view .LVU370
 1782 00e6 4150      		subi r20,1
 1783 00e8 5109      		sbc r21,__zero_reg__
 1784               	.LVL168:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 1785               		.loc 10 15 63 discriminator 2 view .LVU371
 1786 00ea 00C0      		rjmp .L68
 1787               	.LBE53:
 1788               	.LBE55:
 1789               	.LBE57:
 1790               		.cfi_endproc
 1791               	.LFE101:
 1793               		.section	.text.effect_runner_reactive_splash,"ax",@progbits
 1794               	.global	effect_runner_reactive_splash
 1796               	effect_runner_reactive_splash:
 1797               	.LVL169:
 1798               	.LFB102:
 1799               		.file 11 "quantum/rgb_matrix_runners/effect_runner_reactive_splash.h"
   1:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   4:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** typedef HSV (*reactive_splash_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick);
   6:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** bool effect_runner_reactive_splash(uint8_t start, effect_params_t* params, reactive_splash_f effect
 1800               		.loc 11 7 107 is_stmt 1 view -0
 1801               		.cfi_startproc
 1802               		.loc 11 7 107 is_stmt 0 view .LVU373
 1803 0000 2F92      		push r2
 1804               	.LCFI68:
 1805               		.cfi_def_cfa_offset 3
 1806               		.cfi_offset 2, -2
 1807 0002 3F92      		push r3
 1808               	.LCFI69:
 1809               		.cfi_def_cfa_offset 4
 1810               		.cfi_offset 3, -3
 1811 0004 4F92      		push r4
 1812               	.LCFI70:
 1813               		.cfi_def_cfa_offset 5
 1814               		.cfi_offset 4, -4
 1815 0006 5F92      		push r5
 1816               	.LCFI71:
 1817               		.cfi_def_cfa_offset 6
 1818               		.cfi_offset 5, -5
 1819 0008 6F92      		push r6
 1820               	.LCFI72:
 1821               		.cfi_def_cfa_offset 7
 1822               		.cfi_offset 6, -6
 1823 000a 7F92      		push r7
 1824               	.LCFI73:
 1825               		.cfi_def_cfa_offset 8
 1826               		.cfi_offset 7, -7
 1827 000c 8F92      		push r8
 1828               	.LCFI74:
 1829               		.cfi_def_cfa_offset 9
 1830               		.cfi_offset 8, -8
 1831 000e 9F92      		push r9
 1832               	.LCFI75:
 1833               		.cfi_def_cfa_offset 10
 1834               		.cfi_offset 9, -9
 1835 0010 AF92      		push r10
 1836               	.LCFI76:
 1837               		.cfi_def_cfa_offset 11
 1838               		.cfi_offset 10, -10
 1839 0012 BF92      		push r11
 1840               	.LCFI77:
 1841               		.cfi_def_cfa_offset 12
 1842               		.cfi_offset 11, -11
 1843 0014 CF92      		push r12
 1844               	.LCFI78:
 1845               		.cfi_def_cfa_offset 13
 1846               		.cfi_offset 12, -12
 1847 0016 DF92      		push r13
 1848               	.LCFI79:
 1849               		.cfi_def_cfa_offset 14
 1850               		.cfi_offset 13, -13
 1851 0018 EF92      		push r14
 1852               	.LCFI80:
 1853               		.cfi_def_cfa_offset 15
 1854               		.cfi_offset 14, -14
 1855 001a FF92      		push r15
 1856               	.LCFI81:
 1857               		.cfi_def_cfa_offset 16
 1858               		.cfi_offset 15, -15
 1859 001c 0F93      		push r16
 1860               	.LCFI82:
 1861               		.cfi_def_cfa_offset 17
 1862               		.cfi_offset 16, -16
 1863 001e 1F93      		push r17
 1864               	.LCFI83:
 1865               		.cfi_def_cfa_offset 18
 1866               		.cfi_offset 17, -17
 1867 0020 CF93      		push r28
 1868               	.LCFI84:
 1869               		.cfi_def_cfa_offset 19
 1870               		.cfi_offset 28, -18
 1871 0022 DF93      		push r29
 1872               	.LCFI85:
 1873               		.cfi_def_cfa_offset 20
 1874               		.cfi_offset 29, -19
 1875 0024 CDB7      		in r28,__SP_L__
 1876 0026 DEB7      		in r29,__SP_H__
 1877               	.LCFI86:
 1878               		.cfi_def_cfa_register 28
 1879 0028 2B97      		sbiw r28,11
 1880               	.LCFI87:
 1881               		.cfi_def_cfa_offset 31
 1882 002a 0FB6      		in __tmp_reg__,__SREG__
 1883 002c F894      		cli
 1884 002e DEBF      		out __SP_H__,r29
 1885 0030 0FBE      		out __SREG__,__tmp_reg__
 1886 0032 CDBF      		out __SP_L__,r28
 1887               	/* prologue: function */
 1888               	/* frame size = 11 */
 1889               	/* stack size = 29 */
 1890               	.L__stack_usage = 29
 1891 0034 8C83      		std Y+4,r24
 1892 0036 2B01      		movw r4,r22
 1893 0038 5F83      		std Y+7,r21
 1894 003a 4E83      		std Y+6,r20
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 1895               		.loc 11 8 5 is_stmt 1 view .LVU374
 1896 003c FB01      		movw r30,r22
 1897 003e F081      		ld r31,Z
 1898 0040 8BE0      		ldi r24,lo8(11)
 1899               	.LVL170:
 1900               		.loc 11 8 5 is_stmt 0 view .LVU375
 1901 0042 F89F      		mul r31,r24
 1902 0044 802D      		mov r24,r0
 1903 0046 1124      		clr r1
 1904 0048 8983      		std Y+1,r24
 1905               	.LVL171:
 1906               		.loc 11 8 5 is_stmt 1 view .LVU376
 1907 004a 855F      		subi r24,lo8(-(11))
 1908               	.LVL172:
 1909               		.loc 11 8 5 is_stmt 0 view .LVU377
 1910 004c 8A83      		std Y+2,r24
 1911               	.LVL173:
 1912               		.loc 11 8 5 is_stmt 1 view .LVU378
 1913 004e 8B83      		std Y+3,r24
 1914 0050 8633      		cpi r24,lo8(54)
 1915 0052 00F0      		brlo .L75
 1916 0054 25E3      		ldi r18,lo8(53)
 1917 0056 2B83      		std Y+3,r18
 1918               	.L75:
 1919               	.LVL174:
 1920               		.loc 11 8 44 view .LVU379
   9:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
  10:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     uint8_t count = g_last_hit_tracker.count;
 1921               		.loc 11 10 5 view .LVU380
 1922               		.loc 11 10 13 is_stmt 0 view .LVU381
 1923 0058 3091 0000 		lds r19,g_last_hit_tracker
 1924 005c 3D83      		std Y+5,r19
 1925               	.LVL175:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 1926               		.loc 11 11 5 is_stmt 1 view .LVU382
 1927               	.LBB58:
 1928               		.loc 11 11 10 view .LVU383
 1929               		.loc 11 11 10 is_stmt 0 view .LVU384
 1930 005e 9981      		ldd r25,Y+1
 1931 0060 892F      		mov r24,r25
 1932 0062 90E0      		ldi r25,0
 1933 0064 9B87      		std Y+11,r25
 1934 0066 8A87      		std Y+10,r24
 1935 0068 880F      		lsl r24
 1936 006a 991F      		rol r25
 1937 006c FC01      		movw r30,r24
 1938 006e E050      		subi r30,lo8(-(g_led_config))
 1939 0070 F040      		sbci r31,hi8(-(g_led_config))
 1940 0072 6F01      		movw r12,r30
 1941 0074 FC81      		ldd r31,Y+4
 1942 0076 8F2F      		mov r24,r31
 1943 0078 90E0      		ldi r25,0
 1944 007a 9C01      		movw r18,r24
 1945 007c 2F5F      		subi r18,-1
 1946 007e 3F4F      		sbci r19,-1
 1947 0080 3987      		std Y+9,r19
 1948 0082 2887      		std Y+8,r18
 1949               	.LVL176:
 1950               	.L76:
 1951               		.loc 11 11 31 is_stmt 1 discriminator 1 view .LVU385
 1952               		.loc 11 11 5 is_stmt 0 discriminator 1 view .LVU386
 1953 0084 EB81      		ldd r30,Y+3
 1954 0086 FA85      		ldd r31,Y+10
 1955 0088 FE17      		cp r31,r30
 1956 008a 00F0      		brlo .L81
 1957               	.LBE58:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
  21:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
  22:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = scale8(hsv.v, rgb_matrix_config.hsv.v);
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB rgb = rgb_matrix_hsv_to_rgb(hsv);
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  25:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
  26:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     return led_max < DRIVER_LED_TOTAL;
 1958               		.loc 11 26 5 is_stmt 1 view .LVU387
 1959               		.loc 11 26 20 is_stmt 0 view .LVU388
 1960 008c 81E0      		ldi r24,lo8(1)
 1961 008e 2A81      		ldd r18,Y+2
 1962 0090 2533      		cpi r18,lo8(53)
 1963 0092 00F0      		brlo .L82
 1964 0094 80E0      		ldi r24,0
 1965               	.L82:
 1966               	/* epilogue start */
  27:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** }
 1967               		.loc 11 27 1 view .LVU389
 1968 0096 2B96      		adiw r28,11
 1969 0098 0FB6      		in __tmp_reg__,__SREG__
 1970 009a F894      		cli
 1971 009c DEBF      		out __SP_H__,r29
 1972 009e 0FBE      		out __SREG__,__tmp_reg__
 1973 00a0 CDBF      		out __SP_L__,r28
 1974 00a2 DF91      		pop r29
 1975 00a4 CF91      		pop r28
 1976 00a6 1F91      		pop r17
 1977 00a8 0F91      		pop r16
 1978 00aa FF90      		pop r15
 1979 00ac EF90      		pop r14
 1980 00ae DF90      		pop r13
 1981 00b0 CF90      		pop r12
 1982 00b2 BF90      		pop r11
 1983 00b4 AF90      		pop r10
 1984 00b6 9F90      		pop r9
 1985 00b8 8F90      		pop r8
 1986 00ba 7F90      		pop r7
 1987 00bc 6F90      		pop r6
 1988 00be 5F90      		pop r5
 1989 00c0 4F90      		pop r4
 1990               	.LVL177:
 1991               		.loc 11 27 1 view .LVU390
 1992 00c2 3F90      		pop r3
 1993 00c4 2F90      		pop r2
 1994 00c6 0895      		ret
 1995               	.LVL178:
 1996               	.L81:
 1997               	.LBB68:
 1998               	.LBB59:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 1999               		.loc 11 12 9 is_stmt 1 view .LVU391
 2000 00c8 EA85      		ldd r30,Y+10
 2001 00ca FB85      		ldd r31,Y+11
 2002 00cc E050      		subi r30,lo8(-(g_led_config+154))
 2003 00ce F040      		sbci r31,hi8(-(g_led_config+154))
 2004 00d0 8081      		ld r24,Z
 2005 00d2 F201      		movw r30,r4
 2006 00d4 9181      		ldd r25,Z+1
 2007 00d6 8923      		and r24,r25
 2008 00d8 01F0      		breq .L78
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
 2009               		.loc 11 13 9 view .LVU392
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
 2010               		.loc 11 13 13 is_stmt 0 view .LVU393
 2011 00da 2090 0000 		lds r2,rgb_matrix_config+1
 2012               	.LVL179:
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
 2013               		.loc 11 13 13 view .LVU394
 2014 00de 3090 0000 		lds r3,rgb_matrix_config+2
 2015               	.LVL180:
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
 2016               		.loc 11 14 9 is_stmt 1 view .LVU395
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2017               		.loc 11 15 9 view .LVU396
 2018               	.LBB60:
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2019               		.loc 11 15 14 view .LVU397
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2020               		.loc 11 15 14 is_stmt 0 view .LVU398
 2021 00e2 2885      		ldd r18,Y+8
 2022 00e4 3985      		ldd r19,Y+9
 2023 00e6 2050      		subi r18,lo8(-(g_last_hit_tracker))
 2024 00e8 3040      		sbci r19,hi8(-(g_last_hit_tracker))
 2025 00ea 3901      		movw r6,r18
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2026               		.loc 11 15 22 view .LVU399
 2027 00ec 3C81      		ldd r19,Y+4
 2028 00ee 3983      		std Y+1,r19
 2029               	.LBE60:
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
 2030               		.loc 11 14 17 view .LVU400
 2031 00f0 10E0      		ldi r17,0
 2032               	.LVL181:
 2033               	.L79:
 2034               	.LBB63:
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2035               		.loc 11 15 33 is_stmt 1 discriminator 1 view .LVU401
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2036               		.loc 11 15 9 is_stmt 0 discriminator 1 view .LVU402
 2037 00f2 2981      		ldd r18,Y+1
 2038 00f4 3D81      		ldd r19,Y+5
 2039 00f6 2317      		cp r18,r19
 2040 00f8 00F0      		brlo .L80
 2041               	.LBE63:
  22:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB rgb = rgb_matrix_hsv_to_rgb(hsv);
 2042               		.loc 11 22 9 is_stmt 1 view .LVU403
 2043               	.LVL182:
 2044               	.LBB64:
 2045               	.LBI64:
  20:./lib/lib8tion/scale8.h **** {
 2046               		.loc 1 20 34 view .LVU404
 2047               	.LBB65:
  61:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED==1)
 2048               		.loc 1 61 5 view .LVU405
 2049 00fa 2091 0000 		lds r18,rgb_matrix_config+3
 2050               	/* #APP */
 2051               	 ;  61 "./lib/lib8tion/scale8.h" 1
 2052 00fe 129F      		mul r17, r18          
 2053 0100 112D      		mov r17, r1          
 2054 0102 1124      		clr __zero_reg__    
 2055               		
 2056               	 ;  0 "" 2
 2057               	.LVL183:
  85:./lib/lib8tion/scale8.h **** #endif
 2058               		.loc 1 85 5 view .LVU406
  85:./lib/lib8tion/scale8.h **** #endif
 2059               		.loc 1 85 5 is_stmt 0 view .LVU407
 2060               	/* #NOAPP */
 2061               	.LBE65:
 2062               	.LBE64:
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 2063               		.loc 11 23 9 is_stmt 1 view .LVU408
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 2064               		.loc 11 23 19 is_stmt 0 view .LVU409
 2065 0104 B101      		movw r22,r2
 2066 0106 812F      		mov r24,r17
 2067 0108 0E94 0000 		call rgb_matrix_hsv_to_rgb
 2068               	.LVL184:
 2069 010c 462F      		mov r20,r22
 2070               	.LVL185:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 2071               		.loc 11 24 9 is_stmt 1 view .LVU410
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 2072               		.loc 11 24 9 is_stmt 0 view .LVU411
 2073 010e 282F      		mov r18,r24
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 2074               		.loc 11 24 9 view .LVU412
 2075 0110 672F      		mov r22,r23
 2076 0112 8A85      		ldd r24,Y+10
 2077 0114 9B85      		ldd r25,Y+11
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 2078               		.loc 11 24 9 view .LVU413
 2079 0116 0E94 0000 		call rgb_matrix_set_color
 2080               	.LVL186:
 2081               	.L78:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 2082               		.loc 11 24 9 view .LVU414
 2083               	.LBE59:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2084               		.loc 11 11 44 is_stmt 1 discriminator 2 view .LVU415
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2085               		.loc 11 11 44 is_stmt 0 discriminator 2 view .LVU416
 2086 011a 8A85      		ldd r24,Y+10
 2087 011c 9B85      		ldd r25,Y+11
 2088 011e 0196      		adiw r24,1
 2089 0120 9B87      		std Y+11,r25
 2090 0122 8A87      		std Y+10,r24
 2091               	.LVL187:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2092               		.loc 11 11 44 discriminator 2 view .LVU417
 2093 0124 92E0      		ldi r25,2
 2094 0126 C90E      		add r12,r25
 2095 0128 D11C      		adc r13,__zero_reg__
 2096 012a 00C0      		rjmp .L76
 2097               	.LVL188:
 2098               	.L80:
 2099               	.LBB67:
 2100               	.LBB66:
 2101               	.LBB61:
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 2102               		.loc 11 16 13 is_stmt 1 discriminator 3 view .LVU418
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 2103               		.loc 11 16 75 is_stmt 0 discriminator 3 view .LVU419
 2104 012c F301      		movw r30,r6
 2105 012e 8191      		ld r24,Z+
 2106 0130 3F01      		movw r6,r30
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 2107               		.loc 11 16 50 discriminator 3 view .LVU420
 2108 0132 F601      		movw r30,r12
 2109 0134 A0A8      		ldd r10,Z+48
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 2110               		.loc 11 16 22 discriminator 3 view .LVU421
 2111 0136 A81A      		sub r10,r24
 2112 0138 BB08      		sbc r11,r11
 2113               	.LVL189:
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 2114               		.loc 11 17 13 is_stmt 1 discriminator 3 view .LVU422
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 2115               		.loc 11 17 50 is_stmt 0 discriminator 3 view .LVU423
 2116 013a 81A8      		ldd r8,Z+49
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 2117               		.loc 11 17 75 discriminator 3 view .LVU424
 2118 013c F301      		movw r30,r6
 2119 013e 8781      		ldd r24,Z+7
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 2120               		.loc 11 17 22 discriminator 3 view .LVU425
 2121 0140 881A      		sub r8,r24
 2122 0142 9908      		sbc r9,r9
 2123               	.LVL190:
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 2124               		.loc 11 18 13 is_stmt 1 discriminator 3 view .LVU426
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 2125               		.loc 11 18 39 is_stmt 0 discriminator 3 view .LVU427
 2126 0144 AA9C      		mul r10,r10
 2127 0146 9001      		movw r18,r0
 2128 0148 AB9C      		mul r10,r11
 2129 014a 300D      		add r19,r0
 2130 014c 300D      		add r19,r0
 2131 014e 1124      		clr r1
 2132               	.LVL191:
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 2133               		.loc 11 18 49 discriminator 3 view .LVU428
 2134 0150 889C      		mul r8,r8
 2135 0152 C001      		movw r24,r0
 2136 0154 899C      		mul r8,r9
 2137 0156 900D      		add r25,r0
 2138 0158 900D      		add r25,r0
 2139 015a 1124      		clr r1
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 2140               		.loc 11 18 29 discriminator 3 view .LVU429
 2141 015c 820F      		add r24,r18
 2142 015e 931F      		adc r25,r19
 2143 0160 0E94 0000 		call sqrt16
 2144               	.LVL192:
 2145 0164 082F      		mov r16,r24
 2146               	.LVL193:
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 2147               		.loc 11 19 13 is_stmt 1 discriminator 3 view .LVU430
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 2148               		.loc 11 19 29 is_stmt 0 discriminator 3 view .LVU431
 2149 0166 F301      		movw r30,r6
 2150 0168 EE0F      		lsl r30
 2151 016a FF1F      		rol r31
 2152 016c E050      		subi r30,lo8(g_last_hit_tracker)
 2153 016e F040      		sbci r31,hi8(g_last_hit_tracker)
 2154 0170 6091 0000 		lds r22,rgb_matrix_config+4
 2155 0174 8589      		ldd r24,Z+21
 2156 0176 9689      		ldd r25,Z+22
 2157 0178 0E94 0000 		call scale16by8
 2158               	.LVL194:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 2159               		.loc 11 20 13 is_stmt 1 discriminator 3 view .LVU432
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 2160               		.loc 11 20 29 is_stmt 0 discriminator 3 view .LVU433
 2161 017c 7C01      		movw r14,r24
 2162 017e 9401      		movw r18,r8
 2163 0180 A501      		movw r20,r10
 2164 0182 B101      		movw r22,r2
 2165 0184 812F      		mov r24,r17
 2166               	.LVL195:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 2167               		.loc 11 20 29 discriminator 3 view .LVU434
 2168 0186 EE81      		ldd r30,Y+6
 2169 0188 FF81      		ldd r31,Y+7
 2170 018a 0995      		icall
 2171               	.LVL196:
 2172 018c 1B01      		movw r2,r22
 2173               	.LVL197:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 2174               		.loc 11 20 29 discriminator 3 view .LVU435
 2175               	.LBE61:
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2176               		.loc 11 15 44 is_stmt 1 discriminator 3 view .LVU436
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 2177               		.loc 11 15 45 is_stmt 0 discriminator 3 view .LVU437
 2178 018e F981      		ldd r31,Y+1
 2179 0190 FF5F      		subi r31,lo8(-(1))
 2180 0192 F983      		std Y+1,r31
 2181               	.LVL198:
 2182               	.LBB62:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 2183               		.loc 11 20 29 discriminator 3 view .LVU438
 2184 0194 182F      		mov r17,r24
 2185 0196 00C0      		rjmp .L79
 2186               	.LBE62:
 2187               	.LBE66:
 2188               	.LBE67:
 2189               	.LBE68:
 2190               		.cfi_endproc
 2191               	.LFE102:
 2193               		.section	.text.SOLID_SPLASH,"ax",@progbits
 2194               	.global	SOLID_SPLASH
 2196               	SOLID_SPLASH:
 2197               	.LVL199:
 2198               	.LFB105:
  20:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  21:quantum/rgb_matrix_animations/solid_splash_anim.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_SPLASH
  22:quantum/rgb_matrix_animations/solid_splash_anim.h **** bool SOLID_SPLASH(effect_params_t* params) { return effect_runner_reactive_splash(qsub8(g_last_hit_
 2199               		.loc 4 22 44 is_stmt 1 view -0
 2200               		.cfi_startproc
 2201               	/* prologue: function */
 2202               	/* frame size = 0 */
 2203               	/* stack size = 0 */
 2204               	.L__stack_usage = 0
 2205               		.loc 4 22 46 view .LVU440
 2206               	.LBB69:
 2207               	.LBI69:
  88:./lib/lib8tion/math8.h **** {
 2208               		.loc 2 88 34 view .LVU441
 2209               	.LBB70:
  96:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
 2210               		.loc 2 96 5 view .LVU442
 2211 0000 2091 0000 		lds r18,g_last_hit_tracker
 2212 0004 31E0      		ldi r19,lo8(1)
 2213               	/* #APP */
 2214               	 ;  96 "./lib/lib8tion/math8.h" 1
 2215 0006 231B      		sub r18, r19    
 2216 0008 00F4      		brcc L_1936     
 2217 000a 20E0      		ldi r18, 0x00  
 2218               		L_1936: 
 2219               	 ;  0 "" 2
 2220               	.LVL200:
 110:./lib/lib8tion/math8.h **** #else
 2221               		.loc 2 110 5 view .LVU443
 110:./lib/lib8tion/math8.h **** #else
 2222               		.loc 2 110 5 is_stmt 0 view .LVU444
 2223               	/* #NOAPP */
 2224               	.LBE70:
 2225               	.LBE69:
 2226               		.loc 4 22 53 view .LVU445
 2227 000c 40E0      		ldi r20,lo8(gs(SOLID_SPLASH_math))
 2228 000e 50E0      		ldi r21,hi8(gs(SOLID_SPLASH_math))
 2229 0010 BC01      		movw r22,r24
 2230 0012 822F      		mov r24,r18
 2231               	.LVL201:
 2232               		.loc 4 22 53 view .LVU446
 2233 0014 0C94 0000 		jmp effect_runner_reactive_splash
 2234               	.LVL202:
 2235               		.loc 4 22 53 view .LVU447
 2236               		.cfi_endproc
 2237               	.LFE105:
 2239               		.section	.text.SOLID_COLOR,"ax",@progbits
 2240               	.global	SOLID_COLOR
 2242               	SOLID_COLOR:
 2243               	.LVL203:
 2244               	.LFB103:
 2245               		.file 12 "quantum/rgb_matrix_animations/solid_color_anim.h"
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** RGB_MATRIX_EFFECT(SOLID_COLOR)
   2:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   3:quantum/rgb_matrix_animations/solid_color_anim.h **** 
   4:quantum/rgb_matrix_animations/solid_color_anim.h **** bool SOLID_COLOR(effect_params_t* params) {
 2246               		.loc 12 4 43 is_stmt 1 view -0
 2247               		.cfi_startproc
 2248               		.loc 12 4 43 is_stmt 0 view .LVU449
 2249 0000 BF92      		push r11
 2250               	.LCFI88:
 2251               		.cfi_def_cfa_offset 3
 2252               		.cfi_offset 11, -2
 2253 0002 CF92      		push r12
 2254               	.LCFI89:
 2255               		.cfi_def_cfa_offset 4
 2256               		.cfi_offset 12, -3
 2257 0004 DF92      		push r13
 2258               	.LCFI90:
 2259               		.cfi_def_cfa_offset 5
 2260               		.cfi_offset 13, -4
 2261 0006 EF92      		push r14
 2262               	.LCFI91:
 2263               		.cfi_def_cfa_offset 6
 2264               		.cfi_offset 14, -5
 2265 0008 FF92      		push r15
 2266               	.LCFI92:
 2267               		.cfi_def_cfa_offset 7
 2268               		.cfi_offset 15, -6
 2269 000a 0F93      		push r16
 2270               	.LCFI93:
 2271               		.cfi_def_cfa_offset 8
 2272               		.cfi_offset 16, -7
 2273 000c 1F93      		push r17
 2274               	.LCFI94:
 2275               		.cfi_def_cfa_offset 9
 2276               		.cfi_offset 17, -8
 2277 000e CF93      		push r28
 2278               	.LCFI95:
 2279               		.cfi_def_cfa_offset 10
 2280               		.cfi_offset 28, -9
 2281 0010 DF93      		push r29
 2282               	.LCFI96:
 2283               		.cfi_def_cfa_offset 11
 2284               		.cfi_offset 29, -10
 2285               	/* prologue: function */
 2286               	/* frame size = 0 */
 2287               	/* stack size = 9 */
 2288               	.L__stack_usage = 9
 2289 0012 7C01      		movw r14,r24
   5:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2290               		.loc 12 5 5 is_stmt 1 view .LVU450
 2291 0014 FC01      		movw r30,r24
 2292 0016 C081      		ld r28,Z
 2293 0018 8BE0      		ldi r24,lo8(11)
 2294               	.LVL204:
 2295               		.loc 12 5 5 is_stmt 0 view .LVU451
 2296 001a C89F      		mul r28,r24
 2297 001c C02D      		mov r28,r0
 2298 001e 1124      		clr r1
 2299               	.LVL205:
 2300               		.loc 12 5 5 is_stmt 1 view .LVU452
 2301 0020 1BE0      		ldi r17,lo8(11)
 2302 0022 1C0F      		add r17,r28
 2303               	.LVL206:
 2304               		.loc 12 5 5 view .LVU453
 2305 0024 012F      		mov r16,r17
 2306 0026 1633      		cpi r17,lo8(54)
 2307 0028 00F0      		brlo .L85
 2308 002a 05E3      		ldi r16,lo8(53)
 2309               	.L85:
 2310               	.LVL207:
 2311               		.loc 12 5 44 view .LVU454
   6:quantum/rgb_matrix_animations/solid_color_anim.h **** 
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB rgb = rgb_matrix_hsv_to_rgb(rgb_matrix_config.hsv);
 2312               		.loc 12 7 5 view .LVU455
 2313               		.loc 12 7 15 is_stmt 0 view .LVU456
 2314 002c 6091 0000 		lds r22,rgb_matrix_config+1
 2315 0030 7091 0000 		lds r23,rgb_matrix_config+1+1
 2316 0034 8091 0000 		lds r24,rgb_matrix_config+1+2
 2317 0038 0E94 0000 		call rgb_matrix_hsv_to_rgb
 2318               	.LVL208:
 2319 003c D62E      		mov r13,r22
 2320               	.LVL209:
 2321               		.loc 12 7 15 view .LVU457
 2322 003e C72E      		mov r12,r23
 2323               		.loc 12 7 15 view .LVU458
 2324 0040 B82E      		mov r11,r24
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 2325               		.loc 12 8 5 is_stmt 1 view .LVU459
 2326               	.LBB71:
 2327               		.loc 12 8 10 view .LVU460
 2328               	.LVL210:
 2329               		.loc 12 8 10 is_stmt 0 view .LVU461
 2330 0042 D0E0      		ldi r29,0
 2331               	.LVL211:
 2332               	.L86:
 2333               		.loc 12 8 31 is_stmt 1 discriminator 1 view .LVU462
 2334               		.loc 12 8 5 is_stmt 0 discriminator 1 view .LVU463
 2335 0044 C017      		cp r28,r16
 2336 0046 00F0      		brlo .L88
 2337               	.LBE71:
   9:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  11:quantum/rgb_matrix_animations/solid_color_anim.h ****     }
  12:quantum/rgb_matrix_animations/solid_color_anim.h ****     return led_max < DRIVER_LED_TOTAL;
 2338               		.loc 12 12 5 is_stmt 1 view .LVU464
 2339               		.loc 12 12 20 is_stmt 0 view .LVU465
 2340 0048 81E0      		ldi r24,lo8(1)
 2341 004a 1533      		cpi r17,lo8(53)
 2342 004c 00F0      		brlo .L89
 2343 004e 80E0      		ldi r24,0
 2344               	.L89:
 2345               	/* epilogue start */
  13:quantum/rgb_matrix_animations/solid_color_anim.h **** }
 2346               		.loc 12 13 1 view .LVU466
 2347 0050 DF91      		pop r29
 2348 0052 CF91      		pop r28
 2349               	.LVL212:
 2350               		.loc 12 13 1 view .LVU467
 2351 0054 1F91      		pop r17
 2352 0056 0F91      		pop r16
 2353               	.LVL213:
 2354               		.loc 12 13 1 view .LVU468
 2355 0058 FF90      		pop r15
 2356 005a EF90      		pop r14
 2357               	.LVL214:
 2358               		.loc 12 13 1 view .LVU469
 2359 005c DF90      		pop r13
 2360               	.LVL215:
 2361               		.loc 12 13 1 view .LVU470
 2362 005e CF90      		pop r12
 2363               		.loc 12 13 1 view .LVU471
 2364 0060 BF90      		pop r11
 2365               		.loc 12 13 1 view .LVU472
 2366 0062 0895      		ret
 2367               	.LVL216:
 2368               	.L88:
 2369               	.LBB72:
   9:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2370               		.loc 12 9 9 is_stmt 1 view .LVU473
 2371 0064 FE01      		movw r30,r28
 2372 0066 E050      		subi r30,lo8(-(g_led_config+154))
 2373 0068 F040      		sbci r31,hi8(-(g_led_config+154))
 2374 006a 8081      		ld r24,Z
 2375 006c F701      		movw r30,r14
 2376 006e 9181      		ldd r25,Z+1
 2377 0070 8923      		and r24,r25
 2378 0072 01F0      		breq .L87
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****     }
 2379               		.loc 12 10 9 view .LVU474
 2380 0074 2B2D      		mov r18,r11
 2381 0076 4D2D      		mov r20,r13
 2382 0078 6C2D      		mov r22,r12
 2383 007a CE01      		movw r24,r28
 2384 007c 0E94 0000 		call rgb_matrix_set_color
 2385               	.LVL217:
 2386               	.L87:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2387               		.loc 12 8 44 discriminator 2 view .LVU475
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2388               		.loc 12 8 44 is_stmt 0 discriminator 2 view .LVU476
 2389 0080 2196      		adiw r28,1
 2390               	.LVL218:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2391               		.loc 12 8 44 discriminator 2 view .LVU477
 2392 0082 00C0      		rjmp .L86
 2393               	.LBE72:
 2394               		.cfi_endproc
 2395               	.LFE103:
 2397               		.section	.text.rgb_matrix_set_color_all,"ax",@progbits
 2398               	.global	rgb_matrix_set_color_all
 2400               	rgb_matrix_set_color_all:
 2401               	.LVL219:
 2402               	.LFB118:
 197:quantum/rgb_matrix.c **** }
 198:quantum/rgb_matrix.c **** 
 199:quantum/rgb_matrix.c **** void rgb_matrix_set_color_all(uint8_t red, uint8_t green, uint8_t blue) {
 2403               		.loc 5 199 73 is_stmt 1 view -0
 2404               		.cfi_startproc
 2405               	/* prologue: function */
 2406               	/* frame size = 0 */
 2407               	/* stack size = 0 */
 2408               	.L__stack_usage = 0
 200:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_SPLIT)
 201:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < DRIVER_LED_TOTAL; i++) rgb_matrix_set_color(i, red, green, blue);
 202:quantum/rgb_matrix.c **** #else
 203:quantum/rgb_matrix.c ****     rgb_matrix_driver.set_color_all(red, green, blue);
 2409               		.loc 5 203 5 view .LVU479
 2410 0000 E091 0000 		lds r30,rgb_matrix_driver+4
 2411 0004 F091 0000 		lds r31,rgb_matrix_driver+4+1
 2412 0008 0994      		ijmp
 2413               	.LVL220:
 2414               		.loc 5 203 5 is_stmt 0 view .LVU480
 2415               		.cfi_endproc
 2416               	.LFE118:
 2418               		.section	.text.process_rgb_matrix,"ax",@progbits
 2419               	.global	process_rgb_matrix
 2421               	process_rgb_matrix:
 2422               	.LVL221:
 2423               	.LFB119:
 204:quantum/rgb_matrix.c **** #endif
 205:quantum/rgb_matrix.c **** }
 206:quantum/rgb_matrix.c **** 
 207:quantum/rgb_matrix.c **** void process_rgb_matrix(uint8_t row, uint8_t col, bool pressed) {
 2424               		.loc 5 207 65 is_stmt 1 view -0
 2425               		.cfi_startproc
 2426               		.loc 5 207 65 is_stmt 0 view .LVU482
 2427 0000 CF92      		push r12
 2428               	.LCFI97:
 2429               		.cfi_def_cfa_offset 3
 2430               		.cfi_offset 12, -2
 2431 0002 DF92      		push r13
 2432               	.LCFI98:
 2433               		.cfi_def_cfa_offset 4
 2434               		.cfi_offset 13, -3
 2435 0004 EF92      		push r14
 2436               	.LCFI99:
 2437               		.cfi_def_cfa_offset 5
 2438               		.cfi_offset 14, -4
 2439 0006 FF92      		push r15
 2440               	.LCFI100:
 2441               		.cfi_def_cfa_offset 6
 2442               		.cfi_offset 15, -5
 2443 0008 0F93      		push r16
 2444               	.LCFI101:
 2445               		.cfi_def_cfa_offset 7
 2446               		.cfi_offset 16, -6
 2447 000a 1F93      		push r17
 2448               	.LCFI102:
 2449               		.cfi_def_cfa_offset 8
 2450               		.cfi_offset 17, -7
 2451 000c CF93      		push r28
 2452               	.LCFI103:
 2453               		.cfi_def_cfa_offset 9
 2454               		.cfi_offset 28, -8
 2455 000e DF93      		push r29
 2456               	.LCFI104:
 2457               		.cfi_def_cfa_offset 10
 2458               		.cfi_offset 29, -9
 2459 0010 CDB7      		in r28,__SP_L__
 2460 0012 DEB7      		in r29,__SP_H__
 2461               	.LCFI105:
 2462               		.cfi_def_cfa_register 28
 2463 0014 2897      		sbiw r28,8
 2464               	.LCFI106:
 2465               		.cfi_def_cfa_offset 18
 2466 0016 0FB6      		in __tmp_reg__,__SREG__
 2467 0018 F894      		cli
 2468 001a DEBF      		out __SP_H__,r29
 2469 001c 0FBE      		out __SREG__,__tmp_reg__
 2470 001e CDBF      		out __SP_L__,r28
 2471               	/* prologue: function */
 2472               	/* frame size = 8 */
 2473               	/* stack size = 16 */
 2474               	.L__stack_usage = 16
 2475 0020 182F      		mov r17,r24
 2476 0022 062F      		mov r16,r22
 2477 0024 F42E      		mov r15,r20
 208:quantum/rgb_matrix.c **** #ifndef RGB_MATRIX_SPLIT
 209:quantum/rgb_matrix.c ****     if (!is_keyboard_master()) return;
 2478               		.loc 5 209 5 is_stmt 1 view .LVU483
 2479               		.loc 5 209 10 is_stmt 0 view .LVU484
 2480 0026 0E94 0000 		call is_keyboard_master
 2481               	.LVL222:
 2482               		.loc 5 209 8 view .LVU485
 2483 002a 8823      		tst r24
 2484 002c 01F4      		brne .+2
 2485 002e 00C0      		rjmp .L94
 210:quantum/rgb_matrix.c **** #endif
 211:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 212:quantum/rgb_matrix.c ****     rgb_anykey_timer = 0;
 213:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 214:quantum/rgb_matrix.c **** 
 215:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 216:quantum/rgb_matrix.c ****     uint8_t led[LED_HITS_TO_REMEMBER];
 2486               		.loc 5 216 5 is_stmt 1 view .LVU486
 217:quantum/rgb_matrix.c ****     uint8_t led_count = 0;
 2487               		.loc 5 217 5 view .LVU487
 2488               	.LVL223:
 218:quantum/rgb_matrix.c **** 
 219:quantum/rgb_matrix.c **** #    if defined(RGB_MATRIX_KEYRELEASES)
 220:quantum/rgb_matrix.c ****     if (!pressed)
 221:quantum/rgb_matrix.c **** #    elif defined(RGB_MATRIX_KEYPRESSES)
 222:quantum/rgb_matrix.c ****     if (pressed)
 2489               		.loc 5 222 5 view .LVU488
 2490               		.loc 5 222 8 is_stmt 0 view .LVU489
 2491 0030 FF20      		tst r15
 2492 0032 01F4      		brne .+2
 2493 0034 00C0      		rjmp .L101
 223:quantum/rgb_matrix.c **** #    endif  // defined(RGB_MATRIX_KEYRELEASES)
 224:quantum/rgb_matrix.c ****     {
 225:quantum/rgb_matrix.c ****         led_count = rgb_matrix_map_row_column_to_led(row, col, led);
 2494               		.loc 5 225 9 is_stmt 1 view .LVU490
 2495               		.loc 5 225 21 is_stmt 0 view .LVU491
 2496 0036 AE01      		movw r20,r28
 2497 0038 4F5F      		subi r20,-1
 2498 003a 5F4F      		sbci r21,-1
 2499 003c 602F      		mov r22,r16
 2500 003e 812F      		mov r24,r17
 2501 0040 0E94 0000 		call rgb_matrix_map_row_column_to_led
 2502               	.LVL224:
 2503 0044 F82E      		mov r15,r24
 2504               	.LVL225:
 2505               	.L97:
 226:quantum/rgb_matrix.c ****     }
 227:quantum/rgb_matrix.c **** 
 228:quantum/rgb_matrix.c ****     if (last_hit_buffer.count + led_count > LED_HITS_TO_REMEMBER) {
 2506               		.loc 5 228 5 is_stmt 1 view .LVU492
 2507               		.loc 5 228 24 is_stmt 0 view .LVU493
 2508 0046 E090 0000 		lds r14,last_hit_buffer
 2509               		.loc 5 228 31 view .LVU494
 2510 004a 0F2D      		mov r16,r15
 2511               	.LVL226:
 2512               		.loc 5 228 31 view .LVU495
 2513 004c 10E0      		ldi r17,0
 2514               	.LVL227:
 2515               		.loc 5 228 31 view .LVU496
 2516 004e C801      		movw r24,r16
 2517 0050 8E0D      		add r24,r14
 2518 0052 911D      		adc r25,__zero_reg__
 2519               		.loc 5 228 8 view .LVU497
 2520 0054 0997      		sbiw r24,9
 2521 0056 04F0      		brlt .L98
 229:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.x[0], &last_hit_buffer.x[led_count], LED_HITS_TO_REMEMBER - led_cou
 2522               		.loc 5 229 9 is_stmt 1 view .LVU498
 2523               		.loc 5 229 91 is_stmt 0 view .LVU499
 2524 0058 88E0      		ldi r24,lo8(8)
 2525 005a 90E0      		ldi r25,0
 2526 005c 6C01      		movw r12,r24
 2527 005e C01A      		sub r12,r16
 2528 0060 D10A      		sbc r13,r17
 2529               		.loc 5 229 39 view .LVU500
 2530 0062 B801      		movw r22,r16
 2531 0064 6050      		subi r22,lo8(-(last_hit_buffer+1))
 2532 0066 7040      		sbci r23,hi8(-(last_hit_buffer+1))
 2533               		.loc 5 229 9 view .LVU501
 2534 0068 A601      		movw r20,r12
 2535 006a 80E0      		ldi r24,lo8(last_hit_buffer+1)
 2536 006c 90E0      		ldi r25,hi8(last_hit_buffer+1)
 2537 006e 0E94 0000 		call memcpy
 2538               	.LVL228:
 230:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.y[0], &last_hit_buffer.y[led_count], LED_HITS_TO_REMEMBER - led_cou
 2539               		.loc 5 230 9 is_stmt 1 view .LVU502
 2540               		.loc 5 230 39 is_stmt 0 view .LVU503
 2541 0072 B801      		movw r22,r16
 2542 0074 6050      		subi r22,lo8(-(last_hit_buffer+9))
 2543 0076 7040      		sbci r23,hi8(-(last_hit_buffer+9))
 2544               		.loc 5 230 9 view .LVU504
 2545 0078 A601      		movw r20,r12
 2546 007a 80E0      		ldi r24,lo8(last_hit_buffer+9)
 2547 007c 90E0      		ldi r25,hi8(last_hit_buffer+9)
 2548 007e 0E94 0000 		call memcpy
 2549               	.LVL229:
 231:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.tick[0], &last_hit_buffer.tick[led_count], (LED_HITS_TO_REMEMBER - 
 2550               		.loc 5 231 9 is_stmt 1 view .LVU505
 2551               		.loc 5 231 111 is_stmt 0 view .LVU506
 2552 0082 A601      		movw r20,r12
 2553 0084 440F      		lsl r20
 2554 0086 551F      		rol r21
 2555               		.loc 5 231 42 view .LVU507
 2556 0088 B801      		movw r22,r16
 2557 008a 660F      		lsl r22
 2558 008c 771F      		rol r23
 2559 008e 6050      		subi r22,lo8(-(last_hit_buffer+25))
 2560 0090 7040      		sbci r23,hi8(-(last_hit_buffer+25))
 2561               		.loc 5 231 9 view .LVU508
 2562 0092 80E0      		ldi r24,lo8(last_hit_buffer+25)
 2563 0094 90E0      		ldi r25,hi8(last_hit_buffer+25)
 2564 0096 0E94 0000 		call memcpy
 2565               	.LVL230:
 232:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.index[0], &last_hit_buffer.index[led_count], LED_HITS_TO_REMEMBER -
 2566               		.loc 5 232 9 is_stmt 1 view .LVU509
 2567               		.loc 5 232 43 is_stmt 0 view .LVU510
 2568 009a B801      		movw r22,r16
 2569 009c 6050      		subi r22,lo8(-(last_hit_buffer+17))
 2570 009e 7040      		sbci r23,hi8(-(last_hit_buffer+17))
 2571               		.loc 5 232 9 view .LVU511
 2572 00a0 A601      		movw r20,r12
 2573 00a2 80E0      		ldi r24,lo8(last_hit_buffer+17)
 2574 00a4 90E0      		ldi r25,hi8(last_hit_buffer+17)
 2575 00a6 0E94 0000 		call memcpy
 2576               	.LVL231:
 233:quantum/rgb_matrix.c ****         last_hit_buffer.count--;
 2577               		.loc 5 233 9 is_stmt 1 view .LVU512
 2578               		.loc 5 233 30 is_stmt 0 view .LVU513
 2579 00aa EA94      		dec r14
 2580 00ac E092 0000 		sts last_hit_buffer,r14
 2581               	.L98:
 2582 00b0 1091 0000 		lds r17,last_hit_buffer
 2583 00b4 DE01      		movw r26,r28
 2584 00b6 1196      		adiw r26,1
 217:quantum/rgb_matrix.c **** 
 2585               		.loc 5 217 13 discriminator 1 view .LVU514
 2586 00b8 40E0      		ldi r20,0
 2587               	.L99:
 217:quantum/rgb_matrix.c **** 
 2588               		.loc 5 217 13 discriminator 1 view .LVU515
 2589 00ba 842F      		mov r24,r20
 2590 00bc 810F      		add r24,r17
 2591               	.LVL232:
 2592               	.LBB73:
 234:quantum/rgb_matrix.c ****     }
 235:quantum/rgb_matrix.c **** 
 236:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < led_count; i++) {
 2593               		.loc 5 236 25 is_stmt 1 discriminator 1 view .LVU516
 2594               		.loc 5 236 5 is_stmt 0 discriminator 1 view .LVU517
 2595 00be F412      		cpse r15,r20
 2596 00c0 00C0      		rjmp .L100
 2597 00c2 8093 0000 		sts last_hit_buffer,r24
 2598               	.LVL233:
 2599               	.L94:
 2600               	/* epilogue start */
 2601               		.loc 5 236 5 discriminator 1 view .LVU518
 2602               	.LBE73:
 237:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 238:quantum/rgb_matrix.c ****         last_hit_buffer.x[index]     = g_led_config.point[led[i]].x;
 239:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 240:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 241:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 242:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 243:quantum/rgb_matrix.c ****     }
 244:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 245:quantum/rgb_matrix.c **** 
 246:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
 247:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode == RGB_MATRIX_TYPING_HEATMAP) {
 248:quantum/rgb_matrix.c ****         process_rgb_matrix_typing_heatmap(row, col);
 249:quantum/rgb_matrix.c ****     }
 250:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
 251:quantum/rgb_matrix.c **** }
 2603               		.loc 5 251 1 view .LVU519
 2604 00c6 2896      		adiw r28,8
 2605 00c8 0FB6      		in __tmp_reg__,__SREG__
 2606 00ca F894      		cli
 2607 00cc DEBF      		out __SP_H__,r29
 2608 00ce 0FBE      		out __SREG__,__tmp_reg__
 2609 00d0 CDBF      		out __SP_L__,r28
 2610 00d2 DF91      		pop r29
 2611 00d4 CF91      		pop r28
 2612 00d6 1F91      		pop r17
 2613 00d8 0F91      		pop r16
 2614 00da FF90      		pop r15
 2615 00dc EF90      		pop r14
 2616 00de DF90      		pop r13
 2617 00e0 CF90      		pop r12
 2618 00e2 0895      		ret
 2619               	.LVL234:
 2620               	.L101:
 217:quantum/rgb_matrix.c **** 
 2621               		.loc 5 217 13 view .LVU520
 2622 00e4 F12C      		mov r15,__zero_reg__
 2623               	.LVL235:
 217:quantum/rgb_matrix.c **** 
 2624               		.loc 5 217 13 view .LVU521
 2625 00e6 00C0      		rjmp .L97
 2626               	.LVL236:
 2627               	.L100:
 2628               	.LBB75:
 2629               	.LBB74:
 237:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2630               		.loc 5 237 9 is_stmt 1 discriminator 3 view .LVU522
 238:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2631               		.loc 5 238 9 discriminator 3 view .LVU523
 238:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2632               		.loc 5 238 62 is_stmt 0 discriminator 3 view .LVU524
 2633 00e8 5D91      		ld r21,X+
 2634 00ea 252F      		mov r18,r21
 2635 00ec 30E0      		ldi r19,0
 238:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2636               		.loc 5 238 26 discriminator 3 view .LVU525
 2637 00ee 90E0      		ldi r25,0
 238:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2638               		.loc 5 238 38 discriminator 3 view .LVU526
 2639 00f0 BC01      		movw r22,r24
 2640 00f2 6050      		subi r22,lo8(-(last_hit_buffer))
 2641 00f4 7040      		sbci r23,hi8(-(last_hit_buffer))
 238:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2642               		.loc 5 238 66 discriminator 3 view .LVU527
 2643 00f6 F901      		movw r30,r18
 2644 00f8 EE0F      		lsl r30
 2645 00fa FF1F      		rol r31
 2646 00fc E050      		subi r30,lo8(-(g_led_config+48))
 2647 00fe F040      		sbci r31,hi8(-(g_led_config+48))
 238:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 2648               		.loc 5 238 38 discriminator 3 view .LVU528
 2649 0100 0081      		ld r16,Z
 2650 0102 FB01      		movw r30,r22
 2651 0104 0183      		std Z+1,r16
 239:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 2652               		.loc 5 239 9 is_stmt 1 discriminator 3 view .LVU529
 239:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 2653               		.loc 5 239 66 is_stmt 0 discriminator 3 view .LVU530
 2654 0106 220F      		lsl r18
 2655 0108 331F      		rol r19
 2656 010a F901      		movw r30,r18
 2657 010c E050      		subi r30,lo8(-(g_led_config))
 2658 010e F040      		sbci r31,hi8(-(g_led_config))
 239:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 2659               		.loc 5 239 38 discriminator 3 view .LVU531
 2660 0110 21A9      		ldd r18,Z+49
 2661 0112 FB01      		movw r30,r22
 2662 0114 2187      		std Z+9,r18
 240:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 2663               		.loc 5 240 9 is_stmt 1 discriminator 3 view .LVU532
 240:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 2664               		.loc 5 240 38 is_stmt 0 discriminator 3 view .LVU533
 2665 0116 518B      		std Z+17,r21
 241:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2666               		.loc 5 241 9 is_stmt 1 discriminator 3 view .LVU534
 241:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2667               		.loc 5 241 38 is_stmt 0 discriminator 3 view .LVU535
 2668 0118 880F      		lsl r24
 2669 011a 991F      		rol r25
 2670               	.LVL237:
 241:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 2671               		.loc 5 241 38 discriminator 3 view .LVU536
 2672 011c FC01      		movw r30,r24
 2673 011e E050      		subi r30,lo8(-(last_hit_buffer))
 2674 0120 F040      		sbci r31,hi8(-(last_hit_buffer))
 2675 0122 128E      		std Z+26,__zero_reg__
 2676 0124 118E      		std Z+25,__zero_reg__
 242:quantum/rgb_matrix.c ****     }
 2677               		.loc 5 242 9 is_stmt 1 discriminator 3 view .LVU537
 2678               	.LBE74:
 236:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2679               		.loc 5 236 40 discriminator 3 view .LVU538
 236:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2680               		.loc 5 236 41 is_stmt 0 discriminator 3 view .LVU539
 2681 0126 4F5F      		subi r20,lo8(-(1))
 2682               	.LVL238:
 236:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 2683               		.loc 5 236 41 discriminator 3 view .LVU540
 2684 0128 00C0      		rjmp .L99
 2685               	.LBE75:
 2686               		.cfi_endproc
 2687               	.LFE119:
 2689               		.section	.text.rgb_matrix_test,"ax",@progbits
 2690               	.global	rgb_matrix_test
 2692               	rgb_matrix_test:
 2693               	.LFB120:
 252:quantum/rgb_matrix.c **** 
 253:quantum/rgb_matrix.c **** void rgb_matrix_test(void) {
 2694               		.loc 5 253 28 is_stmt 1 view -0
 2695               		.cfi_startproc
 2696               	/* prologue: function */
 2697               	/* frame size = 0 */
 2698               	/* stack size = 0 */
 2699               	.L__stack_usage = 0
 254:quantum/rgb_matrix.c ****     // Mask out bits 4 and 5
 255:quantum/rgb_matrix.c ****     // Increase the factor to make the test animation slower (and reduce to make it faster)
 256:quantum/rgb_matrix.c ****     uint8_t factor = 10;
 2700               		.loc 5 256 5 view .LVU542
 2701               	.LVL239:
 257:quantum/rgb_matrix.c ****     switch ((g_rgb_timer & (0b11 << factor)) >> factor) {
 2702               		.loc 5 257 5 view .LVU543
 2703               		.loc 5 257 46 is_stmt 0 view .LVU544
 2704 0000 8091 0000 		lds r24,g_rgb_timer
 2705 0004 9091 0000 		lds r25,g_rgb_timer+1
 2706 0008 A091 0000 		lds r26,g_rgb_timer+2
 2707 000c B091 0000 		lds r27,g_rgb_timer+3
 2708 0010 2AE0      		ldi r18,10
 2709               		1:
 2710 0012 B695      		lsr r27
 2711 0014 A795      		ror r26
 2712 0016 9795      		ror r25
 2713 0018 8795      		ror r24
 2714 001a 2A95      		dec r18
 2715 001c 01F4      		brne 1b
 2716 001e 8370      		andi r24,3
 2717 0020 9927      		clr r25
 2718 0022 AA27      		clr r26
 2719 0024 BB27      		clr r27
 2720               		.loc 5 257 5 view .LVU545
 2721 0026 8230      		cpi r24,2
 2722 0028 9105      		cpc r25,__zero_reg__
 2723 002a A105      		cpc r26,__zero_reg__
 2724 002c B105      		cpc r27,__zero_reg__
 2725 002e 01F0      		breq .L103
 2726 0030 8330      		cpi r24,3
 2727 0032 9105      		cpc r25,__zero_reg__
 2728 0034 A105      		cpc r26,__zero_reg__
 2729 0036 B105      		cpc r27,__zero_reg__
 2730 0038 01F0      		breq .L104
 258:quantum/rgb_matrix.c ****         case 0: {
 259:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(20, 0, 0);
 2731               		.loc 5 259 13 view .LVU546
 2732 003a 40E0      		ldi r20,0
 2733 003c 60E0      		ldi r22,0
 257:quantum/rgb_matrix.c ****     switch ((g_rgb_timer & (0b11 << factor)) >> factor) {
 2734               		.loc 5 257 5 view .LVU547
 2735 003e 0197      		sbiw r24,1
 2736 0040 A105      		cpc r26,__zero_reg__
 2737 0042 B105      		cpc r27,__zero_reg__
 2738 0044 01F4      		brne .L106
 260:quantum/rgb_matrix.c ****             break;
 261:quantum/rgb_matrix.c ****         }
 262:quantum/rgb_matrix.c ****         case 1: {
 263:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(0, 20, 0);
 2739               		.loc 5 263 13 is_stmt 1 view .LVU548
 2740 0046 64E1      		ldi r22,lo8(20)
 2741               	.L108:
 264:quantum/rgb_matrix.c ****             break;
 265:quantum/rgb_matrix.c ****         }
 266:quantum/rgb_matrix.c ****         case 2: {
 267:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(0, 0, 20);
 2742               		.loc 5 267 13 is_stmt 0 view .LVU549
 2743 0048 80E0      		ldi r24,0
 2744               	.L107:
 268:quantum/rgb_matrix.c ****             break;
 269:quantum/rgb_matrix.c ****         }
 270:quantum/rgb_matrix.c ****         case 3: {
 271:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(20, 20, 20);
 2745               		.loc 5 271 13 view .LVU550
 2746 004a 0C94 0000 		jmp rgb_matrix_set_color_all
 2747               	.LVL240:
 2748               	.L103:
 267:quantum/rgb_matrix.c ****             break;
 2749               		.loc 5 267 13 is_stmt 1 view .LVU551
 2750 004e 44E1      		ldi r20,lo8(20)
 2751 0050 60E0      		ldi r22,0
 2752 0052 00C0      		rjmp .L108
 2753               	.L104:
 2754               		.loc 5 271 13 view .LVU552
 2755 0054 44E1      		ldi r20,lo8(20)
 2756 0056 64E1      		ldi r22,lo8(20)
 2757               	.L106:
 2758 0058 84E1      		ldi r24,lo8(20)
 2759 005a 00C0      		rjmp .L107
 2760               		.cfi_endproc
 2761               	.LFE120:
 2763               		.section	.text.rgb_matrix_indicators_kb,"ax",@progbits
 2764               		.weak	rgb_matrix_indicators_kb
 2766               	rgb_matrix_indicators_kb:
 2767               	.LFB129:
 272:quantum/rgb_matrix.c ****             break;
 273:quantum/rgb_matrix.c ****         }
 274:quantum/rgb_matrix.c ****     }
 275:quantum/rgb_matrix.c **** }
 276:quantum/rgb_matrix.c **** 
 277:quantum/rgb_matrix.c **** static bool rgb_matrix_none(effect_params_t *params) {
 278:quantum/rgb_matrix.c ****     if (!params->init) {
 279:quantum/rgb_matrix.c ****         return false;
 280:quantum/rgb_matrix.c ****     }
 281:quantum/rgb_matrix.c **** 
 282:quantum/rgb_matrix.c ****     rgb_matrix_set_color_all(0, 0, 0);
 283:quantum/rgb_matrix.c ****     return false;
 284:quantum/rgb_matrix.c **** }
 285:quantum/rgb_matrix.c **** 
 286:quantum/rgb_matrix.c **** static void rgb_task_timers(void) {
 287:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 288:quantum/rgb_matrix.c ****     uint32_t deltaTime = sync_timer_elapsed32(rgb_timer_buffer);
 289:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 290:quantum/rgb_matrix.c ****     rgb_timer_buffer = sync_timer_read32();
 291:quantum/rgb_matrix.c **** 
 292:quantum/rgb_matrix.c ****     // Update double buffer timers
 293:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 294:quantum/rgb_matrix.c ****     if (rgb_anykey_timer < UINT32_MAX) {
 295:quantum/rgb_matrix.c ****         if (UINT32_MAX - deltaTime < rgb_anykey_timer) {
 296:quantum/rgb_matrix.c ****             rgb_anykey_timer = UINT32_MAX;
 297:quantum/rgb_matrix.c ****         } else {
 298:quantum/rgb_matrix.c ****             rgb_anykey_timer += deltaTime;
 299:quantum/rgb_matrix.c ****         }
 300:quantum/rgb_matrix.c ****     }
 301:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 302:quantum/rgb_matrix.c **** 
 303:quantum/rgb_matrix.c ****     // Update double buffer last hit timers
 304:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 305:quantum/rgb_matrix.c ****     uint8_t count = last_hit_buffer.count;
 306:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 307:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 308:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 309:quantum/rgb_matrix.c ****             continue;
 310:quantum/rgb_matrix.c ****         }
 311:quantum/rgb_matrix.c ****         last_hit_buffer.tick[i] += deltaTime;
 312:quantum/rgb_matrix.c ****     }
 313:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 314:quantum/rgb_matrix.c **** }
 315:quantum/rgb_matrix.c **** 
 316:quantum/rgb_matrix.c **** static void rgb_task_sync(void) {
 317:quantum/rgb_matrix.c ****     // next task
 318:quantum/rgb_matrix.c ****     if (sync_timer_elapsed32(g_rgb_timer) >= RGB_MATRIX_LED_FLUSH_LIMIT) rgb_task_state = STARTING;
 319:quantum/rgb_matrix.c **** }
 320:quantum/rgb_matrix.c **** 
 321:quantum/rgb_matrix.c **** static void rgb_task_start(void) {
 322:quantum/rgb_matrix.c ****     // reset iter
 323:quantum/rgb_matrix.c ****     rgb_effect_params.iter = 0;
 324:quantum/rgb_matrix.c **** 
 325:quantum/rgb_matrix.c ****     // update double buffers
 326:quantum/rgb_matrix.c ****     g_rgb_timer = rgb_timer_buffer;
 327:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 328:quantum/rgb_matrix.c ****     g_last_hit_tracker = last_hit_buffer;
 329:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 330:quantum/rgb_matrix.c **** 
 331:quantum/rgb_matrix.c ****     // next task
 332:quantum/rgb_matrix.c ****     rgb_task_state = RENDERING;
 333:quantum/rgb_matrix.c **** }
 334:quantum/rgb_matrix.c **** 
 335:quantum/rgb_matrix.c **** static void rgb_task_render(uint8_t effect) {
 336:quantum/rgb_matrix.c ****     bool rendering         = false;
 337:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 338:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 339:quantum/rgb_matrix.c ****         rgb_effect_params.flags = rgb_matrix_config.flags;
 340:quantum/rgb_matrix.c ****         rgb_matrix_set_color_all(0, 0, 0);
 341:quantum/rgb_matrix.c ****     }
 342:quantum/rgb_matrix.c **** 
 343:quantum/rgb_matrix.c ****     // each effect can opt to do calculations
 344:quantum/rgb_matrix.c ****     // and/or request PWM buffer updates.
 345:quantum/rgb_matrix.c ****     switch (effect) {
 346:quantum/rgb_matrix.c ****         case RGB_MATRIX_NONE:
 347:quantum/rgb_matrix.c ****             rendering = rgb_matrix_none(&rgb_effect_params);
 348:quantum/rgb_matrix.c ****             break;
 349:quantum/rgb_matrix.c **** 
 350:quantum/rgb_matrix.c **** // ---------------------------------------------
 351:quantum/rgb_matrix.c **** // -----Begin rgb effect switch case macros-----
 352:quantum/rgb_matrix.c **** #define RGB_MATRIX_EFFECT(name, ...)          \
 353:quantum/rgb_matrix.c ****     case RGB_MATRIX_##name:                   \
 354:quantum/rgb_matrix.c ****         rendering = name(&rgb_effect_params); \
 355:quantum/rgb_matrix.c ****         break;
 356:quantum/rgb_matrix.c **** #include "rgb_matrix_animations/rgb_matrix_effects.inc"
 357:quantum/rgb_matrix.c **** #undef RGB_MATRIX_EFFECT
 358:quantum/rgb_matrix.c **** 
 359:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_CUSTOM_KB) || defined(RGB_MATRIX_CUSTOM_USER)
 360:quantum/rgb_matrix.c **** #    define RGB_MATRIX_EFFECT(name, ...)          \
 361:quantum/rgb_matrix.c ****         case RGB_MATRIX_CUSTOM_##name:            \
 362:quantum/rgb_matrix.c ****             rendering = name(&rgb_effect_params); \
 363:quantum/rgb_matrix.c ****             break;
 364:quantum/rgb_matrix.c **** #    ifdef RGB_MATRIX_CUSTOM_KB
 365:quantum/rgb_matrix.c **** #        include "rgb_matrix_kb.inc"
 366:quantum/rgb_matrix.c **** #    endif
 367:quantum/rgb_matrix.c **** #    ifdef RGB_MATRIX_CUSTOM_USER
 368:quantum/rgb_matrix.c **** #        include "rgb_matrix_user.inc"
 369:quantum/rgb_matrix.c **** #    endif
 370:quantum/rgb_matrix.c **** #    undef RGB_MATRIX_EFFECT
 371:quantum/rgb_matrix.c **** #endif
 372:quantum/rgb_matrix.c ****             // -----End rgb effect switch case macros-------
 373:quantum/rgb_matrix.c ****             // ---------------------------------------------
 374:quantum/rgb_matrix.c **** 
 375:quantum/rgb_matrix.c ****         // Factory default magic value
 376:quantum/rgb_matrix.c ****         case UINT8_MAX: {
 377:quantum/rgb_matrix.c ****             rgb_matrix_test();
 378:quantum/rgb_matrix.c ****             rgb_task_state = FLUSHING;
 379:quantum/rgb_matrix.c ****         }
 380:quantum/rgb_matrix.c ****             return;
 381:quantum/rgb_matrix.c ****     }
 382:quantum/rgb_matrix.c **** 
 383:quantum/rgb_matrix.c ****     rgb_effect_params.iter++;
 384:quantum/rgb_matrix.c **** 
 385:quantum/rgb_matrix.c ****     // next task
 386:quantum/rgb_matrix.c ****     if (!rendering) {
 387:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 388:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 389:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 390:quantum/rgb_matrix.c ****             rgb_task_state = SYNCING;
 391:quantum/rgb_matrix.c ****         }
 392:quantum/rgb_matrix.c ****     }
 393:quantum/rgb_matrix.c **** }
 394:quantum/rgb_matrix.c **** 
 395:quantum/rgb_matrix.c **** static void rgb_task_flush(uint8_t effect) {
 396:quantum/rgb_matrix.c ****     // update last trackers after the first full render so we can init over several frames
 397:quantum/rgb_matrix.c ****     rgb_last_effect = effect;
 398:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 399:quantum/rgb_matrix.c **** 
 400:quantum/rgb_matrix.c ****     // update pwm buffers
 401:quantum/rgb_matrix.c ****     rgb_matrix_update_pwm_buffers();
 402:quantum/rgb_matrix.c **** 
 403:quantum/rgb_matrix.c ****     // next task
 404:quantum/rgb_matrix.c ****     rgb_task_state = SYNCING;
 405:quantum/rgb_matrix.c **** }
 406:quantum/rgb_matrix.c **** 
 407:quantum/rgb_matrix.c **** void rgb_matrix_task(void) {
 408:quantum/rgb_matrix.c ****     rgb_task_timers();
 409:quantum/rgb_matrix.c **** 
 410:quantum/rgb_matrix.c ****     // Ideally we would also stop sending zeros to the LED driver PWM buffers
 411:quantum/rgb_matrix.c ****     // while suspended and just do a software shutdown. This is a cheap hack for now.
 412:quantum/rgb_matrix.c ****     bool suspend_backlight = suspend_state ||
 413:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 414:quantum/rgb_matrix.c ****                              (rgb_anykey_timer > (uint32_t)RGB_DISABLE_TIMEOUT) ||
 415:quantum/rgb_matrix.c **** #endif  // RGB_DISABLE_TIMEOUT > 0
 416:quantum/rgb_matrix.c ****                              false;
 417:quantum/rgb_matrix.c **** 
 418:quantum/rgb_matrix.c ****     uint8_t effect = suspend_backlight || !rgb_matrix_config.enable ? 0 : rgb_matrix_config.mode;
 419:quantum/rgb_matrix.c **** 
 420:quantum/rgb_matrix.c ****     switch (rgb_task_state) {
 421:quantum/rgb_matrix.c ****         case STARTING:
 422:quantum/rgb_matrix.c ****             rgb_task_start();
 423:quantum/rgb_matrix.c ****             break;
 424:quantum/rgb_matrix.c ****         case RENDERING:
 425:quantum/rgb_matrix.c ****             rgb_task_render(effect);
 426:quantum/rgb_matrix.c ****             if (effect) {
 427:quantum/rgb_matrix.c ****                 rgb_matrix_indicators();
 428:quantum/rgb_matrix.c ****                 rgb_matrix_indicators_advanced(&rgb_effect_params);
 429:quantum/rgb_matrix.c ****             }
 430:quantum/rgb_matrix.c ****             break;
 431:quantum/rgb_matrix.c ****         case FLUSHING:
 432:quantum/rgb_matrix.c ****             rgb_task_flush(effect);
 433:quantum/rgb_matrix.c ****             break;
 434:quantum/rgb_matrix.c ****         case SYNCING:
 435:quantum/rgb_matrix.c ****             rgb_task_sync();
 436:quantum/rgb_matrix.c ****             break;
 437:quantum/rgb_matrix.c ****     }
 438:quantum/rgb_matrix.c **** }
 439:quantum/rgb_matrix.c **** 
 440:quantum/rgb_matrix.c **** void rgb_matrix_indicators(void) {
 441:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 442:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 443:quantum/rgb_matrix.c **** }
 444:quantum/rgb_matrix.c **** 
 445:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_kb(void) {}
 2768               		.loc 5 445 59 view -0
 2769               		.cfi_startproc
 2770               	/* prologue: function */
 2771               	/* frame size = 0 */
 2772               	/* stack size = 0 */
 2773               	.L__stack_usage = 0
 2774               		.loc 5 445 60 view .LVU554
 2775               	/* epilogue start */
 2776               		.loc 5 445 1 is_stmt 0 view .LVU555
 2777 0000 0895      		ret
 2778               		.cfi_endproc
 2779               	.LFE129:
 2781               		.set	rgb_matrix_indicators_kb.localalias.5,rgb_matrix_indicators_kb
 2782               		.section	.text.rgb_matrix_indicators_user,"ax",@progbits
 2783               		.weak	rgb_matrix_indicators_user
 2785               	rgb_matrix_indicators_user:
 2786               	.LFB198:
 2787               		.cfi_startproc
 2788               	/* prologue: function */
 2789               	/* frame size = 0 */
 2790               	/* stack size = 0 */
 2791               	.L__stack_usage = 0
 2792               	/* epilogue start */
 2793 0000 0895      		ret
 2794               		.cfi_endproc
 2795               	.LFE198:
 2797               		.section	.text.rgb_matrix_indicators,"ax",@progbits
 2798               	.global	rgb_matrix_indicators
 2800               	rgb_matrix_indicators:
 2801               	.LFB128:
 440:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 2802               		.loc 5 440 34 is_stmt 1 view -0
 2803               		.cfi_startproc
 2804               	/* prologue: function */
 2805               	/* frame size = 0 */
 2806               	/* stack size = 0 */
 2807               	.L__stack_usage = 0
 441:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 2808               		.loc 5 441 5 view .LVU557
 2809 0000 0E94 0000 		call rgb_matrix_indicators_kb
 2810               	.LVL241:
 442:quantum/rgb_matrix.c **** }
 2811               		.loc 5 442 5 view .LVU558
 2812 0004 0C94 0000 		jmp rgb_matrix_indicators_user
 2813               	.LVL242:
 2814               		.cfi_endproc
 2815               	.LFE128:
 2817               		.section	.text.rgb_matrix_indicators_advanced_kb,"ax",@progbits
 2818               		.weak	rgb_matrix_indicators_advanced_kb
 2820               	rgb_matrix_indicators_advanced_kb:
 2821               	.LVL243:
 2822               	.LFB132:
 446:quantum/rgb_matrix.c **** 
 447:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_user(void) {}
 448:quantum/rgb_matrix.c **** 
 449:quantum/rgb_matrix.c **** void rgb_matrix_indicators_advanced(effect_params_t *params) {
 450:quantum/rgb_matrix.c ****     /* special handling is needed for "params->iter", since it's already been incremented.
 451:quantum/rgb_matrix.c ****      * Could move the invocations to rgb_task_render, but then it's missing a few checks
 452:quantum/rgb_matrix.c ****      * and not sure which would be better. Otherwise, this should be called from
 453:quantum/rgb_matrix.c ****      * rgb_task_render, right before the iter++ line.
 454:quantum/rgb_matrix.c ****      */
 455:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_LED_PROCESS_LIMIT) && RGB_MATRIX_LED_PROCESS_LIMIT > 0 && RGB_MATRIX_LED_PRO
 456:quantum/rgb_matrix.c ****     uint8_t min = RGB_MATRIX_LED_PROCESS_LIMIT * (params->iter - 1);
 457:quantum/rgb_matrix.c ****     uint8_t max = min + RGB_MATRIX_LED_PROCESS_LIMIT;
 458:quantum/rgb_matrix.c ****     if (max > DRIVER_LED_TOTAL) max = DRIVER_LED_TOTAL;
 459:quantum/rgb_matrix.c **** #else
 460:quantum/rgb_matrix.c ****     uint8_t min = 0;
 461:quantum/rgb_matrix.c ****     uint8_t max = DRIVER_LED_TOTAL;
 462:quantum/rgb_matrix.c **** #endif
 463:quantum/rgb_matrix.c ****     rgb_matrix_indicators_advanced_kb(min, max);
 464:quantum/rgb_matrix.c ****     rgb_matrix_indicators_advanced_user(min, max);
 465:quantum/rgb_matrix.c **** }
 466:quantum/rgb_matrix.c **** 
 467:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {}
 2823               		.loc 5 467 96 view -0
 2824               		.cfi_startproc
 2825               	/* prologue: function */
 2826               	/* frame size = 0 */
 2827               	/* stack size = 0 */
 2828               	.L__stack_usage = 0
 2829               		.loc 5 467 97 view .LVU560
 2830               	/* epilogue start */
 2831               		.loc 5 467 1 is_stmt 0 view .LVU561
 2832 0000 0895      		ret
 2833               		.cfi_endproc
 2834               	.LFE132:
 2836               		.set	rgb_matrix_indicators_advanced_kb.localalias.6,rgb_matrix_indicators_advanced_kb
 2837               		.section	.text.rgb_matrix_indicators_advanced_user,"ax",@progbits
 2838               		.weak	rgb_matrix_indicators_advanced_user
 2840               	rgb_matrix_indicators_advanced_user:
 2841               	.LFB200:
 2842               		.cfi_startproc
 2843               	/* prologue: function */
 2844               	/* frame size = 0 */
 2845               	/* stack size = 0 */
 2846               	.L__stack_usage = 0
 2847               	/* epilogue start */
 2848 0000 0895      		ret
 2849               		.cfi_endproc
 2850               	.LFE200:
 2852               		.section	.text.rgb_matrix_indicators_advanced,"ax",@progbits
 2853               	.global	rgb_matrix_indicators_advanced
 2855               	rgb_matrix_indicators_advanced:
 2856               	.LVL244:
 2857               	.LFB131:
 449:quantum/rgb_matrix.c ****     /* special handling is needed for "params->iter", since it's already been incremented.
 2858               		.loc 5 449 62 is_stmt 1 view -0
 2859               		.cfi_startproc
 449:quantum/rgb_matrix.c ****     /* special handling is needed for "params->iter", since it's already been incremented.
 2860               		.loc 5 449 62 is_stmt 0 view .LVU563
 2861 0000 CF93      		push r28
 2862               	.LCFI107:
 2863               		.cfi_def_cfa_offset 3
 2864               		.cfi_offset 28, -2
 2865 0002 DF93      		push r29
 2866               	.LCFI108:
 2867               		.cfi_def_cfa_offset 4
 2868               		.cfi_offset 29, -3
 2869               	/* prologue: function */
 2870               	/* frame size = 0 */
 2871               	/* stack size = 2 */
 2872               	.L__stack_usage = 2
 456:quantum/rgb_matrix.c ****     uint8_t max = min + RGB_MATRIX_LED_PROCESS_LIMIT;
 2873               		.loc 5 456 5 is_stmt 1 view .LVU564
 456:quantum/rgb_matrix.c ****     uint8_t max = min + RGB_MATRIX_LED_PROCESS_LIMIT;
 2874               		.loc 5 456 13 is_stmt 0 view .LVU565
 2875 0004 FC01      		movw r30,r24
 2876 0006 C081      		ld r28,Z
 2877 0008 8BE0      		ldi r24,lo8(11)
 2878               	.LVL245:
 456:quantum/rgb_matrix.c ****     uint8_t max = min + RGB_MATRIX_LED_PROCESS_LIMIT;
 2879               		.loc 5 456 13 view .LVU566
 2880 000a C89F      		mul r28,r24
 2881 000c C02D      		mov r28,r0
 2882 000e 1124      		clr r1
 2883 0010 D5EF      		ldi r29,lo8(-11)
 2884 0012 DC0F      		add r29,r28
 2885               	.LVL246:
 457:quantum/rgb_matrix.c ****     if (max > DRIVER_LED_TOTAL) max = DRIVER_LED_TOTAL;
 2886               		.loc 5 457 5 is_stmt 1 view .LVU567
 458:quantum/rgb_matrix.c **** #else
 2887               		.loc 5 458 5 view .LVU568
 2888 0014 C633      		cpi r28,lo8(54)
 2889 0016 00F0      		brlo .L115
 2890 0018 C5E3      		ldi r28,lo8(53)
 2891               	.LVL247:
 2892               	.L115:
 463:quantum/rgb_matrix.c ****     rgb_matrix_indicators_advanced_user(min, max);
 2893               		.loc 5 463 5 view .LVU569
 2894 001a 6C2F      		mov r22,r28
 2895 001c 8D2F      		mov r24,r29
 2896 001e 0E94 0000 		call rgb_matrix_indicators_advanced_kb
 2897               	.LVL248:
 464:quantum/rgb_matrix.c **** }
 2898               		.loc 5 464 5 view .LVU570
 2899 0022 6C2F      		mov r22,r28
 2900 0024 8D2F      		mov r24,r29
 2901               	/* epilogue start */
 465:quantum/rgb_matrix.c **** 
 2902               		.loc 5 465 1 is_stmt 0 view .LVU571
 2903 0026 DF91      		pop r29
 2904               	.LVL249:
 465:quantum/rgb_matrix.c **** 
 2905               		.loc 5 465 1 view .LVU572
 2906 0028 CF91      		pop r28
 2907               	.LVL250:
 464:quantum/rgb_matrix.c **** }
 2908               		.loc 5 464 5 view .LVU573
 2909 002a 0C94 0000 		jmp rgb_matrix_indicators_advanced_user
 2910               	.LVL251:
 464:quantum/rgb_matrix.c **** }
 2911               		.loc 5 464 5 view .LVU574
 2912               		.cfi_endproc
 2913               	.LFE131:
 2915               		.section	.rodata
 2916               	.LC1:
 2917 0003 29        		.byte	41
 2918 0004 2F        		.byte	47
 2919 0005 30        		.byte	48
 2920 0006 31        		.byte	49
 2921 0007 32        		.byte	50
 2922 0008 33        		.byte	51
 2923 0009 34        		.byte	52
 2924 000a 10        		.byte	16
 2925 000b 13        		.byte	19
 2926 000c 22        		.byte	34
 2927 000d 2C        		.byte	44
 2928 000e 2D        		.byte	45
 2929 000f 2E        		.byte	46
 2930               	.LC2:
 2931 0010 29        		.byte	41
 2932 0011 2F        		.byte	47
 2933 0012 30        		.byte	48
 2934 0013 31        		.byte	49
 2935 0014 32        		.byte	50
 2936 0015 33        		.byte	51
 2937 0016 34        		.byte	52
 2938 0017 0D        		.byte	13
 2939 0018 0E        		.byte	14
 2940 0019 0F        		.byte	15
 2941 001a 10        		.byte	16
 2942 001b 11        		.byte	17
 2943 001c 12        		.byte	18
 2944 001d 13        		.byte	19
 2945 001e 14        		.byte	20
 2946 001f 15        		.byte	21
 2947 0020 16        		.byte	22
 2948 0021 2D        		.byte	45
 2949 0022 1C        		.byte	28
 2950 0023 1D        		.byte	29
 2951               	.LC3:
 2952 0024 29        		.byte	41
 2953 0025 2F        		.byte	47
 2954 0026 30        		.byte	48
 2955 0027 31        		.byte	49
 2956 0028 32        		.byte	50
 2957 0029 33        		.byte	51
 2958 002a 34        		.byte	52
 2959 002b 13        		.byte	19
 2960 002c 14        		.byte	20
 2961 002d 15        		.byte	21
 2962 002e 1F        		.byte	31
 2963 002f 20        		.byte	32
 2964 0030 21        		.byte	33
 2965 0031 2B        		.byte	43
 2966 0032 1D        		.byte	29
 2967               	.LC4:
 2968 0033 29        		.byte	41
 2969 0034 2F        		.byte	47
 2970 0035 30        		.byte	48
 2971 0036 31        		.byte	49
 2972 0037 32        		.byte	50
 2973 0038 33        		.byte	51
 2974 0039 34        		.byte	52
 2975 003a 22        		.byte	34
 2976 003b 2C        		.byte	44
 2977 003c 2D        		.byte	45
 2978 003d 2E        		.byte	46
 2979 003e 15        		.byte	21
 2980 003f 17        		.byte	23
 2981 0040 14        		.byte	20
 2982 0041 20        		.byte	32
 2983 0042 1D        		.byte	29
 2984               		.section	.text.rgb_matrix_task,"ax",@progbits
 2985               	.global	rgb_matrix_task
 2987               	rgb_matrix_task:
 2988               	.LFB127:
 407:quantum/rgb_matrix.c ****     rgb_task_timers();
 2989               		.loc 5 407 28 is_stmt 1 view -0
 2990               		.cfi_startproc
 2991 0000 4F92      		push r4
 2992               	.LCFI109:
 2993               		.cfi_def_cfa_offset 3
 2994               		.cfi_offset 4, -2
 2995 0002 5F92      		push r5
 2996               	.LCFI110:
 2997               		.cfi_def_cfa_offset 4
 2998               		.cfi_offset 5, -3
 2999 0004 6F92      		push r6
 3000               	.LCFI111:
 3001               		.cfi_def_cfa_offset 5
 3002               		.cfi_offset 6, -4
 3003 0006 7F92      		push r7
 3004               	.LCFI112:
 3005               		.cfi_def_cfa_offset 6
 3006               		.cfi_offset 7, -5
 3007 0008 8F92      		push r8
 3008               	.LCFI113:
 3009               		.cfi_def_cfa_offset 7
 3010               		.cfi_offset 8, -6
 3011 000a 9F92      		push r9
 3012               	.LCFI114:
 3013               		.cfi_def_cfa_offset 8
 3014               		.cfi_offset 9, -7
 3015 000c AF92      		push r10
 3016               	.LCFI115:
 3017               		.cfi_def_cfa_offset 9
 3018               		.cfi_offset 10, -8
 3019 000e BF92      		push r11
 3020               	.LCFI116:
 3021               		.cfi_def_cfa_offset 10
 3022               		.cfi_offset 11, -9
 3023 0010 CF92      		push r12
 3024               	.LCFI117:
 3025               		.cfi_def_cfa_offset 11
 3026               		.cfi_offset 12, -10
 3027 0012 DF92      		push r13
 3028               	.LCFI118:
 3029               		.cfi_def_cfa_offset 12
 3030               		.cfi_offset 13, -11
 3031 0014 EF92      		push r14
 3032               	.LCFI119:
 3033               		.cfi_def_cfa_offset 13
 3034               		.cfi_offset 14, -12
 3035 0016 FF92      		push r15
 3036               	.LCFI120:
 3037               		.cfi_def_cfa_offset 14
 3038               		.cfi_offset 15, -13
 3039 0018 0F93      		push r16
 3040               	.LCFI121:
 3041               		.cfi_def_cfa_offset 15
 3042               		.cfi_offset 16, -14
 3043 001a 1F93      		push r17
 3044               	.LCFI122:
 3045               		.cfi_def_cfa_offset 16
 3046               		.cfi_offset 17, -15
 3047 001c CF93      		push r28
 3048               	.LCFI123:
 3049               		.cfi_def_cfa_offset 17
 3050               		.cfi_offset 28, -16
 3051 001e DF93      		push r29
 3052               	.LCFI124:
 3053               		.cfi_def_cfa_offset 18
 3054               		.cfi_offset 29, -17
 3055 0020 CDB7      		in r28,__SP_L__
 3056 0022 DEB7      		in r29,__SP_H__
 3057               	.LCFI125:
 3058               		.cfi_def_cfa_register 28
 3059 0024 6497      		sbiw r28,20
 3060               	.LCFI126:
 3061               		.cfi_def_cfa_offset 38
 3062 0026 0FB6      		in __tmp_reg__,__SREG__
 3063 0028 F894      		cli
 3064 002a DEBF      		out __SP_H__,r29
 3065 002c 0FBE      		out __SREG__,__tmp_reg__
 3066 002e CDBF      		out __SP_L__,r28
 3067               	/* prologue: function */
 3068               	/* frame size = 20 */
 3069               	/* stack size = 36 */
 3070               	.L__stack_usage = 36
 408:quantum/rgb_matrix.c **** 
 3071               		.loc 5 408 5 view .LVU576
 3072               	.LBB101:
 3073               	.LBI101:
 286:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 3074               		.loc 5 286 13 view .LVU577
 3075               	.LBB102:
 288:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 3076               		.loc 5 288 5 view .LVU578
 288:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_KEYREACTIVE_ENABLED) || RGB_DISABLE_TIMEOUT > 0
 3077               		.loc 5 288 26 is_stmt 0 view .LVU579
 3078 0030 6091 0000 		lds r22,rgb_timer_buffer
 3079 0034 7091 0000 		lds r23,rgb_timer_buffer+1
 3080 0038 8091 0000 		lds r24,rgb_timer_buffer+2
 3081 003c 9091 0000 		lds r25,rgb_timer_buffer+3
 3082 0040 0E94 0000 		call timer_elapsed32
 3083               	.LVL252:
 3084 0044 6B01      		movw r12,r22
 3085 0046 7C01      		movw r14,r24
 3086               	.LVL253:
 290:quantum/rgb_matrix.c **** 
 3087               		.loc 5 290 5 is_stmt 1 view .LVU580
 290:quantum/rgb_matrix.c **** 
 3088               		.loc 5 290 24 is_stmt 0 view .LVU581
 3089 0048 0E94 0000 		call timer_read32
 3090               	.LVL254:
 3091 004c 4B01      		movw r8,r22
 3092 004e 5C01      		movw r10,r24
 290:quantum/rgb_matrix.c **** 
 3093               		.loc 5 290 22 view .LVU582
 3094 0050 8092 0000 		sts rgb_timer_buffer,r8
 3095 0054 9092 0000 		sts rgb_timer_buffer+1,r9
 3096 0058 A092 0000 		sts rgb_timer_buffer+2,r10
 3097 005c B092 0000 		sts rgb_timer_buffer+3,r11
 305:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 3098               		.loc 5 305 5 is_stmt 1 view .LVU583
 305:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 3099               		.loc 5 305 13 is_stmt 0 view .LVU584
 3100 0060 A091 0000 		lds r26,last_hit_buffer
 3101               	.LVL255:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3102               		.loc 5 306 5 is_stmt 1 view .LVU585
 3103               	.LBB103:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3104               		.loc 5 306 10 view .LVU586
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3105               		.loc 5 306 10 is_stmt 0 view .LVU587
 3106 0064 E0E0      		ldi r30,lo8(last_hit_buffer)
 3107 0066 F0E0      		ldi r31,hi8(last_hit_buffer)
 3108               	.LBE103:
 305:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 3109               		.loc 5 305 13 view .LVU588
 3110 0068 8A2F      		mov r24,r26
 3111               	.LBB104:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3112               		.loc 5 306 18 view .LVU589
 3113 006a 90E0      		ldi r25,0
 307:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 3114               		.loc 5 307 24 view .LVU590
 3115 006c 4FEF      		ldi r20,lo8(-1)
 3116 006e 5FEF      		ldi r21,lo8(-1)
 3117 0070 60E0      		ldi r22,0
 3118 0072 70E0      		ldi r23,0
 3119 0074 4C19      		sub r20,r12
 3120 0076 5D09      		sbc r21,r13
 3121 0078 6E09      		sbc r22,r14
 3122 007a 7F09      		sbc r23,r15
 3123               	.LVL256:
 3124               	.L117:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3125               		.loc 5 306 25 is_stmt 1 view .LVU591
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3126               		.loc 5 306 5 is_stmt 0 view .LVU592
 3127 007c A913      		cpse r26,r25
 3128 007e 00C0      		rjmp .L120
 3129 0080 8093 0000 		sts last_hit_buffer,r24
 3130               	.LVL257:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3131               		.loc 5 306 5 view .LVU593
 3132               	.LBE104:
 3133               	.LBE102:
 3134               	.LBE101:
 412:quantum/rgb_matrix.c **** #if RGB_DISABLE_TIMEOUT > 0
 3135               		.loc 5 412 5 is_stmt 1 view .LVU594
 418:quantum/rgb_matrix.c **** 
 3136               		.loc 5 418 5 view .LVU595
 418:quantum/rgb_matrix.c **** 
 3137               		.loc 5 418 13 is_stmt 0 view .LVU596
 3138 0084 8091 0000 		lds r24,suspend_state
 3139 0088 10E0      		ldi r17,0
 3140 008a 8111      		cpse r24,__zero_reg__
 3141 008c 00C0      		rjmp .L121
 418:quantum/rgb_matrix.c **** 
 3142               		.loc 5 418 43 discriminator 1 view .LVU597
 3143 008e 8091 0000 		lds r24,rgb_matrix_config
 3144 0092 182F      		mov r17,r24
 3145 0094 1370      		andi r17,lo8(3)
 418:quantum/rgb_matrix.c **** 
 3146               		.loc 5 418 40 discriminator 1 view .LVU598
 3147 0096 01F0      		breq .L121
 418:quantum/rgb_matrix.c **** 
 3148               		.loc 5 418 92 discriminator 3 view .LVU599
 3149 0098 182F      		mov r17,r24
 3150 009a 1695      		lsr r17
 3151 009c 1695      		lsr r17
 3152               	.L121:
 3153               	.LVL258:
 420:quantum/rgb_matrix.c ****         case STARTING:
 3154               		.loc 5 420 5 is_stmt 1 discriminator 6 view .LVU600
 3155 009e 8091 0000 		lds r24,rgb_task_state
 3156 00a2 8130      		cpi r24,lo8(1)
 3157 00a4 01F4      		brne .+2
 3158 00a6 00C0      		rjmp .L122
 420:quantum/rgb_matrix.c ****         case STARTING:
 3159               		.loc 5 420 5 is_stmt 0 view .LVU601
 3160 00a8 8823      		tst r24
 3161 00aa 01F0      		breq .L123
 3162 00ac 8230      		cpi r24,lo8(2)
 3163 00ae 01F4      		brne .+2
 3164 00b0 00C0      		rjmp .L124
 3165 00b2 8330      		cpi r24,lo8(3)
 3166 00b4 01F4      		brne .+2
 3167 00b6 00C0      		rjmp .L125
 3168               	.LVL259:
 3169               	.L116:
 3170               	/* epilogue start */
 438:quantum/rgb_matrix.c **** 
 3171               		.loc 5 438 1 view .LVU602
 3172 00b8 6496      		adiw r28,20
 3173 00ba 0FB6      		in __tmp_reg__,__SREG__
 3174 00bc F894      		cli
 3175 00be DEBF      		out __SP_H__,r29
 3176 00c0 0FBE      		out __SREG__,__tmp_reg__
 3177 00c2 CDBF      		out __SP_L__,r28
 3178 00c4 DF91      		pop r29
 3179 00c6 CF91      		pop r28
 3180 00c8 1F91      		pop r17
 3181               	.LVL260:
 438:quantum/rgb_matrix.c **** 
 3182               		.loc 5 438 1 view .LVU603
 3183 00ca 0F91      		pop r16
 3184 00cc FF90      		pop r15
 3185 00ce EF90      		pop r14
 3186 00d0 DF90      		pop r13
 3187 00d2 CF90      		pop r12
 3188 00d4 BF90      		pop r11
 3189 00d6 AF90      		pop r10
 3190 00d8 9F90      		pop r9
 3191 00da 8F90      		pop r8
 3192 00dc 7F90      		pop r7
 3193 00de 6F90      		pop r6
 3194 00e0 5F90      		pop r5
 3195 00e2 4F90      		pop r4
 3196 00e4 0895      		ret
 3197               	.LVL261:
 3198               	.L120:
 3199               	.LBB107:
 3200               	.LBB106:
 3201               	.LBB105:
 307:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 3202               		.loc 5 307 9 is_stmt 1 view .LVU604
 307:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 3203               		.loc 5 307 58 is_stmt 0 view .LVU605
 3204 00e6 218D      		ldd r18,Z+25
 3205 00e8 328D      		ldd r19,Z+26
 3206 00ea 2901      		movw r4,r18
 3207 00ec 712C      		mov r7,__zero_reg__
 3208 00ee 612C      		mov r6,__zero_reg__
 307:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 3209               		.loc 5 307 12 view .LVU606
 3210 00f0 4415      		cp r20,r4
 3211 00f2 5505      		cpc r21,r5
 3212 00f4 6605      		cpc r22,r6
 3213 00f6 7705      		cpc r23,r7
 3214 00f8 00F4      		brsh .L118
 308:quantum/rgb_matrix.c ****             continue;
 3215               		.loc 5 308 13 is_stmt 1 view .LVU607
 308:quantum/rgb_matrix.c ****             continue;
 3216               		.loc 5 308 34 is_stmt 0 view .LVU608
 3217 00fa 8150      		subi r24,lo8(-(-1))
 309:quantum/rgb_matrix.c ****         }
 3218               		.loc 5 309 13 is_stmt 1 view .LVU609
 3219               	.L119:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3220               		.loc 5 306 36 view .LVU610
 3221 00fc 9F5F      		subi r25,lo8(-(1))
 3222               	.LVL262:
 306:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 3223               		.loc 5 306 36 is_stmt 0 view .LVU611
 3224 00fe 3296      		adiw r30,2
 3225 0100 00C0      		rjmp .L117
 3226               	.L118:
 311:quantum/rgb_matrix.c ****     }
 3227               		.loc 5 311 9 is_stmt 1 view .LVU612
 311:quantum/rgb_matrix.c ****     }
 3228               		.loc 5 311 33 is_stmt 0 view .LVU613
 3229 0102 2C0D      		add r18,r12
 3230 0104 3D1D      		adc r19,r13
 3231 0106 328F      		std Z+26,r19
 3232 0108 218F      		std Z+25,r18
 3233 010a 00C0      		rjmp .L119
 3234               	.LVL263:
 3235               	.L123:
 311:quantum/rgb_matrix.c ****     }
 3236               		.loc 5 311 33 view .LVU614
 3237               	.LBE105:
 3238               	.LBE106:
 3239               	.LBE107:
 422:quantum/rgb_matrix.c ****             break;
 3240               		.loc 5 422 13 is_stmt 1 view .LVU615
 3241               	.LBB108:
 3242               	.LBI108:
 321:quantum/rgb_matrix.c ****     // reset iter
 3243               		.loc 5 321 13 view .LVU616
 3244               	.LBB109:
 323:quantum/rgb_matrix.c **** 
 3245               		.loc 5 323 5 view .LVU617
 323:quantum/rgb_matrix.c **** 
 3246               		.loc 5 323 28 is_stmt 0 view .LVU618
 3247 010c 1092 0000 		sts rgb_effect_params,__zero_reg__
 326:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 3248               		.loc 5 326 5 is_stmt 1 view .LVU619
 326:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 3249               		.loc 5 326 17 is_stmt 0 view .LVU620
 3250 0110 8092 0000 		sts g_rgb_timer,r8
 3251 0114 9092 0000 		sts g_rgb_timer+1,r9
 3252 0118 A092 0000 		sts g_rgb_timer+2,r10
 3253 011c B092 0000 		sts g_rgb_timer+3,r11
 328:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 3254               		.loc 5 328 5 is_stmt 1 view .LVU621
 328:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 3255               		.loc 5 328 24 is_stmt 0 view .LVU622
 3256 0120 89E2      		ldi r24,lo8(41)
 3257 0122 E0E0      		ldi r30,lo8(last_hit_buffer)
 3258 0124 F0E0      		ldi r31,hi8(last_hit_buffer)
 3259 0126 A0E0      		ldi r26,lo8(g_last_hit_tracker)
 3260 0128 B0E0      		ldi r27,hi8(g_last_hit_tracker)
 3261               		0:
 3262 012a 0190      		ld r0,Z+
 3263 012c 0D92      		st X+,r0
 3264 012e 8A95      		dec r24
 3265 0130 01F4      		brne 0b
 332:quantum/rgb_matrix.c **** }
 3266               		.loc 5 332 5 is_stmt 1 view .LVU623
 332:quantum/rgb_matrix.c **** }
 3267               		.loc 5 332 20 is_stmt 0 view .LVU624
 3268 0132 81E0      		ldi r24,lo8(1)
 3269               	.LVL264:
 3270               	.L165:
 332:quantum/rgb_matrix.c **** }
 3271               		.loc 5 332 20 view .LVU625
 3272               	.LBE109:
 3273               	.LBE108:
 3274               	.LBB110:
 3275               	.LBB111:
 390:quantum/rgb_matrix.c ****         }
 3276               		.loc 5 390 28 view .LVU626
 3277 0134 8093 0000 		sts rgb_task_state,r24
 3278               	.LBE111:
 3279               	.LBE110:
 426:quantum/rgb_matrix.c ****                 rgb_matrix_indicators();
 3280               		.loc 5 426 13 is_stmt 1 view .LVU627
 3281 0138 00C0      		rjmp .L116
 3282               	.LVL265:
 3283               	.L122:
 425:quantum/rgb_matrix.c ****             if (effect) {
 3284               		.loc 5 425 13 view .LVU628
 3285               	.LBB131:
 3286               	.LBI110:
 335:quantum/rgb_matrix.c ****     bool rendering         = false;
 3287               		.loc 5 335 13 view .LVU629
 3288               	.LBB128:
 336:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 3289               		.loc 5 336 5 view .LVU630
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3290               		.loc 5 337 5 view .LVU631
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3291               		.loc 5 337 58 is_stmt 0 view .LVU632
 3292 013a 8091 0000 		lds r24,rgb_last_effect
 3293 013e 1813      		cpse r17,r24
 3294 0140 00C0      		rjmp .L152
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3295               		.loc 5 337 79 view .LVU633
 3296 0142 9091 0000 		lds r25,rgb_matrix_config
 3297 0146 9370      		andi r25,lo8(3)
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3298               		.loc 5 337 87 view .LVU634
 3299 0148 2091 0000 		lds r18,rgb_last_enable
 3300 014c 30E0      		ldi r19,0
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3301               		.loc 5 337 58 view .LVU635
 3302 014e 81E0      		ldi r24,lo8(1)
 3303 0150 9217      		cp r25,r18
 3304 0152 1306      		cpc __zero_reg__,r19
 3305 0154 01F4      		brne .L127
 3306 0156 80E0      		ldi r24,0
 3307               	.L127:
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3308               		.loc 5 337 58 view .LVU636
 3309 0158 8170      		andi r24,lo8(1)
 3310 015a 8093 0000 		sts rgb_effect_params+2,r24
 338:quantum/rgb_matrix.c ****         rgb_effect_params.flags = rgb_matrix_config.flags;
 3311               		.loc 5 338 5 is_stmt 1 view .LVU637
 338:quantum/rgb_matrix.c ****         rgb_effect_params.flags = rgb_matrix_config.flags;
 3312               		.loc 5 338 53 is_stmt 0 view .LVU638
 3313 015e 8091 0000 		lds r24,rgb_matrix_config+5
 338:quantum/rgb_matrix.c ****         rgb_effect_params.flags = rgb_matrix_config.flags;
 3314               		.loc 5 338 8 view .LVU639
 3315 0162 9091 0000 		lds r25,rgb_effect_params+1
 3316 0166 9817      		cp r25,r24
 3317 0168 01F0      		breq .L129
 339:quantum/rgb_matrix.c ****         rgb_matrix_set_color_all(0, 0, 0);
 3318               		.loc 5 339 9 is_stmt 1 view .LVU640
 339:quantum/rgb_matrix.c ****         rgb_matrix_set_color_all(0, 0, 0);
 3319               		.loc 5 339 33 is_stmt 0 view .LVU641
 3320 016a 8093 0000 		sts rgb_effect_params+1,r24
 340:quantum/rgb_matrix.c ****     }
 3321               		.loc 5 340 9 is_stmt 1 view .LVU642
 3322 016e 40E0      		ldi r20,0
 3323 0170 60E0      		ldi r22,0
 3324 0172 80E0      		ldi r24,0
 3325 0174 0E94 0000 		call rgb_matrix_set_color_all
 3326               	.LVL266:
 3327               	.L129:
 345:quantum/rgb_matrix.c ****         case RGB_MATRIX_NONE:
 3328               		.loc 5 345 5 view .LVU643
 3329 0178 1730      		cpi r17,lo8(7)
 3330 017a 00F4      		brsh .L153
 3331 017c E12F      		mov r30,r17
 3332 017e F0E0      		ldi r31,0
 3333 0180 E050      		subi r30,lo8(-(gs(.L132)))
 3334 0182 F040      		sbci r31,hi8(-(gs(.L132)))
 3335 0184 0C94 0000 		jmp __tablejump2__
 3336               		.section	.jumptables.gcc.rgb_matrix_task,"a",@progbits
 3337               		.p2align	1
 3338               	.L132:
 3339 0000 0000      		.word gs(.L138)
 3340 0002 0000      		.word gs(.L137)
 3341 0004 0000      		.word gs(.L136)
 3342 0006 0000      		.word gs(.L135)
 3343 0008 0000      		.word gs(.L134)
 3344 000a 0000      		.word gs(.L133)
 3345 000c 0000      		.word gs(.L131)
 3346               		.section	.text.rgb_matrix_task
 3347               	.LVL267:
 3348               	.L152:
 337:quantum/rgb_matrix.c ****     if (rgb_effect_params.flags != rgb_matrix_config.flags) {
 3349               		.loc 5 337 58 is_stmt 0 view .LVU644
 3350 0188 81E0      		ldi r24,lo8(1)
 3351 018a 00C0      		rjmp .L127
 3352               	.LVL268:
 3353               	.L138:
 347:quantum/rgb_matrix.c ****             break;
 3354               		.loc 5 347 13 is_stmt 1 view .LVU645
 347:quantum/rgb_matrix.c ****             break;
 3355               		.loc 5 347 25 is_stmt 0 view .LVU646
 3356 018c 8091 0000 		lds r24,rgb_effect_params+2
 3357               	.LBB112:
 3358               	.LBI112:
 277:quantum/rgb_matrix.c ****     if (!params->init) {
 3359               		.loc 5 277 13 is_stmt 1 view .LVU647
 3360               	.LVL269:
 3361               	.LBB113:
 278:quantum/rgb_matrix.c ****         return false;
 3362               		.loc 5 278 5 view .LVU648
 278:quantum/rgb_matrix.c ****         return false;
 3363               		.loc 5 278 8 is_stmt 0 view .LVU649
 3364 0190 8823      		tst r24
 3365 0192 01F0      		breq .L130
 282:quantum/rgb_matrix.c ****     return false;
 3366               		.loc 5 282 5 is_stmt 1 view .LVU650
 3367 0194 40E0      		ldi r20,0
 3368 0196 60E0      		ldi r22,0
 3369 0198 80E0      		ldi r24,0
 3370 019a 0E94 0000 		call rgb_matrix_set_color_all
 3371               	.LVL270:
 283:quantum/rgb_matrix.c **** }
 3372               		.loc 5 283 5 view .LVU651
 3373               	.L153:
 283:quantum/rgb_matrix.c **** }
 3374               		.loc 5 283 5 is_stmt 0 view .LVU652
 3375               	.LBE113:
 3376               	.LBE112:
 336:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 3377               		.loc 5 336 10 view .LVU653
 3378 019e 80E0      		ldi r24,0
 3379 01a0 00C0      		rjmp .L130
 3380               	.L137:
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 3381               		.loc 12 1 1 is_stmt 1 view .LVU654
 3382 01a2 80E0      		ldi r24,lo8(rgb_effect_params)
 3383 01a4 90E0      		ldi r25,hi8(rgb_effect_params)
 3384 01a6 0E94 0000 		call SOLID_COLOR
 3385               	.LVL271:
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 3386               		.loc 12 1 1 view .LVU655
 3387               	.L130:
 383:quantum/rgb_matrix.c **** 
 3388               		.loc 5 383 5 view .LVU656
 383:quantum/rgb_matrix.c **** 
 3389               		.loc 5 383 27 is_stmt 0 view .LVU657
 3390 01aa 9091 0000 		lds r25,rgb_effect_params
 3391 01ae 9F5F      		subi r25,lo8(-(1))
 3392 01b0 9093 0000 		sts rgb_effect_params,r25
 386:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 3393               		.loc 5 386 5 is_stmt 1 view .LVU658
 386:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 3394               		.loc 5 386 8 is_stmt 0 view .LVU659
 3395 01b4 8111      		cpse r24,__zero_reg__
 3396 01b6 00C0      		rjmp .L147
 3397               	.LVL272:
 387:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 3398               		.loc 5 387 9 is_stmt 1 view .LVU660
 387:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 3399               		.loc 5 387 24 is_stmt 0 view .LVU661
 3400 01b8 82E0      		ldi r24,lo8(2)
 3401 01ba 8093 0000 		sts rgb_task_state,r24
 388:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 3402               		.loc 5 388 9 is_stmt 1 view .LVU662
 388:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 3403               		.loc 5 388 12 is_stmt 0 view .LVU663
 3404 01be 8091 0000 		lds r24,rgb_effect_params+2
 3405 01c2 8111      		cpse r24,__zero_reg__
 3406 01c4 00C0      		rjmp .L147
 388:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 3407               		.loc 5 388 37 view .LVU664
 3408 01c6 1123      		tst r17
 3409 01c8 01F4      		brne .+2
 3410 01ca 00C0      		rjmp .L148
 3411               	.LVL273:
 3412               	.L149:
 388:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 3413               		.loc 5 388 37 view .LVU665
 3414               	.LBE128:
 3415               	.LBE131:
 427:quantum/rgb_matrix.c ****                 rgb_matrix_indicators_advanced(&rgb_effect_params);
 3416               		.loc 5 427 17 is_stmt 1 view .LVU666
 3417 01cc 0E94 0000 		call rgb_matrix_indicators
 3418               	.LVL274:
 428:quantum/rgb_matrix.c ****             }
 3419               		.loc 5 428 17 view .LVU667
 3420 01d0 80E0      		ldi r24,lo8(rgb_effect_params)
 3421 01d2 90E0      		ldi r25,hi8(rgb_effect_params)
 3422               	/* epilogue start */
 438:quantum/rgb_matrix.c **** 
 3423               		.loc 5 438 1 is_stmt 0 view .LVU668
 3424 01d4 6496      		adiw r28,20
 3425 01d6 0FB6      		in __tmp_reg__,__SREG__
 3426 01d8 F894      		cli
 3427 01da DEBF      		out __SP_H__,r29
 3428 01dc 0FBE      		out __SREG__,__tmp_reg__
 3429 01de CDBF      		out __SP_L__,r28
 3430 01e0 DF91      		pop r29
 3431 01e2 CF91      		pop r28
 3432 01e4 1F91      		pop r17
 3433               	.LVL275:
 438:quantum/rgb_matrix.c **** 
 3434               		.loc 5 438 1 view .LVU669
 3435 01e6 0F91      		pop r16
 3436 01e8 FF90      		pop r15
 3437 01ea EF90      		pop r14
 3438 01ec DF90      		pop r13
 3439 01ee CF90      		pop r12
 3440 01f0 BF90      		pop r11
 3441 01f2 AF90      		pop r10
 3442 01f4 9F90      		pop r9
 3443 01f6 8F90      		pop r8
 3444 01f8 7F90      		pop r7
 3445 01fa 6F90      		pop r6
 3446 01fc 5F90      		pop r5
 3447 01fe 4F90      		pop r4
 428:quantum/rgb_matrix.c ****             }
 3448               		.loc 5 428 17 view .LVU670
 3449 0200 0C94 0000 		jmp rgb_matrix_indicators_advanced
 3450               	.LVL276:
 3451               	.L136:
 3452               	.LBB132:
 3453               	.LBB129:
   5:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
 3454               		.loc 4 5 1 is_stmt 1 view .LVU671
 3455 0204 80E0      		ldi r24,lo8(rgb_effect_params)
 3456 0206 90E0      		ldi r25,hi8(rgb_effect_params)
 3457 0208 0E94 0000 		call SOLID_SPLASH
 3458               	.LVL277:
   5:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
 3459               		.loc 4 5 1 view .LVU672
 3460 020c 00C0      		rjmp .L130
 3461               	.LVL278:
 3462               	.L135:
 3463               		.file 13 "quantum/rgb_matrix_animations/my_rgb_effects.h"
   1:quantum/rgb_matrix_animations/my_rgb_effects.h **** RGB_MATRIX_EFFECT(qwerty)
 3464               		.loc 13 1 1 view .LVU673
 3465               	.LBB114:
 3466               	.LBI114:
   2:quantum/rgb_matrix_animations/my_rgb_effects.h **** RGB_MATRIX_EFFECT(lower)
   3:quantum/rgb_matrix_animations/my_rgb_effects.h **** RGB_MATRIX_EFFECT(raise)
   4:quantum/rgb_matrix_animations/my_rgb_effects.h **** RGB_MATRIX_EFFECT(adjust)
   5:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
   6:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
   7:quantum/rgb_matrix_animations/my_rgb_effects.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   8:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
   9:quantum/rgb_matrix_animations/my_rgb_effects.h **** static bool qwerty(effect_params_t* params) {
 3467               		.loc 13 9 13 view .LVU674
 3468               	.LBB115:
  10:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3469               		.loc 13 10 3 view .LVU675
 3470               		.loc 13 10 3 view .LVU676
 3471 020e 9091 0000 		lds r25,rgb_effect_params
 3472 0212 0BE0      		ldi r16,lo8(11)
 3473 0214 909F      		mul r25,r16
 3474 0216 000D      		add r16,r0
 3475 0218 1124      		clr __zero_reg__
 3476               	.LVL279:
 3477               		.loc 13 10 3 view .LVU677
 3478               		.loc 13 10 42 view .LVU678
  11:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(255, 127, 80);
 3479               		.loc 13 11 3 view .LVU679
 3480 021a 40E5      		ldi r20,lo8(80)
 3481 021c 6FE7      		ldi r22,lo8(127)
 3482 021e 8FEF      		ldi r24,lo8(-1)
 3483 0220 0E94 0000 		call rgb_matrix_set_color_all
 3484               	.LVL280:
  12:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 16, 19, 34, 44, 45, 46};
 3485               		.loc 13 12 3 view .LVU680
 3486               		.loc 13 12 11 is_stmt 0 view .LVU681
 3487 0224 8DE0      		ldi r24,lo8(13)
 3488 0226 E0E0      		ldi r30,lo8(.LC1)
 3489 0228 F0E0      		ldi r31,hi8(.LC1)
 3490 022a DE01      		movw r26,r28
 3491 022c 1196      		adiw r26,1
 3492               		0:
 3493 022e 0190      		ld r0,Z+
 3494 0230 0D92      		st X+,r0
 3495 0232 8A95      		dec r24
 3496 0234 01F4      		brne 0b
  13:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3497               		.loc 13 13 3 is_stmt 1 view .LVU682
 3498               	.LVL281:
  14:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3499               		.loc 13 14 3 view .LVU683
 3500               	.LBB116:
 3501               		.loc 13 14 8 view .LVU684
 3502               		.loc 13 14 23 view .LVU685
 3503 0236 CE01      		movw r24,r28
 3504 0238 0196      		adiw r24,1
 3505 023a 7C01      		movw r14,r24
 3506 023c 6E01      		movw r12,r28
 3507 023e 9EE0      		ldi r25,14
 3508 0240 C90E      		add r12,r25
 3509 0242 D11C      		adc r13,__zero_reg__
 3510               	.LVL282:
 3511               	.L139:
  15:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 0, 0);
 3512               		.loc 13 15 5 view .LVU686
 3513               		.loc 13 15 30 is_stmt 0 view .LVU687
 3514 0244 F701      		movw r30,r14
 3515 0246 8191      		ld r24,Z+
 3516 0248 7F01      		movw r14,r30
 3517               		.loc 13 15 5 view .LVU688
 3518 024a 20E0      		ldi r18,0
 3519 024c 40E0      		ldi r20,0
 3520 024e 6FEF      		ldi r22,lo8(-1)
 3521 0250 90E0      		ldi r25,0
 3522 0252 0E94 0000 		call rgb_matrix_set_color
 3523               	.LVL283:
  14:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3524               		.loc 13 14 32 is_stmt 1 view .LVU689
  14:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3525               		.loc 13 14 23 view .LVU690
  14:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3526               		.loc 13 14 3 is_stmt 0 view .LVU691
 3527 0256 CE14      		cp r12,r14
 3528 0258 DF04      		cpc r13,r15
 3529 025a 01F4      		brne .L139
 3530               	.LVL284:
 3531               	.L164:
  14:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3532               		.loc 13 14 3 view .LVU692
 3533               	.LBE116:
 3534               	.LBE115:
 3535               	.LBE114:
 3536               	.LBB117:
 3537               	.LBB118:
  16:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
  17:quantum/rgb_matrix_animations/my_rgb_effects.h ****   return led_max < DRIVER_LED_TOTAL;
  18:quantum/rgb_matrix_animations/my_rgb_effects.h **** }
  19:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
  20:quantum/rgb_matrix_animations/my_rgb_effects.h **** static bool lower(effect_params_t* params) {
  21:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
  22:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(255, 250, 100);
  23:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 45, 28, 29}
  24:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
  26:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
  27:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
  28:quantum/rgb_matrix_animations/my_rgb_effects.h ****   return led_max < DRIVER_LED_TOTAL;
  29:quantum/rgb_matrix_animations/my_rgb_effects.h **** }
  30:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
  31:quantum/rgb_matrix_animations/my_rgb_effects.h **** static bool raise(effect_params_t* params) {
  32:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
  33:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(185, 205, 246);
  34:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 19, 20, 21, 31, 32, 33, 43, 29};
  35:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
  37:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
  38:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
  39:quantum/rgb_matrix_animations/my_rgb_effects.h ****   return led_max < DRIVER_LED_TOTAL;
  40:quantum/rgb_matrix_animations/my_rgb_effects.h **** }
  41:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
  42:quantum/rgb_matrix_animations/my_rgb_effects.h **** static bool adjust(effect_params_t* params) {
  43:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
  44:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(154, 255, 154);
  45:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 34, 44, 45, 46, 21, 23, 20, 32, 29};
  46:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
  48:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
  49:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
  50:quantum/rgb_matrix_animations/my_rgb_effects.h ****   return led_max < DRIVER_LED_TOTAL;
 3538               		.loc 13 50 3 is_stmt 1 view .LVU693
 3539 025c 81E0      		ldi r24,lo8(1)
 3540 025e 0533      		cpi r16,lo8(53)
 3541 0260 00F4      		brsh .+2
 3542 0262 00C0      		rjmp .L130
 3543 0264 00C0      		rjmp .L153
 3544               	.L134:
 3545               	.LBE118:
 3546               	.LBE117:
   2:quantum/rgb_matrix_animations/my_rgb_effects.h **** RGB_MATRIX_EFFECT(adjust)
 3547               		.loc 13 2 1 view .LVU694
 3548               	.LBB121:
 3549               	.LBI121:
  20:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3550               		.loc 13 20 13 view .LVU695
 3551               	.LVL285:
 3552               	.LBB122:
  21:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(255, 250, 100);
 3553               		.loc 13 21 3 view .LVU696
  21:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(255, 250, 100);
 3554               		.loc 13 21 3 view .LVU697
 3555 0266 9091 0000 		lds r25,rgb_effect_params
 3556 026a 0BE0      		ldi r16,lo8(11)
 3557 026c 909F      		mul r25,r16
 3558 026e 000D      		add r16,r0
 3559 0270 1124      		clr __zero_reg__
 3560               	.LVL286:
  21:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(255, 250, 100);
 3561               		.loc 13 21 3 view .LVU698
  21:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(255, 250, 100);
 3562               		.loc 13 21 42 view .LVU699
  22:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 45, 28, 29}
 3563               		.loc 13 22 3 view .LVU700
 3564 0272 44E6      		ldi r20,lo8(100)
 3565 0274 6AEF      		ldi r22,lo8(-6)
 3566 0276 8FEF      		ldi r24,lo8(-1)
 3567 0278 0E94 0000 		call rgb_matrix_set_color_all
 3568               	.LVL287:
  23:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3569               		.loc 13 23 3 view .LVU701
  23:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3570               		.loc 13 23 11 is_stmt 0 view .LVU702
 3571 027c 84E1      		ldi r24,lo8(20)
 3572 027e E0E0      		ldi r30,lo8(.LC2)
 3573 0280 F0E0      		ldi r31,hi8(.LC2)
 3574 0282 DE01      		movw r26,r28
 3575 0284 1196      		adiw r26,1
 3576               		0:
 3577 0286 0190      		ld r0,Z+
 3578 0288 0D92      		st X+,r0
 3579 028a 8A95      		dec r24
 3580 028c 01F4      		brne 0b
  24:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3581               		.loc 13 24 3 is_stmt 1 view .LVU703
 3582               	.LVL288:
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3583               		.loc 13 25 3 view .LVU704
 3584               	.LBB123:
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3585               		.loc 13 25 8 view .LVU705
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3586               		.loc 13 25 23 view .LVU706
 3587 028e CE01      		movw r24,r28
 3588 0290 0196      		adiw r24,1
 3589 0292 7C01      		movw r14,r24
 3590 0294 6E01      		movw r12,r28
 3591 0296 95E1      		ldi r25,21
 3592 0298 C90E      		add r12,r25
 3593 029a D11C      		adc r13,__zero_reg__
 3594               	.LVL289:
 3595               	.L141:
  26:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3596               		.loc 13 26 5 view .LVU707
  26:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3597               		.loc 13 26 30 is_stmt 0 view .LVU708
 3598 029c F701      		movw r30,r14
 3599 029e 8191      		ld r24,Z+
 3600 02a0 7F01      		movw r14,r30
  26:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3601               		.loc 13 26 5 view .LVU709
 3602 02a2 20E0      		ldi r18,0
 3603 02a4 4FEF      		ldi r20,lo8(-1)
 3604 02a6 6FEF      		ldi r22,lo8(-1)
 3605 02a8 90E0      		ldi r25,0
 3606 02aa 0E94 0000 		call rgb_matrix_set_color
 3607               	.LVL290:
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3608               		.loc 13 25 32 is_stmt 1 view .LVU710
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3609               		.loc 13 25 23 view .LVU711
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3610               		.loc 13 25 3 is_stmt 0 view .LVU712
 3611 02ae CE14      		cp r12,r14
 3612 02b0 DF04      		cpc r13,r15
 3613 02b2 01F4      		brne .L141
 3614 02b4 00C0      		rjmp .L164
 3615               	.LVL291:
 3616               	.L133:
  25:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 255, 255, 0);
 3617               		.loc 13 25 3 view .LVU713
 3618               	.LBE123:
 3619               	.LBE122:
 3620               	.LBE121:
   3:quantum/rgb_matrix_animations/my_rgb_effects.h **** RGB_MATRIX_EFFECT(adjust)
 3621               		.loc 13 3 1 is_stmt 1 view .LVU714
 3622               	.LBB124:
 3623               	.LBI124:
  31:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3624               		.loc 13 31 13 view .LVU715
 3625               	.LBB125:
  32:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(185, 205, 246);
 3626               		.loc 13 32 3 view .LVU716
  32:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(185, 205, 246);
 3627               		.loc 13 32 3 view .LVU717
 3628 02b6 9091 0000 		lds r25,rgb_effect_params
 3629 02ba 0BE0      		ldi r16,lo8(11)
 3630 02bc 909F      		mul r25,r16
 3631 02be 000D      		add r16,r0
 3632 02c0 1124      		clr __zero_reg__
 3633               	.LVL292:
  32:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(185, 205, 246);
 3634               		.loc 13 32 3 view .LVU718
  32:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(185, 205, 246);
 3635               		.loc 13 32 42 view .LVU719
  33:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 19, 20, 21, 31, 32, 33, 43, 29};
 3636               		.loc 13 33 3 view .LVU720
 3637 02c2 46EF      		ldi r20,lo8(-10)
 3638 02c4 6DEC      		ldi r22,lo8(-51)
 3639 02c6 89EB      		ldi r24,lo8(-71)
 3640 02c8 0E94 0000 		call rgb_matrix_set_color_all
 3641               	.LVL293:
  34:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3642               		.loc 13 34 3 view .LVU721
  34:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3643               		.loc 13 34 11 is_stmt 0 view .LVU722
 3644 02cc 8FE0      		ldi r24,lo8(15)
 3645 02ce E0E0      		ldi r30,lo8(.LC3)
 3646 02d0 F0E0      		ldi r31,hi8(.LC3)
 3647 02d2 DE01      		movw r26,r28
 3648 02d4 1196      		adiw r26,1
 3649               		0:
 3650 02d6 0190      		ld r0,Z+
 3651 02d8 0D92      		st X+,r0
 3652 02da 8A95      		dec r24
 3653 02dc 01F4      		brne 0b
  35:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3654               		.loc 13 35 3 is_stmt 1 view .LVU723
 3655               	.LVL294:
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3656               		.loc 13 36 3 view .LVU724
 3657               	.LBB126:
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3658               		.loc 13 36 8 view .LVU725
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3659               		.loc 13 36 23 view .LVU726
 3660 02de CE01      		movw r24,r28
 3661 02e0 0196      		adiw r24,1
 3662 02e2 7C01      		movw r14,r24
 3663 02e4 6E01      		movw r12,r28
 3664 02e6 90E1      		ldi r25,16
 3665 02e8 C90E      		add r12,r25
 3666 02ea D11C      		adc r13,__zero_reg__
 3667               	.LVL295:
 3668               	.L143:
  37:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3669               		.loc 13 37 5 view .LVU727
  37:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3670               		.loc 13 37 30 is_stmt 0 view .LVU728
 3671 02ec F701      		movw r30,r14
 3672 02ee 8191      		ld r24,Z+
 3673 02f0 7F01      		movw r14,r30
  37:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3674               		.loc 13 37 5 view .LVU729
 3675 02f2 2FEF      		ldi r18,lo8(-1)
 3676 02f4 40E0      		ldi r20,0
 3677 02f6 60E0      		ldi r22,0
 3678 02f8 90E0      		ldi r25,0
 3679 02fa 0E94 0000 		call rgb_matrix_set_color
 3680               	.LVL296:
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3681               		.loc 13 36 32 is_stmt 1 view .LVU730
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3682               		.loc 13 36 23 view .LVU731
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3683               		.loc 13 36 3 is_stmt 0 view .LVU732
 3684 02fe EC14      		cp r14,r12
 3685 0300 FD04      		cpc r15,r13
 3686 0302 01F4      		brne .L143
 3687 0304 00C0      		rjmp .L164
 3688               	.LVL297:
 3689               	.L131:
  36:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 0, 255);
 3690               		.loc 13 36 3 view .LVU733
 3691               	.LBE126:
 3692               	.LBE125:
 3693               	.LBE124:
   4:quantum/rgb_matrix_animations/my_rgb_effects.h **** 
 3694               		.loc 13 4 1 is_stmt 1 view .LVU734
 3695               	.LBB127:
 3696               	.LBI117:
  42:quantum/rgb_matrix_animations/my_rgb_effects.h ****   RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3697               		.loc 13 42 13 view .LVU735
 3698               	.LBB120:
  43:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(154, 255, 154);
 3699               		.loc 13 43 3 view .LVU736
  43:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(154, 255, 154);
 3700               		.loc 13 43 3 view .LVU737
 3701 0306 9091 0000 		lds r25,rgb_effect_params
 3702 030a 0BE0      		ldi r16,lo8(11)
 3703 030c 909F      		mul r25,r16
 3704 030e 000D      		add r16,r0
 3705 0310 1124      		clr __zero_reg__
 3706               	.LVL298:
  43:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(154, 255, 154);
 3707               		.loc 13 43 3 view .LVU738
  43:quantum/rgb_matrix_animations/my_rgb_effects.h ****   rgb_matrix_set_color_all(154, 255, 154);
 3708               		.loc 13 43 42 view .LVU739
  44:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t leds[] = {41, 47, 48, 49, 50, 51, 52, 34, 44, 45, 46, 21, 23, 20, 32, 29};
 3709               		.loc 13 44 3 view .LVU740
 3710 0312 4AE9      		ldi r20,lo8(-102)
 3711 0314 6FEF      		ldi r22,lo8(-1)
 3712 0316 8AE9      		ldi r24,lo8(-102)
 3713 0318 0E94 0000 		call rgb_matrix_set_color_all
 3714               	.LVL299:
  45:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3715               		.loc 13 45 3 view .LVU741
  45:quantum/rgb_matrix_animations/my_rgb_effects.h ****   uint8_t len = sizeof(leds) / sizeof(uint8_t);
 3716               		.loc 13 45 11 is_stmt 0 view .LVU742
 3717 031c 80E1      		ldi r24,lo8(16)
 3718 031e E0E0      		ldi r30,lo8(.LC4)
 3719 0320 F0E0      		ldi r31,hi8(.LC4)
 3720 0322 DE01      		movw r26,r28
 3721 0324 1196      		adiw r26,1
 3722               		0:
 3723 0326 0190      		ld r0,Z+
 3724 0328 0D92      		st X+,r0
 3725 032a 8A95      		dec r24
 3726 032c 01F4      		brne 0b
  46:quantum/rgb_matrix_animations/my_rgb_effects.h ****   for (uint8_t i = 0; i < len; i++) {
 3727               		.loc 13 46 3 is_stmt 1 view .LVU743
 3728               	.LVL300:
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3729               		.loc 13 47 3 view .LVU744
 3730               	.LBB119:
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3731               		.loc 13 47 8 view .LVU745
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3732               		.loc 13 47 23 view .LVU746
 3733 032e CE01      		movw r24,r28
 3734 0330 0196      		adiw r24,1
 3735 0332 7C01      		movw r14,r24
 3736 0334 6E01      		movw r12,r28
 3737 0336 91E1      		ldi r25,17
 3738 0338 C90E      		add r12,r25
 3739 033a D11C      		adc r13,__zero_reg__
 3740               	.LVL301:
 3741               	.L145:
  48:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3742               		.loc 13 48 5 view .LVU747
  48:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3743               		.loc 13 48 30 is_stmt 0 view .LVU748
 3744 033c F701      		movw r30,r14
 3745 033e 8191      		ld r24,Z+
 3746 0340 7F01      		movw r14,r30
  48:quantum/rgb_matrix_animations/my_rgb_effects.h ****   }
 3747               		.loc 13 48 5 view .LVU749
 3748 0342 20E0      		ldi r18,0
 3749 0344 4FEF      		ldi r20,lo8(-1)
 3750 0346 60E0      		ldi r22,0
 3751 0348 90E0      		ldi r25,0
 3752 034a 0E94 0000 		call rgb_matrix_set_color
 3753               	.LVL302:
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3754               		.loc 13 47 32 is_stmt 1 view .LVU750
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3755               		.loc 13 47 23 view .LVU751
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3756               		.loc 13 47 3 is_stmt 0 view .LVU752
 3757 034e EC14      		cp r14,r12
 3758 0350 FD04      		cpc r15,r13
 3759 0352 01F4      		brne .L145
 3760 0354 00C0      		rjmp .L164
 3761               	.LVL303:
 3762               	.L147:
  47:quantum/rgb_matrix_animations/my_rgb_effects.h ****     rgb_matrix_set_color(leds[i], 0, 255, 0);
 3763               		.loc 13 47 3 view .LVU753
 3764               	.LBE119:
 3765               	.LBE120:
 3766               	.LBE127:
 3767               	.LBE129:
 3768               	.LBE132:
 426:quantum/rgb_matrix.c ****                 rgb_matrix_indicators();
 3769               		.loc 5 426 13 is_stmt 1 view .LVU754
 426:quantum/rgb_matrix.c ****                 rgb_matrix_indicators();
 3770               		.loc 5 426 16 is_stmt 0 view .LVU755
 3771 0356 1123      		tst r17
 3772 0358 01F4      		brne .+2
 3773 035a 00C0      		rjmp .L116
 3774 035c 00C0      		rjmp .L149
 3775               	.LVL304:
 3776               	.L124:
 432:quantum/rgb_matrix.c ****             break;
 3777               		.loc 5 432 13 is_stmt 1 view .LVU756
 3778               	.LBB133:
 3779               	.LBI133:
 395:quantum/rgb_matrix.c ****     // update last trackers after the first full render so we can init over several frames
 3780               		.loc 5 395 13 view .LVU757
 3781               	.LBB134:
 397:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 3782               		.loc 5 397 5 view .LVU758
 397:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 3783               		.loc 5 397 21 is_stmt 0 view .LVU759
 3784 035e 1093 0000 		sts rgb_last_effect,r17
 398:quantum/rgb_matrix.c **** 
 3785               		.loc 5 398 5 is_stmt 1 view .LVU760
 398:quantum/rgb_matrix.c **** 
 3786               		.loc 5 398 40 is_stmt 0 view .LVU761
 3787 0362 8091 0000 		lds r24,rgb_matrix_config
 3788 0366 8370      		andi r24,lo8(3)
 398:quantum/rgb_matrix.c **** 
 3789               		.loc 5 398 21 view .LVU762
 3790 0368 8093 0000 		sts rgb_last_enable,r24
 401:quantum/rgb_matrix.c **** 
 3791               		.loc 5 401 5 is_stmt 1 view .LVU763
 3792 036c 0E94 0000 		call rgb_matrix_update_pwm_buffers
 3793               	.LVL305:
 404:quantum/rgb_matrix.c **** }
 3794               		.loc 5 404 5 view .LVU764
 3795               	.L148:
 404:quantum/rgb_matrix.c **** }
 3796               		.loc 5 404 5 is_stmt 0 view .LVU765
 3797               	.LBE134:
 3798               	.LBE133:
 3799               	.LBB135:
 3800               	.LBB130:
 390:quantum/rgb_matrix.c ****         }
 3801               		.loc 5 390 13 is_stmt 1 view .LVU766
 390:quantum/rgb_matrix.c ****         }
 3802               		.loc 5 390 28 is_stmt 0 view .LVU767
 3803 0370 83E0      		ldi r24,lo8(3)
 3804 0372 00C0      		rjmp .L165
 3805               	.LVL306:
 3806               	.L125:
 390:quantum/rgb_matrix.c ****         }
 3807               		.loc 5 390 28 view .LVU768
 3808               	.LBE130:
 3809               	.LBE135:
 435:quantum/rgb_matrix.c ****             break;
 3810               		.loc 5 435 13 is_stmt 1 view .LVU769
 3811               	.LBB136:
 3812               	.LBI136:
 316:quantum/rgb_matrix.c ****     // next task
 3813               		.loc 5 316 13 view .LVU770
 3814               	.LBB137:
 318:quantum/rgb_matrix.c **** }
 3815               		.loc 5 318 5 view .LVU771
 318:quantum/rgb_matrix.c **** }
 3816               		.loc 5 318 9 is_stmt 0 view .LVU772
 3817 0374 6091 0000 		lds r22,g_rgb_timer
 3818 0378 7091 0000 		lds r23,g_rgb_timer+1
 3819 037c 8091 0000 		lds r24,g_rgb_timer+2
 3820 0380 9091 0000 		lds r25,g_rgb_timer+3
 3821 0384 0E94 0000 		call timer_elapsed32
 3822               	.LVL307:
 318:quantum/rgb_matrix.c **** }
 3823               		.loc 5 318 8 view .LVU773
 3824 0388 6031      		cpi r22,16
 3825 038a 7105      		cpc r23,__zero_reg__
 3826 038c 8105      		cpc r24,__zero_reg__
 3827 038e 9105      		cpc r25,__zero_reg__
 3828 0390 00F4      		brsh .+2
 3829 0392 00C0      		rjmp .L116
 318:quantum/rgb_matrix.c **** }
 3830               		.loc 5 318 74 is_stmt 1 view .LVU774
 318:quantum/rgb_matrix.c **** }
 3831               		.loc 5 318 89 is_stmt 0 view .LVU775
 3832 0394 1092 0000 		sts rgb_task_state,__zero_reg__
 3833               	.LBE137:
 3834               	.LBE136:
 438:quantum/rgb_matrix.c **** 
 3835               		.loc 5 438 1 view .LVU776
 3836 0398 00C0      		rjmp .L116
 3837               		.cfi_endproc
 3838               	.LFE127:
 3840               		.section	.text.rgb_matrix_init,"ax",@progbits
 3841               	.global	rgb_matrix_init
 3843               	rgb_matrix_init:
 3844               	.LFB134:
 468:quantum/rgb_matrix.c **** 
 469:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {}
 470:quantum/rgb_matrix.c **** 
 471:quantum/rgb_matrix.c **** void rgb_matrix_init(void) {
 3845               		.loc 5 471 28 is_stmt 1 view -0
 3846               		.cfi_startproc
 3847               	/* prologue: function */
 3848               	/* frame size = 0 */
 3849               	/* stack size = 0 */
 3850               	.L__stack_usage = 0
 472:quantum/rgb_matrix.c ****     rgb_matrix_driver.init();
 3851               		.loc 5 472 5 view .LVU778
 3852 0000 E091 0000 		lds r30,rgb_matrix_driver
 3853 0004 F091 0000 		lds r31,rgb_matrix_driver+1
 3854 0008 0995      		icall
 3855               	.LVL308:
 473:quantum/rgb_matrix.c **** 
 474:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 475:quantum/rgb_matrix.c ****     g_last_hit_tracker.count = 0;
 3856               		.loc 5 475 5 view .LVU779
 3857               		.loc 5 475 30 is_stmt 0 view .LVU780
 3858 000a 1092 0000 		sts g_last_hit_tracker,__zero_reg__
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3859               		.loc 5 476 5 is_stmt 1 view .LVU781
 3860               	.LBB138:
 3861               		.loc 5 476 10 view .LVU782
 3862               	.LVL309:
 3863               		.loc 5 476 25 view .LVU783
 477:quantum/rgb_matrix.c ****         g_last_hit_tracker.tick[i] = UINT16_MAX;
 3864               		.loc 5 477 9 view .LVU784
 3865               		.loc 5 477 36 is_stmt 0 view .LVU785
 3866 000e 8FEF      		ldi r24,lo8(-1)
 3867 0010 9FEF      		ldi r25,lo8(-1)
 3868 0012 9093 0000 		sts g_last_hit_tracker+25+1,r25
 3869 0016 8093 0000 		sts g_last_hit_tracker+25,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3870               		.loc 5 476 51 is_stmt 1 view .LVU786
 3871               	.LVL310:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3872               		.loc 5 476 25 view .LVU787
 3873               		.loc 5 477 9 view .LVU788
 3874               		.loc 5 477 36 is_stmt 0 view .LVU789
 3875 001a 9093 0000 		sts g_last_hit_tracker+27+1,r25
 3876 001e 8093 0000 		sts g_last_hit_tracker+27,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3877               		.loc 5 476 51 is_stmt 1 view .LVU790
 3878               	.LVL311:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3879               		.loc 5 476 25 view .LVU791
 3880               		.loc 5 477 9 view .LVU792
 3881               		.loc 5 477 36 is_stmt 0 view .LVU793
 3882 0022 9093 0000 		sts g_last_hit_tracker+29+1,r25
 3883 0026 8093 0000 		sts g_last_hit_tracker+29,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3884               		.loc 5 476 51 is_stmt 1 view .LVU794
 3885               	.LVL312:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3886               		.loc 5 476 25 view .LVU795
 3887               		.loc 5 477 9 view .LVU796
 3888               		.loc 5 477 36 is_stmt 0 view .LVU797
 3889 002a 9093 0000 		sts g_last_hit_tracker+31+1,r25
 3890 002e 8093 0000 		sts g_last_hit_tracker+31,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3891               		.loc 5 476 51 is_stmt 1 view .LVU798
 3892               	.LVL313:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3893               		.loc 5 476 25 view .LVU799
 3894               		.loc 5 477 9 view .LVU800
 3895               		.loc 5 477 36 is_stmt 0 view .LVU801
 3896 0032 9093 0000 		sts g_last_hit_tracker+33+1,r25
 3897 0036 8093 0000 		sts g_last_hit_tracker+33,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3898               		.loc 5 476 51 is_stmt 1 view .LVU802
 3899               	.LVL314:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3900               		.loc 5 476 25 view .LVU803
 3901               		.loc 5 477 9 view .LVU804
 3902               		.loc 5 477 36 is_stmt 0 view .LVU805
 3903 003a 9093 0000 		sts g_last_hit_tracker+35+1,r25
 3904 003e 8093 0000 		sts g_last_hit_tracker+35,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3905               		.loc 5 476 51 is_stmt 1 view .LVU806
 3906               	.LVL315:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3907               		.loc 5 476 25 view .LVU807
 3908               		.loc 5 477 9 view .LVU808
 3909               		.loc 5 477 36 is_stmt 0 view .LVU809
 3910 0042 9093 0000 		sts g_last_hit_tracker+37+1,r25
 3911 0046 8093 0000 		sts g_last_hit_tracker+37,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3912               		.loc 5 476 51 is_stmt 1 view .LVU810
 3913               	.LVL316:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3914               		.loc 5 476 25 view .LVU811
 3915               		.loc 5 477 9 view .LVU812
 3916               		.loc 5 477 36 is_stmt 0 view .LVU813
 3917 004a 9093 0000 		sts g_last_hit_tracker+39+1,r25
 3918 004e 8093 0000 		sts g_last_hit_tracker+39,r24
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3919               		.loc 5 476 51 is_stmt 1 view .LVU814
 3920               	.LVL317:
 476:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3921               		.loc 5 476 25 view .LVU815
 3922               	.LBE138:
 478:quantum/rgb_matrix.c ****     }
 479:quantum/rgb_matrix.c **** 
 480:quantum/rgb_matrix.c ****     last_hit_buffer.count = 0;
 3923               		.loc 5 480 5 view .LVU816
 3924               		.loc 5 480 27 is_stmt 0 view .LVU817
 3925 0052 1092 0000 		sts last_hit_buffer,__zero_reg__
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3926               		.loc 5 481 5 is_stmt 1 view .LVU818
 3927               	.LBB139:
 3928               		.loc 5 481 10 view .LVU819
 3929               	.LVL318:
 3930               		.loc 5 481 25 view .LVU820
 482:quantum/rgb_matrix.c ****         last_hit_buffer.tick[i] = UINT16_MAX;
 3931               		.loc 5 482 9 view .LVU821
 3932               		.loc 5 482 33 is_stmt 0 view .LVU822
 3933 0056 9093 0000 		sts last_hit_buffer+25+1,r25
 3934 005a 8093 0000 		sts last_hit_buffer+25,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3935               		.loc 5 481 51 is_stmt 1 view .LVU823
 3936               	.LVL319:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3937               		.loc 5 481 25 view .LVU824
 3938               		.loc 5 482 9 view .LVU825
 3939               		.loc 5 482 33 is_stmt 0 view .LVU826
 3940 005e 9093 0000 		sts last_hit_buffer+27+1,r25
 3941 0062 8093 0000 		sts last_hit_buffer+27,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3942               		.loc 5 481 51 is_stmt 1 view .LVU827
 3943               	.LVL320:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3944               		.loc 5 481 25 view .LVU828
 3945               		.loc 5 482 9 view .LVU829
 3946               		.loc 5 482 33 is_stmt 0 view .LVU830
 3947 0066 9093 0000 		sts last_hit_buffer+29+1,r25
 3948 006a 8093 0000 		sts last_hit_buffer+29,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3949               		.loc 5 481 51 is_stmt 1 view .LVU831
 3950               	.LVL321:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3951               		.loc 5 481 25 view .LVU832
 3952               		.loc 5 482 9 view .LVU833
 3953               		.loc 5 482 33 is_stmt 0 view .LVU834
 3954 006e 9093 0000 		sts last_hit_buffer+31+1,r25
 3955 0072 8093 0000 		sts last_hit_buffer+31,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3956               		.loc 5 481 51 is_stmt 1 view .LVU835
 3957               	.LVL322:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3958               		.loc 5 481 25 view .LVU836
 3959               		.loc 5 482 9 view .LVU837
 3960               		.loc 5 482 33 is_stmt 0 view .LVU838
 3961 0076 9093 0000 		sts last_hit_buffer+33+1,r25
 3962 007a 8093 0000 		sts last_hit_buffer+33,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3963               		.loc 5 481 51 is_stmt 1 view .LVU839
 3964               	.LVL323:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3965               		.loc 5 481 25 view .LVU840
 3966               		.loc 5 482 9 view .LVU841
 3967               		.loc 5 482 33 is_stmt 0 view .LVU842
 3968 007e 9093 0000 		sts last_hit_buffer+35+1,r25
 3969 0082 8093 0000 		sts last_hit_buffer+35,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3970               		.loc 5 481 51 is_stmt 1 view .LVU843
 3971               	.LVL324:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3972               		.loc 5 481 25 view .LVU844
 3973               		.loc 5 482 9 view .LVU845
 3974               		.loc 5 482 33 is_stmt 0 view .LVU846
 3975 0086 9093 0000 		sts last_hit_buffer+37+1,r25
 3976 008a 8093 0000 		sts last_hit_buffer+37,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3977               		.loc 5 481 51 is_stmt 1 view .LVU847
 3978               	.LVL325:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3979               		.loc 5 481 25 view .LVU848
 3980               		.loc 5 482 9 view .LVU849
 3981               		.loc 5 482 33 is_stmt 0 view .LVU850
 3982 008e 9093 0000 		sts last_hit_buffer+39+1,r25
 3983 0092 8093 0000 		sts last_hit_buffer+39,r24
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3984               		.loc 5 481 51 is_stmt 1 view .LVU851
 3985               	.LVL326:
 481:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 3986               		.loc 5 481 25 view .LVU852
 3987               	.LBE139:
 483:quantum/rgb_matrix.c ****     }
 484:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 485:quantum/rgb_matrix.c **** 
 486:quantum/rgb_matrix.c ****     if (!eeconfig_is_enabled()) {
 3988               		.loc 5 486 5 view .LVU853
 3989               		.loc 5 486 10 is_stmt 0 view .LVU854
 3990 0096 0E94 0000 		call eeconfig_is_enabled
 3991               	.LVL327:
 3992               		.loc 5 486 8 view .LVU855
 3993 009a 8111      		cpse r24,__zero_reg__
 3994 009c 00C0      		rjmp .L167
 487:quantum/rgb_matrix.c ****         dprintf("rgb_matrix_init_drivers eeconfig is not enabled.\n");
 3995               		.loc 5 487 70 is_stmt 1 view .LVU856
 488:quantum/rgb_matrix.c ****         eeconfig_init();
 3996               		.loc 5 488 9 view .LVU857
 3997 009e 0E94 0000 		call eeconfig_init
 3998               	.LVL328:
 489:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 3999               		.loc 5 489 9 view .LVU858
 4000 00a2 0E94 0000 		call eeconfig_update_rgb_matrix_default
 4001               	.LVL329:
 4002               	.L167:
 490:quantum/rgb_matrix.c ****     }
 491:quantum/rgb_matrix.c **** 
 492:quantum/rgb_matrix.c ****     eeconfig_read_rgb_matrix();
 4003               		.loc 5 492 5 view .LVU859
 4004 00a6 0E94 0000 		call eeconfig_read_rgb_matrix
 4005               	.LVL330:
 493:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.mode) {
 4006               		.loc 5 493 5 view .LVU860
 4007               		.loc 5 493 9 is_stmt 0 view .LVU861
 4008 00aa 8091 0000 		lds r24,rgb_matrix_config
 4009 00ae 8C7F      		andi r24,lo8(-4)
 4010               		.loc 5 493 8 view .LVU862
 4011 00b0 01F4      		brne .L166
 494:quantum/rgb_matrix.c ****         dprintf("rgb_matrix_init_drivers rgb_matrix_config.mode = 0. Write default values to EEPROM
 4012               		.loc 5 494 105 is_stmt 1 view .LVU863
 495:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 4013               		.loc 5 495 9 view .LVU864
 4014 00b2 0C94 0000 		jmp eeconfig_update_rgb_matrix_default
 4015               	.LVL331:
 4016               	.L166:
 4017               	/* epilogue start */
 496:quantum/rgb_matrix.c ****     }
 497:quantum/rgb_matrix.c ****     eeconfig_debug_rgb_matrix();  // display current eeprom values
 498:quantum/rgb_matrix.c **** }
 4018               		.loc 5 498 1 is_stmt 0 view .LVU865
 4019 00b6 0895      		ret
 4020               		.cfi_endproc
 4021               	.LFE134:
 4023               		.section	.text.rgb_matrix_set_suspend_state,"ax",@progbits
 4024               	.global	rgb_matrix_set_suspend_state
 4026               	rgb_matrix_set_suspend_state:
 4027               	.LVL332:
 4028               	.LFB135:
 499:quantum/rgb_matrix.c **** 
 500:quantum/rgb_matrix.c **** void rgb_matrix_set_suspend_state(bool state) {
 4029               		.loc 5 500 47 is_stmt 1 view -0
 4030               		.cfi_startproc
 4031               		.loc 5 500 47 is_stmt 0 view .LVU867
 4032 0000 CF93      		push r28
 4033               	.LCFI127:
 4034               		.cfi_def_cfa_offset 3
 4035               		.cfi_offset 28, -2
 4036               	/* prologue: function */
 4037               	/* frame size = 0 */
 4038               	/* stack size = 1 */
 4039               	.L__stack_usage = 1
 4040 0002 C82F      		mov r28,r24
 501:quantum/rgb_matrix.c **** #ifdef RGB_DISABLE_WHEN_USB_SUSPENDED
 502:quantum/rgb_matrix.c ****     if (state) {
 4041               		.loc 5 502 5 is_stmt 1 view .LVU868
 4042               		.loc 5 502 8 is_stmt 0 view .LVU869
 4043 0004 8823      		tst r24
 4044 0006 01F0      		breq .L170
 503:quantum/rgb_matrix.c ****         rgb_matrix_set_color_all(0, 0, 0);  // turn off all LEDs when suspending
 4045               		.loc 5 503 9 is_stmt 1 view .LVU870
 4046 0008 40E0      		ldi r20,0
 4047 000a 60E0      		ldi r22,0
 4048 000c 80E0      		ldi r24,0
 4049               	.LVL333:
 4050               		.loc 5 503 9 is_stmt 0 view .LVU871
 4051 000e 0E94 0000 		call rgb_matrix_set_color_all
 4052               	.LVL334:
 4053               	.L170:
 504:quantum/rgb_matrix.c ****     }
 505:quantum/rgb_matrix.c ****     suspend_state = state;
 4054               		.loc 5 505 5 is_stmt 1 view .LVU872
 4055               		.loc 5 505 19 is_stmt 0 view .LVU873
 4056 0012 C093 0000 		sts suspend_state,r28
 4057               	/* epilogue start */
 506:quantum/rgb_matrix.c **** #endif
 507:quantum/rgb_matrix.c **** }
 4058               		.loc 5 507 1 view .LVU874
 4059 0016 CF91      		pop r28
 4060               	.LVL335:
 4061               		.loc 5 507 1 view .LVU875
 4062 0018 0895      		ret
 4063               		.cfi_endproc
 4064               	.LFE135:
 4066               		.section	.text.rgb_matrix_get_suspend_state,"ax",@progbits
 4067               	.global	rgb_matrix_get_suspend_state
 4069               	rgb_matrix_get_suspend_state:
 4070               	.LFB136:
 508:quantum/rgb_matrix.c **** 
 509:quantum/rgb_matrix.c **** bool rgb_matrix_get_suspend_state(void) { return suspend_state; }
 4071               		.loc 5 509 41 is_stmt 1 view -0
 4072               		.cfi_startproc
 4073               	/* prologue: function */
 4074               	/* frame size = 0 */
 4075               	/* stack size = 0 */
 4076               	.L__stack_usage = 0
 4077               		.loc 5 509 43 view .LVU877
 4078               		.loc 5 509 1 is_stmt 0 view .LVU878
 4079 0000 8091 0000 		lds r24,suspend_state
 4080               	/* epilogue start */
 4081 0004 0895      		ret
 4082               		.cfi_endproc
 4083               	.LFE136:
 4085               		.section	.text.rgb_matrix_toggle_eeprom_helper,"ax",@progbits
 4086               	.global	rgb_matrix_toggle_eeprom_helper
 4088               	rgb_matrix_toggle_eeprom_helper:
 4089               	.LVL336:
 4090               	.LFB137:
 510:quantum/rgb_matrix.c **** 
 511:quantum/rgb_matrix.c **** void rgb_matrix_toggle_eeprom_helper(bool write_to_eeprom) {
 4091               		.loc 5 511 60 is_stmt 1 view -0
 4092               		.cfi_startproc
 4093               	/* prologue: function */
 4094               	/* frame size = 0 */
 4095               	/* stack size = 0 */
 4096               	.L__stack_usage = 0
 512:quantum/rgb_matrix.c ****     rgb_matrix_config.enable ^= 1;
 4097               		.loc 5 512 5 view .LVU880
 4098               		.loc 5 512 30 is_stmt 0 view .LVU881
 4099 0000 9091 0000 		lds r25,rgb_matrix_config
 4100 0004 21E0      		ldi r18,lo8(1)
 4101 0006 9227      		eor r25,r18
 4102 0008 9093 0000 		sts rgb_matrix_config,r25
 513:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 4103               		.loc 5 513 5 is_stmt 1 view .LVU882
 4104               		.loc 5 513 20 is_stmt 0 view .LVU883
 4105 000c 1092 0000 		sts rgb_task_state,__zero_reg__
 514:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 4106               		.loc 5 514 5 is_stmt 1 view .LVU884
 4107               		.loc 5 514 8 is_stmt 0 view .LVU885
 4108 0010 8111      		cpse r24,__zero_reg__
 515:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 4109               		.loc 5 515 9 is_stmt 1 view .LVU886
 4110 0012 0C94 0000 		jmp eeconfig_update_rgb_matrix
 4111               	.LVL337:
 4112               	.L175:
 4113               	/* epilogue start */
 516:quantum/rgb_matrix.c ****     }
 517:quantum/rgb_matrix.c ****     dprintf("rgb matrix toggle [%s]: rgb_matrix_config.enable = %u\n", (write_to_eeprom) ? "EEPROM"
 518:quantum/rgb_matrix.c **** }
 4114               		.loc 5 518 1 is_stmt 0 view .LVU887
 4115 0016 0895      		ret
 4116               		.cfi_endproc
 4117               	.LFE137:
 4119               		.section	.text.rgb_matrix_toggle_noeeprom,"ax",@progbits
 4120               	.global	rgb_matrix_toggle_noeeprom
 4122               	rgb_matrix_toggle_noeeprom:
 4123               	.LFB138:
 519:quantum/rgb_matrix.c **** void rgb_matrix_toggle_noeeprom(void) { rgb_matrix_toggle_eeprom_helper(false); }
 4124               		.loc 5 519 39 is_stmt 1 view -0
 4125               		.cfi_startproc
 4126               	/* prologue: function */
 4127               	/* frame size = 0 */
 4128               	/* stack size = 0 */
 4129               	.L__stack_usage = 0
 4130               		.loc 5 519 41 view .LVU889
 4131 0000 80E0      		ldi r24,0
 4132 0002 0C94 0000 		jmp rgb_matrix_toggle_eeprom_helper
 4133               	.LVL338:
 4134               		.cfi_endproc
 4135               	.LFE138:
 4137               		.section	.text.rgb_matrix_toggle,"ax",@progbits
 4138               	.global	rgb_matrix_toggle
 4140               	rgb_matrix_toggle:
 4141               	.LFB139:
 520:quantum/rgb_matrix.c **** void rgb_matrix_toggle(void) { rgb_matrix_toggle_eeprom_helper(true); }
 4142               		.loc 5 520 30 view -0
 4143               		.cfi_startproc
 4144               	/* prologue: function */
 4145               	/* frame size = 0 */
 4146               	/* stack size = 0 */
 4147               	.L__stack_usage = 0
 4148               		.loc 5 520 32 view .LVU891
 4149 0000 81E0      		ldi r24,lo8(1)
 4150 0002 0C94 0000 		jmp rgb_matrix_toggle_eeprom_helper
 4151               	.LVL339:
 4152               		.cfi_endproc
 4153               	.LFE139:
 4155               		.section	.text.rgb_matrix_enable_noeeprom,"ax",@progbits
 4156               	.global	rgb_matrix_enable_noeeprom
 4158               	rgb_matrix_enable_noeeprom:
 4159               	.LFB141:
 521:quantum/rgb_matrix.c **** 
 522:quantum/rgb_matrix.c **** void rgb_matrix_enable(void) {
 523:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 524:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 525:quantum/rgb_matrix.c **** }
 526:quantum/rgb_matrix.c **** 
 527:quantum/rgb_matrix.c **** void rgb_matrix_enable_noeeprom(void) {
 4160               		.loc 5 527 39 view -0
 4161               		.cfi_startproc
 4162               	/* prologue: function */
 4163               	/* frame size = 0 */
 4164               	/* stack size = 0 */
 4165               	.L__stack_usage = 0
 528:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.enable) rgb_task_state = STARTING;
 4166               		.loc 5 528 5 view .LVU893
 4167               		.loc 5 528 9 is_stmt 0 view .LVU894
 4168 0000 8091 0000 		lds r24,rgb_matrix_config
 4169 0004 8370      		andi r24,lo8(3)
 4170               		.loc 5 528 8 view .LVU895
 4171 0006 01F4      		brne .L180
 4172               		.loc 5 528 36 is_stmt 1 discriminator 1 view .LVU896
 4173               		.loc 5 528 51 is_stmt 0 discriminator 1 view .LVU897
 4174 0008 1092 0000 		sts rgb_task_state,__zero_reg__
 4175               	.L180:
 529:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 4176               		.loc 5 529 5 is_stmt 1 view .LVU898
 4177               		.loc 5 529 30 is_stmt 0 view .LVU899
 4178 000c 8091 0000 		lds r24,rgb_matrix_config
 4179 0010 8C7F      		andi r24,lo8(-4)
 4180 0012 8160      		ori r24,lo8(1)
 4181 0014 8093 0000 		sts rgb_matrix_config,r24
 4182               	/* epilogue start */
 530:quantum/rgb_matrix.c **** }
 4183               		.loc 5 530 1 view .LVU900
 4184 0018 0895      		ret
 4185               		.cfi_endproc
 4186               	.LFE141:
 4188               		.section	.text.rgb_matrix_enable,"ax",@progbits
 4189               	.global	rgb_matrix_enable
 4191               	rgb_matrix_enable:
 4192               	.LFB140:
 522:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 4193               		.loc 5 522 30 is_stmt 1 view -0
 4194               		.cfi_startproc
 4195               	/* prologue: function */
 4196               	/* frame size = 0 */
 4197               	/* stack size = 0 */
 4198               	.L__stack_usage = 0
 523:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 4199               		.loc 5 523 5 view .LVU902
 4200 0000 0E94 0000 		call rgb_matrix_enable_noeeprom
 4201               	.LVL340:
 524:quantum/rgb_matrix.c **** }
 4202               		.loc 5 524 5 view .LVU903
 4203 0004 0C94 0000 		jmp eeconfig_update_rgb_matrix
 4204               	.LVL341:
 4205               		.cfi_endproc
 4206               	.LFE140:
 4208               		.section	.text.rgb_matrix_disable_noeeprom,"ax",@progbits
 4209               	.global	rgb_matrix_disable_noeeprom
 4211               	rgb_matrix_disable_noeeprom:
 4212               	.LFB143:
 531:quantum/rgb_matrix.c **** 
 532:quantum/rgb_matrix.c **** void rgb_matrix_disable(void) {
 533:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 534:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 535:quantum/rgb_matrix.c **** }
 536:quantum/rgb_matrix.c **** 
 537:quantum/rgb_matrix.c **** void rgb_matrix_disable_noeeprom(void) {
 4213               		.loc 5 537 40 view -0
 4214               		.cfi_startproc
 4215               	/* prologue: function */
 4216               	/* frame size = 0 */
 4217               	/* stack size = 0 */
 4218               	.L__stack_usage = 0
 538:quantum/rgb_matrix.c ****     if (rgb_matrix_config.enable) rgb_task_state = STARTING;
 4219               		.loc 5 538 5 view .LVU905
 4220               		.loc 5 538 9 is_stmt 0 view .LVU906
 4221 0000 8091 0000 		lds r24,rgb_matrix_config
 4222 0004 8370      		andi r24,lo8(3)
 4223               		.loc 5 538 8 view .LVU907
 4224 0006 01F0      		breq .L183
 4225               		.loc 5 538 35 is_stmt 1 discriminator 1 view .LVU908
 4226               		.loc 5 538 50 is_stmt 0 discriminator 1 view .LVU909
 4227 0008 1092 0000 		sts rgb_task_state,__zero_reg__
 4228               	.L183:
 539:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 0;
 4229               		.loc 5 539 5 is_stmt 1 view .LVU910
 4230               		.loc 5 539 30 is_stmt 0 view .LVU911
 4231 000c 8091 0000 		lds r24,rgb_matrix_config
 4232 0010 8C7F      		andi r24,lo8(-4)
 4233 0012 8093 0000 		sts rgb_matrix_config,r24
 4234               	/* epilogue start */
 540:quantum/rgb_matrix.c **** }
 4235               		.loc 5 540 1 view .LVU912
 4236 0016 0895      		ret
 4237               		.cfi_endproc
 4238               	.LFE143:
 4240               		.section	.text.rgb_matrix_disable,"ax",@progbits
 4241               	.global	rgb_matrix_disable
 4243               	rgb_matrix_disable:
 4244               	.LFB142:
 532:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 4245               		.loc 5 532 31 is_stmt 1 view -0
 4246               		.cfi_startproc
 4247               	/* prologue: function */
 4248               	/* frame size = 0 */
 4249               	/* stack size = 0 */
 4250               	.L__stack_usage = 0
 533:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 4251               		.loc 5 533 5 view .LVU914
 4252 0000 0E94 0000 		call rgb_matrix_disable_noeeprom
 4253               	.LVL342:
 534:quantum/rgb_matrix.c **** }
 4254               		.loc 5 534 5 view .LVU915
 4255 0004 0C94 0000 		jmp eeconfig_update_rgb_matrix
 4256               	.LVL343:
 4257               		.cfi_endproc
 4258               	.LFE142:
 4260               		.section	.text.rgb_matrix_is_enabled,"ax",@progbits
 4261               	.global	rgb_matrix_is_enabled
 4263               	rgb_matrix_is_enabled:
 4264               	.LFB144:
 541:quantum/rgb_matrix.c **** 
 542:quantum/rgb_matrix.c **** uint8_t rgb_matrix_is_enabled(void) { return rgb_matrix_config.enable; }
 4265               		.loc 5 542 37 view -0
 4266               		.cfi_startproc
 4267               	/* prologue: function */
 4268               	/* frame size = 0 */
 4269               	/* stack size = 0 */
 4270               	.L__stack_usage = 0
 4271               		.loc 5 542 39 view .LVU917
 4272               		.loc 5 542 63 is_stmt 0 view .LVU918
 4273 0000 8091 0000 		lds r24,rgb_matrix_config
 4274               		.loc 5 542 1 view .LVU919
 4275 0004 8370      		andi r24,lo8(3)
 4276               	/* epilogue start */
 4277 0006 0895      		ret
 4278               		.cfi_endproc
 4279               	.LFE144:
 4281               		.section	.text.rgb_matrix_mode_eeprom_helper,"ax",@progbits
 4282               	.global	rgb_matrix_mode_eeprom_helper
 4284               	rgb_matrix_mode_eeprom_helper:
 4285               	.LVL344:
 4286               	.LFB145:
 543:quantum/rgb_matrix.c **** 
 544:quantum/rgb_matrix.c **** void rgb_matrix_mode_eeprom_helper(uint8_t mode, bool write_to_eeprom) {
 4287               		.loc 5 544 72 is_stmt 1 view -0
 4288               		.cfi_startproc
 4289               	/* prologue: function */
 4290               	/* frame size = 0 */
 4291               	/* stack size = 0 */
 4292               	.L__stack_usage = 0
 545:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.enable) {
 4293               		.loc 5 545 5 view .LVU921
 4294               		.loc 5 545 9 is_stmt 0 view .LVU922
 4295 0000 9091 0000 		lds r25,rgb_matrix_config
 4296 0004 9370      		andi r25,lo8(3)
 4297               		.loc 5 545 8 view .LVU923
 4298 0006 01F0      		breq .L189
 546:quantum/rgb_matrix.c ****         return;
 547:quantum/rgb_matrix.c ****     }
 548:quantum/rgb_matrix.c ****     if (mode < 1) {
 4299               		.loc 5 548 5 is_stmt 1 view .LVU924
 4300               		.loc 5 548 8 is_stmt 0 view .LVU925
 4301 0008 8111      		cpse r24,__zero_reg__
 4302 000a 00C0      		rjmp .L192
 549:quantum/rgb_matrix.c ****         rgb_matrix_config.mode = 1;
 4303               		.loc 5 549 9 is_stmt 1 view .LVU926
 4304               		.loc 5 549 32 is_stmt 0 view .LVU927
 4305 000c 9460      		ori r25,lo8(4)
 4306               	.LVL345:
 4307               	.L199:
 550:quantum/rgb_matrix.c ****     } else if (mode >= RGB_MATRIX_EFFECT_MAX) {
 551:quantum/rgb_matrix.c ****         rgb_matrix_config.mode = RGB_MATRIX_EFFECT_MAX - 1;
 552:quantum/rgb_matrix.c ****     } else {
 553:quantum/rgb_matrix.c ****         rgb_matrix_config.mode = mode;
 4308               		.loc 5 553 32 view .LVU928
 4309 000e 9093 0000 		sts rgb_matrix_config,r25
 554:quantum/rgb_matrix.c ****     }
 555:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 4310               		.loc 5 555 5 is_stmt 1 view .LVU929
 4311               		.loc 5 555 20 is_stmt 0 view .LVU930
 4312 0012 1092 0000 		sts rgb_task_state,__zero_reg__
 556:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 4313               		.loc 5 556 5 is_stmt 1 view .LVU931
 4314               		.loc 5 556 8 is_stmt 0 view .LVU932
 4315 0016 6623      		tst r22
 4316 0018 01F0      		breq .L189
 557:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 4317               		.loc 5 557 9 is_stmt 1 view .LVU933
 4318 001a 0C94 0000 		jmp eeconfig_update_rgb_matrix
 4319               	.LVL346:
 4320               	.L192:
 550:quantum/rgb_matrix.c ****         rgb_matrix_config.mode = RGB_MATRIX_EFFECT_MAX - 1;
 4321               		.loc 5 550 12 view .LVU934
 550:quantum/rgb_matrix.c ****         rgb_matrix_config.mode = RGB_MATRIX_EFFECT_MAX - 1;
 4322               		.loc 5 550 15 is_stmt 0 view .LVU935
 4323 001e 8730      		cpi r24,lo8(7)
 4324 0020 00F0      		brlo .L194
 551:quantum/rgb_matrix.c ****     } else {
 4325               		.loc 5 551 9 is_stmt 1 view .LVU936
 551:quantum/rgb_matrix.c ****     } else {
 4326               		.loc 5 551 32 is_stmt 0 view .LVU937
 4327 0022 9861      		ori r25,lo8(24)
 4328 0024 00C0      		rjmp .L199
 4329               	.L194:
 553:quantum/rgb_matrix.c ****     }
 4330               		.loc 5 553 9 is_stmt 1 view .LVU938
 553:quantum/rgb_matrix.c ****     }
 4331               		.loc 5 553 32 is_stmt 0 view .LVU939
 4332 0026 880F      		lsl r24
 4333 0028 880F      		lsl r24
 4334               	.LVL347:
 553:quantum/rgb_matrix.c ****     }
 4335               		.loc 5 553 32 view .LVU940
 4336 002a 982B      		or r25,r24
 4337 002c 00C0      		rjmp .L199
 4338               	.L189:
 4339               	/* epilogue start */
 558:quantum/rgb_matrix.c ****     }
 559:quantum/rgb_matrix.c ****     dprintf("rgb matrix mode [%s]: %u\n", (write_to_eeprom) ? "EEPROM" : "NOEEPROM", rgb_matrix_con
 560:quantum/rgb_matrix.c **** }
 4340               		.loc 5 560 1 view .LVU941
 4341 002e 0895      		ret
 4342               		.cfi_endproc
 4343               	.LFE145:
 4345               		.section	.text.rgb_matrix_mode_noeeprom,"ax",@progbits
 4346               	.global	rgb_matrix_mode_noeeprom
 4348               	rgb_matrix_mode_noeeprom:
 4349               	.LVL348:
 4350               	.LFB146:
 561:quantum/rgb_matrix.c **** void rgb_matrix_mode_noeeprom(uint8_t mode) { rgb_matrix_mode_eeprom_helper(mode, false); }
 4351               		.loc 5 561 45 is_stmt 1 view -0
 4352               		.cfi_startproc
 4353               	/* prologue: function */
 4354               	/* frame size = 0 */
 4355               	/* stack size = 0 */
 4356               	.L__stack_usage = 0
 4357               		.loc 5 561 47 view .LVU943
 4358 0000 60E0      		ldi r22,0
 4359 0002 0C94 0000 		jmp rgb_matrix_mode_eeprom_helper
 4360               	.LVL349:
 4361               		.loc 5 561 47 is_stmt 0 view .LVU944
 4362               		.cfi_endproc
 4363               	.LFE146:
 4365               		.section	.text.rgb_matrix_mode,"ax",@progbits
 4366               	.global	rgb_matrix_mode
 4368               	rgb_matrix_mode:
 4369               	.LVL350:
 4370               	.LFB147:
 562:quantum/rgb_matrix.c **** void rgb_matrix_mode(uint8_t mode) { rgb_matrix_mode_eeprom_helper(mode, true); }
 4371               		.loc 5 562 36 is_stmt 1 view -0
 4372               		.cfi_startproc
 4373               	/* prologue: function */
 4374               	/* frame size = 0 */
 4375               	/* stack size = 0 */
 4376               	.L__stack_usage = 0
 4377               		.loc 5 562 38 view .LVU946
 4378 0000 61E0      		ldi r22,lo8(1)
 4379 0002 0C94 0000 		jmp rgb_matrix_mode_eeprom_helper
 4380               	.LVL351:
 4381               		.loc 5 562 38 is_stmt 0 view .LVU947
 4382               		.cfi_endproc
 4383               	.LFE147:
 4385               		.section	.text.rgb_matrix_get_mode,"ax",@progbits
 4386               	.global	rgb_matrix_get_mode
 4388               	rgb_matrix_get_mode:
 4389               	.LFB148:
 563:quantum/rgb_matrix.c **** 
 564:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_mode(void) { return rgb_matrix_config.mode; }
 4390               		.loc 5 564 35 is_stmt 1 view -0
 4391               		.cfi_startproc
 4392               	/* prologue: function */
 4393               	/* frame size = 0 */
 4394               	/* stack size = 0 */
 4395               	.L__stack_usage = 0
 4396               		.loc 5 564 37 view .LVU949
 4397               		.loc 5 564 61 is_stmt 0 view .LVU950
 4398 0000 8091 0000 		lds r24,rgb_matrix_config
 4399               		.loc 5 564 1 view .LVU951
 4400 0004 8695      		lsr r24
 4401 0006 8695      		lsr r24
 4402               	/* epilogue start */
 4403 0008 0895      		ret
 4404               		.cfi_endproc
 4405               	.LFE148:
 4407               		.section	.text.rgb_matrix_step_helper,"ax",@progbits
 4408               	.global	rgb_matrix_step_helper
 4410               	rgb_matrix_step_helper:
 4411               	.LVL352:
 4412               	.LFB149:
 565:quantum/rgb_matrix.c **** 
 566:quantum/rgb_matrix.c **** void rgb_matrix_step_helper(bool write_to_eeprom) {
 4413               		.loc 5 566 51 is_stmt 1 view -0
 4414               		.cfi_startproc
 4415               	/* prologue: function */
 4416               	/* frame size = 0 */
 4417               	/* stack size = 0 */
 4418               	.L__stack_usage = 0
 4419               		.loc 5 566 51 is_stmt 0 view .LVU953
 4420 0000 682F      		mov r22,r24
 567:quantum/rgb_matrix.c ****     uint8_t mode = rgb_matrix_config.mode + 1;
 4421               		.loc 5 567 5 is_stmt 1 view .LVU954
 4422               		.loc 5 567 37 is_stmt 0 view .LVU955
 4423 0002 9091 0000 		lds r25,rgb_matrix_config
 4424 0006 9695      		lsr r25
 4425 0008 9695      		lsr r25
 4426               		.loc 5 567 13 view .LVU956
 4427 000a 81E0      		ldi r24,lo8(1)
 4428               	.LVL353:
 4429               		.loc 5 567 13 view .LVU957
 4430 000c 890F      		add r24,r25
 4431               	.LVL354:
 568:quantum/rgb_matrix.c ****     rgb_matrix_mode_eeprom_helper((mode < RGB_MATRIX_EFFECT_MAX) ? mode : 1, write_to_eeprom);
 4432               		.loc 5 568 5 is_stmt 1 view .LVU958
 4433 000e 8730      		cpi r24,lo8(7)
 4434 0010 00F0      		brlo .L204
 4435 0012 81E0      		ldi r24,lo8(1)
 4436               	.LVL355:
 4437               	.L204:
 4438               		.loc 5 568 5 is_stmt 0 discriminator 4 view .LVU959
 4439 0014 0C94 0000 		jmp rgb_matrix_mode_eeprom_helper
 4440               	.LVL356:
 4441               		.loc 5 568 5 discriminator 4 view .LVU960
 4442               		.cfi_endproc
 4443               	.LFE149:
 4445               		.section	.text.rgb_matrix_step_noeeprom,"ax",@progbits
 4446               	.global	rgb_matrix_step_noeeprom
 4448               	rgb_matrix_step_noeeprom:
 4449               	.LFB150:
 569:quantum/rgb_matrix.c **** }
 570:quantum/rgb_matrix.c **** void rgb_matrix_step_noeeprom(void) { rgb_matrix_step_helper(false); }
 4450               		.loc 5 570 37 is_stmt 1 view -0
 4451               		.cfi_startproc
 4452               	/* prologue: function */
 4453               	/* frame size = 0 */
 4454               	/* stack size = 0 */
 4455               	.L__stack_usage = 0
 4456               		.loc 5 570 39 view .LVU962
 4457 0000 80E0      		ldi r24,0
 4458 0002 0C94 0000 		jmp rgb_matrix_step_helper
 4459               	.LVL357:
 4460               		.cfi_endproc
 4461               	.LFE150:
 4463               		.section	.text.rgb_matrix_step,"ax",@progbits
 4464               	.global	rgb_matrix_step
 4466               	rgb_matrix_step:
 4467               	.LFB151:
 571:quantum/rgb_matrix.c **** void rgb_matrix_step(void) { rgb_matrix_step_helper(true); }
 4468               		.loc 5 571 28 view -0
 4469               		.cfi_startproc
 4470               	/* prologue: function */
 4471               	/* frame size = 0 */
 4472               	/* stack size = 0 */
 4473               	.L__stack_usage = 0
 4474               		.loc 5 571 30 view .LVU964
 4475 0000 81E0      		ldi r24,lo8(1)
 4476 0002 0C94 0000 		jmp rgb_matrix_step_helper
 4477               	.LVL358:
 4478               		.cfi_endproc
 4479               	.LFE151:
 4481               		.section	.text.rgb_matrix_step_reverse_helper,"ax",@progbits
 4482               	.global	rgb_matrix_step_reverse_helper
 4484               	rgb_matrix_step_reverse_helper:
 4485               	.LVL359:
 4486               	.LFB152:
 572:quantum/rgb_matrix.c **** 
 573:quantum/rgb_matrix.c **** void rgb_matrix_step_reverse_helper(bool write_to_eeprom) {
 4487               		.loc 5 573 59 view -0
 4488               		.cfi_startproc
 4489               	/* prologue: function */
 4490               	/* frame size = 0 */
 4491               	/* stack size = 0 */
 4492               	.L__stack_usage = 0
 4493               		.loc 5 573 59 is_stmt 0 view .LVU966
 4494 0000 682F      		mov r22,r24
 574:quantum/rgb_matrix.c ****     uint8_t mode = rgb_matrix_config.mode - 1;
 4495               		.loc 5 574 5 is_stmt 1 view .LVU967
 4496               		.loc 5 574 37 is_stmt 0 view .LVU968
 4497 0002 9091 0000 		lds r25,rgb_matrix_config
 4498 0006 9695      		lsr r25
 4499 0008 9695      		lsr r25
 4500               		.loc 5 574 13 view .LVU969
 4501 000a 8FEF      		ldi r24,lo8(-1)
 4502               	.LVL360:
 4503               		.loc 5 574 13 view .LVU970
 4504 000c 890F      		add r24,r25
 4505               	.LVL361:
 575:quantum/rgb_matrix.c ****     rgb_matrix_mode_eeprom_helper((mode < 1) ? RGB_MATRIX_EFFECT_MAX - 1 : mode, write_to_eeprom);
 4506               		.loc 5 575 5 is_stmt 1 view .LVU971
 4507 000e 01F4      		brne .L209
 4508 0010 86E0      		ldi r24,lo8(6)
 4509               	.LVL362:
 4510               	.L209:
 4511               		.loc 5 575 5 is_stmt 0 discriminator 4 view .LVU972
 4512 0012 0C94 0000 		jmp rgb_matrix_mode_eeprom_helper
 4513               	.LVL363:
 4514               		.loc 5 575 5 discriminator 4 view .LVU973
 4515               		.cfi_endproc
 4516               	.LFE152:
 4518               		.section	.text.rgb_matrix_step_reverse_noeeprom,"ax",@progbits
 4519               	.global	rgb_matrix_step_reverse_noeeprom
 4521               	rgb_matrix_step_reverse_noeeprom:
 4522               	.LFB153:
 576:quantum/rgb_matrix.c **** }
 577:quantum/rgb_matrix.c **** void rgb_matrix_step_reverse_noeeprom(void) { rgb_matrix_step_reverse_helper(false); }
 4523               		.loc 5 577 45 is_stmt 1 view -0
 4524               		.cfi_startproc
 4525               	/* prologue: function */
 4526               	/* frame size = 0 */
 4527               	/* stack size = 0 */
 4528               	.L__stack_usage = 0
 4529               		.loc 5 577 47 view .LVU975
 4530 0000 80E0      		ldi r24,0
 4531 0002 0C94 0000 		jmp rgb_matrix_step_reverse_helper
 4532               	.LVL364:
 4533               		.cfi_endproc
 4534               	.LFE153:
 4536               		.section	.text.rgb_matrix_step_reverse,"ax",@progbits
 4537               	.global	rgb_matrix_step_reverse
 4539               	rgb_matrix_step_reverse:
 4540               	.LFB154:
 578:quantum/rgb_matrix.c **** void rgb_matrix_step_reverse(void) { rgb_matrix_step_reverse_helper(true); }
 4541               		.loc 5 578 36 view -0
 4542               		.cfi_startproc
 4543               	/* prologue: function */
 4544               	/* frame size = 0 */
 4545               	/* stack size = 0 */
 4546               	.L__stack_usage = 0
 4547               		.loc 5 578 38 view .LVU977
 4548 0000 81E0      		ldi r24,lo8(1)
 4549 0002 0C94 0000 		jmp rgb_matrix_step_reverse_helper
 4550               	.LVL365:
 4551               		.cfi_endproc
 4552               	.LFE154:
 4554               		.section	.text.rgb_matrix_sethsv_eeprom_helper,"ax",@progbits
 4555               	.global	rgb_matrix_sethsv_eeprom_helper
 4557               	rgb_matrix_sethsv_eeprom_helper:
 4558               	.LVL366:
 4559               	.LFB155:
 579:quantum/rgb_matrix.c **** 
 580:quantum/rgb_matrix.c **** void rgb_matrix_sethsv_eeprom_helper(uint16_t hue, uint8_t sat, uint8_t val, bool write_to_eeprom) 
 4560               		.loc 5 580 100 view -0
 4561               		.cfi_startproc
 4562               	/* prologue: function */
 4563               	/* frame size = 0 */
 4564               	/* stack size = 0 */
 4565               	.L__stack_usage = 0
 581:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.enable) {
 4566               		.loc 5 581 5 view .LVU979
 4567               		.loc 5 581 9 is_stmt 0 view .LVU980
 4568 0000 9091 0000 		lds r25,rgb_matrix_config
 4569 0004 9370      		andi r25,lo8(3)
 4570               		.loc 5 581 8 view .LVU981
 4571 0006 01F0      		breq .L212
 582:quantum/rgb_matrix.c ****         return;
 583:quantum/rgb_matrix.c ****     }
 584:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h = hue;
 4572               		.loc 5 584 5 is_stmt 1 view .LVU982
 4573               		.loc 5 584 29 is_stmt 0 view .LVU983
 4574 0008 8093 0000 		sts rgb_matrix_config+1,r24
 585:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = sat;
 4575               		.loc 5 585 5 is_stmt 1 view .LVU984
 4576               		.loc 5 585 29 is_stmt 0 view .LVU985
 4577 000c 6093 0000 		sts rgb_matrix_config+2,r22
 586:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = (val > RGB_MATRIX_MAXIMUM_BRIGHTNESS) ? RGB_MATRIX_MAXIMUM_BRIGHTNESS
 4578               		.loc 5 586 5 is_stmt 1 view .LVU986
 4579               		.loc 5 586 29 is_stmt 0 view .LVU987
 4580 0010 4093 0000 		sts rgb_matrix_config+3,r20
 587:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 4581               		.loc 5 587 5 is_stmt 1 view .LVU988
 4582               		.loc 5 587 8 is_stmt 0 view .LVU989
 4583 0014 2111      		cpse r18,__zero_reg__
 588:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 4584               		.loc 5 588 9 is_stmt 1 view .LVU990
 4585 0016 0C94 0000 		jmp eeconfig_update_rgb_matrix
 4586               	.LVL367:
 4587               	.L212:
 4588               	/* epilogue start */
 589:quantum/rgb_matrix.c ****     }
 590:quantum/rgb_matrix.c ****     dprintf("rgb matrix set hsv [%s]: %u,%u,%u\n", (write_to_eeprom) ? "EEPROM" : "NOEEPROM", rgb_m
 591:quantum/rgb_matrix.c **** }
 4589               		.loc 5 591 1 is_stmt 0 view .LVU991
 4590 001a 0895      		ret
 4591               		.cfi_endproc
 4592               	.LFE155:
 4594               		.section	.text.rgb_matrix_sethsv_noeeprom,"ax",@progbits
 4595               	.global	rgb_matrix_sethsv_noeeprom
 4597               	rgb_matrix_sethsv_noeeprom:
 4598               	.LVL368:
 4599               	.LFB156:
 592:quantum/rgb_matrix.c **** void rgb_matrix_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val) { rgb_matrix_sethsv_eeprom_
 4600               		.loc 5 592 73 is_stmt 1 view -0
 4601               		.cfi_startproc
 4602               	/* prologue: function */
 4603               	/* frame size = 0 */
 4604               	/* stack size = 0 */
 4605               	.L__stack_usage = 0
 4606               		.loc 5 592 75 view .LVU993
 4607 0000 20E0      		ldi r18,0
 4608 0002 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 4609               	.LVL369:
 4610               		.loc 5 592 75 is_stmt 0 view .LVU994
 4611               		.cfi_endproc
 4612               	.LFE156:
 4614               		.section	.text.rgb_matrix_sethsv,"ax",@progbits
 4615               	.global	rgb_matrix_sethsv
 4617               	rgb_matrix_sethsv:
 4618               	.LVL370:
 4619               	.LFB157:
 593:quantum/rgb_matrix.c **** void rgb_matrix_sethsv(uint16_t hue, uint8_t sat, uint8_t val) { rgb_matrix_sethsv_eeprom_helper(hu
 4620               		.loc 5 593 64 is_stmt 1 view -0
 4621               		.cfi_startproc
 4622               	/* prologue: function */
 4623               	/* frame size = 0 */
 4624               	/* stack size = 0 */
 4625               	.L__stack_usage = 0
 4626               		.loc 5 593 66 view .LVU996
 4627 0000 21E0      		ldi r18,lo8(1)
 4628 0002 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 4629               	.LVL371:
 4630               		.loc 5 593 66 is_stmt 0 view .LVU997
 4631               		.cfi_endproc
 4632               	.LFE157:
 4634               		.section	.text.rgb_matrix_get_hsv,"ax",@progbits
 4635               	.global	rgb_matrix_get_hsv
 4637               	rgb_matrix_get_hsv:
 4638               	.LFB158:
 594:quantum/rgb_matrix.c **** 
 595:quantum/rgb_matrix.c **** HSV     rgb_matrix_get_hsv(void) { return rgb_matrix_config.hsv; }
 4639               		.loc 5 595 34 is_stmt 1 view -0
 4640               		.cfi_startproc
 4641               	/* prologue: function */
 4642               	/* frame size = 0 */
 4643               	/* stack size = 0 */
 4644               	.L__stack_usage = 0
 4645               		.loc 5 595 36 view .LVU999
 4646               		.loc 5 595 60 is_stmt 0 view .LVU1000
 4647 0000 6091 0000 		lds r22,rgb_matrix_config+1
 4648 0004 7091 0000 		lds r23,rgb_matrix_config+1+1
 4649 0008 8091 0000 		lds r24,rgb_matrix_config+1+2
 4650               	/* epilogue start */
 4651               		.loc 5 595 1 view .LVU1001
 4652 000c 0895      		ret
 4653               		.cfi_endproc
 4654               	.LFE158:
 4656               		.section	.text.rgb_matrix_get_hue,"ax",@progbits
 4657               	.global	rgb_matrix_get_hue
 4659               	rgb_matrix_get_hue:
 4660               	.LFB159:
 596:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_hue(void) { return rgb_matrix_config.hsv.h; }
 4661               		.loc 5 596 34 is_stmt 1 view -0
 4662               		.cfi_startproc
 4663               	/* prologue: function */
 4664               	/* frame size = 0 */
 4665               	/* stack size = 0 */
 4666               	.L__stack_usage = 0
 4667               		.loc 5 596 36 view .LVU1003
 4668               		.loc 5 596 1 is_stmt 0 view .LVU1004
 4669 0000 8091 0000 		lds r24,rgb_matrix_config+1
 4670               	/* epilogue start */
 4671 0004 0895      		ret
 4672               		.cfi_endproc
 4673               	.LFE159:
 4675               		.section	.text.rgb_matrix_get_sat,"ax",@progbits
 4676               	.global	rgb_matrix_get_sat
 4678               	rgb_matrix_get_sat:
 4679               	.LFB160:
 597:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_sat(void) { return rgb_matrix_config.hsv.s; }
 4680               		.loc 5 597 34 is_stmt 1 view -0
 4681               		.cfi_startproc
 4682               	/* prologue: function */
 4683               	/* frame size = 0 */
 4684               	/* stack size = 0 */
 4685               	.L__stack_usage = 0
 4686               		.loc 5 597 36 view .LVU1006
 4687               		.loc 5 597 1 is_stmt 0 view .LVU1007
 4688 0000 8091 0000 		lds r24,rgb_matrix_config+2
 4689               	/* epilogue start */
 4690 0004 0895      		ret
 4691               		.cfi_endproc
 4692               	.LFE160:
 4694               		.section	.text.rgb_matrix_get_val,"ax",@progbits
 4695               	.global	rgb_matrix_get_val
 4697               	rgb_matrix_get_val:
 4698               	.LFB161:
 598:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_val(void) { return rgb_matrix_config.hsv.v; }
 4699               		.loc 5 598 34 is_stmt 1 view -0
 4700               		.cfi_startproc
 4701               	/* prologue: function */
 4702               	/* frame size = 0 */
 4703               	/* stack size = 0 */
 4704               	.L__stack_usage = 0
 4705               		.loc 5 598 36 view .LVU1009
 4706               		.loc 5 598 1 is_stmt 0 view .LVU1010
 4707 0000 8091 0000 		lds r24,rgb_matrix_config+3
 4708               	/* epilogue start */
 4709 0004 0895      		ret
 4710               		.cfi_endproc
 4711               	.LFE161:
 4713               		.section	.text.rgb_matrix_increase_hue_helper,"ax",@progbits
 4714               	.global	rgb_matrix_increase_hue_helper
 4716               	rgb_matrix_increase_hue_helper:
 4717               	.LVL372:
 4718               	.LFB162:
 599:quantum/rgb_matrix.c **** 
 600:quantum/rgb_matrix.c **** void rgb_matrix_increase_hue_helper(bool write_to_eeprom) { rgb_matrix_sethsv_eeprom_helper(rgb_mat
 4719               		.loc 5 600 59 is_stmt 1 view -0
 4720               		.cfi_startproc
 4721               	/* prologue: function */
 4722               	/* frame size = 0 */
 4723               	/* stack size = 0 */
 4724               	.L__stack_usage = 0
 4725               		.loc 5 600 61 view .LVU1012
 4726 0000 A0E0      		ldi r26,lo8(rgb_matrix_config)
 4727 0002 B0E0      		ldi r27,hi8(rgb_matrix_config)
 4728               		.loc 5 600 114 is_stmt 0 view .LVU1013
 4729 0004 1196      		adiw r26,1
 4730 0006 EC91      		ld r30,X
 4731 0008 1197      		sbiw r26,1
 4732 000a F0E0      		ldi r31,0
 4733               		.loc 5 600 61 view .LVU1014
 4734 000c 282F      		mov r18,r24
 4735 000e 1396      		adiw r26,3
 4736 0010 4C91      		ld r20,X
 4737 0012 1397      		sbiw r26,3
 4738 0014 1296      		adiw r26,2
 4739 0016 6C91      		ld r22,X
 4740 0018 CF01      		movw r24,r30
 4741               	.LVL373:
 4742               		.loc 5 600 61 view .LVU1015
 4743 001a 0896      		adiw r24,8
 4744 001c 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 4745               	.LVL374:
 4746               		.loc 5 600 61 view .LVU1016
 4747               		.cfi_endproc
 4748               	.LFE162:
 4750               		.section	.text.rgb_matrix_increase_hue_noeeprom,"ax",@progbits
 4751               	.global	rgb_matrix_increase_hue_noeeprom
 4753               	rgb_matrix_increase_hue_noeeprom:
 4754               	.LFB163:
 601:quantum/rgb_matrix.c **** void rgb_matrix_increase_hue_noeeprom(void) { rgb_matrix_increase_hue_helper(false); }
 4755               		.loc 5 601 45 is_stmt 1 view -0
 4756               		.cfi_startproc
 4757               	/* prologue: function */
 4758               	/* frame size = 0 */
 4759               	/* stack size = 0 */
 4760               	.L__stack_usage = 0
 4761               		.loc 5 601 47 view .LVU1018
 4762 0000 80E0      		ldi r24,0
 4763 0002 0C94 0000 		jmp rgb_matrix_increase_hue_helper
 4764               	.LVL375:
 4765               		.cfi_endproc
 4766               	.LFE163:
 4768               		.section	.text.rgb_matrix_increase_hue,"ax",@progbits
 4769               	.global	rgb_matrix_increase_hue
 4771               	rgb_matrix_increase_hue:
 4772               	.LFB164:
 602:quantum/rgb_matrix.c **** void rgb_matrix_increase_hue(void) { rgb_matrix_increase_hue_helper(true); }
 4773               		.loc 5 602 36 view -0
 4774               		.cfi_startproc
 4775               	/* prologue: function */
 4776               	/* frame size = 0 */
 4777               	/* stack size = 0 */
 4778               	.L__stack_usage = 0
 4779               		.loc 5 602 38 view .LVU1020
 4780 0000 81E0      		ldi r24,lo8(1)
 4781 0002 0C94 0000 		jmp rgb_matrix_increase_hue_helper
 4782               	.LVL376:
 4783               		.cfi_endproc
 4784               	.LFE164:
 4786               		.section	.text.rgb_matrix_decrease_hue_helper,"ax",@progbits
 4787               	.global	rgb_matrix_decrease_hue_helper
 4789               	rgb_matrix_decrease_hue_helper:
 4790               	.LVL377:
 4791               	.LFB165:
 603:quantum/rgb_matrix.c **** 
 604:quantum/rgb_matrix.c **** void rgb_matrix_decrease_hue_helper(bool write_to_eeprom) { rgb_matrix_sethsv_eeprom_helper(rgb_mat
 4792               		.loc 5 604 59 view -0
 4793               		.cfi_startproc
 4794               	/* prologue: function */
 4795               	/* frame size = 0 */
 4796               	/* stack size = 0 */
 4797               	.L__stack_usage = 0
 4798               		.loc 5 604 61 view .LVU1022
 4799 0000 E0E0      		ldi r30,lo8(rgb_matrix_config)
 4800 0002 F0E0      		ldi r31,hi8(rgb_matrix_config)
 4801               		.loc 5 604 114 is_stmt 0 view .LVU1023
 4802 0004 9181      		ldd r25,Z+1
 4803               		.loc 5 604 61 view .LVU1024
 4804 0006 282F      		mov r18,r24
 4805 0008 4381      		ldd r20,Z+3
 4806 000a 6281      		ldd r22,Z+2
 4807 000c E92F      		mov r30,r25
 4808 000e E850      		subi r30,8
 4809 0010 FF0B      		sbc r31,r31
 4810 0012 CF01      		movw r24,r30
 4811               	.LVL378:
 4812               		.loc 5 604 61 view .LVU1025
 4813 0014 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 4814               	.LVL379:
 4815               		.loc 5 604 61 view .LVU1026
 4816               		.cfi_endproc
 4817               	.LFE165:
 4819               		.section	.text.rgb_matrix_decrease_hue_noeeprom,"ax",@progbits
 4820               	.global	rgb_matrix_decrease_hue_noeeprom
 4822               	rgb_matrix_decrease_hue_noeeprom:
 4823               	.LFB166:
 605:quantum/rgb_matrix.c **** void rgb_matrix_decrease_hue_noeeprom(void) { rgb_matrix_decrease_hue_helper(false); }
 4824               		.loc 5 605 45 is_stmt 1 view -0
 4825               		.cfi_startproc
 4826               	/* prologue: function */
 4827               	/* frame size = 0 */
 4828               	/* stack size = 0 */
 4829               	.L__stack_usage = 0
 4830               		.loc 5 605 47 view .LVU1028
 4831 0000 80E0      		ldi r24,0
 4832 0002 0C94 0000 		jmp rgb_matrix_decrease_hue_helper
 4833               	.LVL380:
 4834               		.cfi_endproc
 4835               	.LFE166:
 4837               		.section	.text.rgb_matrix_decrease_hue,"ax",@progbits
 4838               	.global	rgb_matrix_decrease_hue
 4840               	rgb_matrix_decrease_hue:
 4841               	.LFB167:
 606:quantum/rgb_matrix.c **** void rgb_matrix_decrease_hue(void) { rgb_matrix_decrease_hue_helper(true); }
 4842               		.loc 5 606 36 view -0
 4843               		.cfi_startproc
 4844               	/* prologue: function */
 4845               	/* frame size = 0 */
 4846               	/* stack size = 0 */
 4847               	.L__stack_usage = 0
 4848               		.loc 5 606 38 view .LVU1030
 4849 0000 81E0      		ldi r24,lo8(1)
 4850 0002 0C94 0000 		jmp rgb_matrix_decrease_hue_helper
 4851               	.LVL381:
 4852               		.cfi_endproc
 4853               	.LFE167:
 4855               		.section	.text.rgb_matrix_increase_sat_helper,"ax",@progbits
 4856               	.global	rgb_matrix_increase_sat_helper
 4858               	rgb_matrix_increase_sat_helper:
 4859               	.LVL382:
 4860               	.LFB168:
 607:quantum/rgb_matrix.c **** 
 608:quantum/rgb_matrix.c **** void rgb_matrix_increase_sat_helper(bool write_to_eeprom) { rgb_matrix_sethsv_eeprom_helper(rgb_mat
 4861               		.loc 5 608 59 view -0
 4862               		.cfi_startproc
 4863               	/* prologue: function */
 4864               	/* frame size = 0 */
 4865               	/* stack size = 0 */
 4866               	.L__stack_usage = 0
 4867               		.loc 5 608 61 view .LVU1032
 4868               	.LBB140:
 4869               	.LBI140:
  23:./lib/lib8tion/math8.h **** {
 4870               		.loc 2 23 34 view .LVU1033
 4871               	.LBB141:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 4872               		.loc 2 30 5 view .LVU1034
 4873               	.LBE141:
 4874               	.LBE140:
 4875               		.loc 5 608 61 is_stmt 0 view .LVU1035
 4876 0000 E0E0      		ldi r30,lo8(rgb_matrix_config)
 4877 0002 F0E0      		ldi r31,hi8(rgb_matrix_config)
 4878               	.LBB143:
 4879               	.LBB142:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 4880               		.loc 2 30 5 view .LVU1036
 4881 0004 6281      		ldd r22,Z+2
 4882 0006 20E1      		ldi r18,lo8(16)
 4883               	/* #APP */
 4884               	 ;  30 "./lib/lib8tion/math8.h" 1
 4885 0008 620F      		add r22, r18    
 4886 000a 00F4      		brcc L_4002     
 4887 000c 6FEF      		ldi r22, 0xFF  
 4888               		L_4002: 
 4889               	 ;  0 "" 2
 4890               	.LVL383:
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 4891               		.loc 2 43 5 is_stmt 1 view .LVU1037
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 4892               		.loc 2 43 5 is_stmt 0 view .LVU1038
 4893               	/* #NOAPP */
 4894               	.LBE142:
 4895               	.LBE143:
 4896               		.loc 5 608 61 view .LVU1039
 4897 000e 9181      		ldd r25,Z+1
 4898 0010 282F      		mov r18,r24
 4899 0012 4381      		ldd r20,Z+3
 4900 0014 892F      		mov r24,r25
 4901               	.LVL384:
 4902               		.loc 5 608 61 view .LVU1040
 4903 0016 90E0      		ldi r25,0
 4904 0018 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 4905               	.LVL385:
 4906               		.loc 5 608 61 view .LVU1041
 4907               		.cfi_endproc
 4908               	.LFE168:
 4910               		.section	.text.rgb_matrix_increase_sat_noeeprom,"ax",@progbits
 4911               	.global	rgb_matrix_increase_sat_noeeprom
 4913               	rgb_matrix_increase_sat_noeeprom:
 4914               	.LFB169:
 609:quantum/rgb_matrix.c **** void rgb_matrix_increase_sat_noeeprom(void) { rgb_matrix_increase_sat_helper(false); }
 4915               		.loc 5 609 45 is_stmt 1 view -0
 4916               		.cfi_startproc
 4917               	/* prologue: function */
 4918               	/* frame size = 0 */
 4919               	/* stack size = 0 */
 4920               	.L__stack_usage = 0
 4921               		.loc 5 609 47 view .LVU1043
 4922 0000 80E0      		ldi r24,0
 4923 0002 0C94 0000 		jmp rgb_matrix_increase_sat_helper
 4924               	.LVL386:
 4925               		.cfi_endproc
 4926               	.LFE169:
 4928               		.section	.text.rgb_matrix_increase_sat,"ax",@progbits
 4929               	.global	rgb_matrix_increase_sat
 4931               	rgb_matrix_increase_sat:
 4932               	.LFB170:
 610:quantum/rgb_matrix.c **** void rgb_matrix_increase_sat(void) { rgb_matrix_increase_sat_helper(true); }
 4933               		.loc 5 610 36 view -0
 4934               		.cfi_startproc
 4935               	/* prologue: function */
 4936               	/* frame size = 0 */
 4937               	/* stack size = 0 */
 4938               	.L__stack_usage = 0
 4939               		.loc 5 610 38 view .LVU1045
 4940 0000 81E0      		ldi r24,lo8(1)
 4941 0002 0C94 0000 		jmp rgb_matrix_increase_sat_helper
 4942               	.LVL387:
 4943               		.cfi_endproc
 4944               	.LFE170:
 4946               		.section	.text.rgb_matrix_decrease_sat_helper,"ax",@progbits
 4947               	.global	rgb_matrix_decrease_sat_helper
 4949               	rgb_matrix_decrease_sat_helper:
 4950               	.LVL388:
 4951               	.LFB171:
 611:quantum/rgb_matrix.c **** 
 612:quantum/rgb_matrix.c **** void rgb_matrix_decrease_sat_helper(bool write_to_eeprom) { rgb_matrix_sethsv_eeprom_helper(rgb_mat
 4952               		.loc 5 612 59 view -0
 4953               		.cfi_startproc
 4954               	/* prologue: function */
 4955               	/* frame size = 0 */
 4956               	/* stack size = 0 */
 4957               	.L__stack_usage = 0
 4958               		.loc 5 612 61 view .LVU1047
 4959               	.LBB144:
 4960               	.LBI144:
  88:./lib/lib8tion/math8.h **** {
 4961               		.loc 2 88 34 view .LVU1048
 4962               	.LBB145:
  96:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
 4963               		.loc 2 96 5 view .LVU1049
 4964               	.LBE145:
 4965               	.LBE144:
 4966               		.loc 5 612 61 is_stmt 0 view .LVU1050
 4967 0000 E0E0      		ldi r30,lo8(rgb_matrix_config)
 4968 0002 F0E0      		ldi r31,hi8(rgb_matrix_config)
 4969               	.LBB147:
 4970               	.LBB146:
  96:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
 4971               		.loc 2 96 5 view .LVU1051
 4972 0004 6281      		ldd r22,Z+2
 4973 0006 20E1      		ldi r18,lo8(16)
 4974               	/* #APP */
 4975               	 ;  96 "./lib/lib8tion/math8.h" 1
 4976 0008 621B      		sub r22, r18    
 4977 000a 00F4      		brcc L_4058     
 4978 000c 60E0      		ldi r22, 0x00  
 4979               		L_4058: 
 4980               	 ;  0 "" 2
 4981               	.LVL389:
 110:./lib/lib8tion/math8.h **** #else
 4982               		.loc 2 110 5 is_stmt 1 view .LVU1052
 110:./lib/lib8tion/math8.h **** #else
 4983               		.loc 2 110 5 is_stmt 0 view .LVU1053
 4984               	/* #NOAPP */
 4985               	.LBE146:
 4986               	.LBE147:
 4987               		.loc 5 612 61 view .LVU1054
 4988 000e 9181      		ldd r25,Z+1
 4989 0010 282F      		mov r18,r24
 4990 0012 4381      		ldd r20,Z+3
 4991 0014 892F      		mov r24,r25
 4992               	.LVL390:
 4993               		.loc 5 612 61 view .LVU1055
 4994 0016 90E0      		ldi r25,0
 4995 0018 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 4996               	.LVL391:
 4997               		.loc 5 612 61 view .LVU1056
 4998               		.cfi_endproc
 4999               	.LFE171:
 5001               		.section	.text.rgb_matrix_decrease_sat_noeeprom,"ax",@progbits
 5002               	.global	rgb_matrix_decrease_sat_noeeprom
 5004               	rgb_matrix_decrease_sat_noeeprom:
 5005               	.LFB172:
 613:quantum/rgb_matrix.c **** void rgb_matrix_decrease_sat_noeeprom(void) { rgb_matrix_decrease_sat_helper(false); }
 5006               		.loc 5 613 45 is_stmt 1 view -0
 5007               		.cfi_startproc
 5008               	/* prologue: function */
 5009               	/* frame size = 0 */
 5010               	/* stack size = 0 */
 5011               	.L__stack_usage = 0
 5012               		.loc 5 613 47 view .LVU1058
 5013 0000 80E0      		ldi r24,0
 5014 0002 0C94 0000 		jmp rgb_matrix_decrease_sat_helper
 5015               	.LVL392:
 5016               		.cfi_endproc
 5017               	.LFE172:
 5019               		.section	.text.rgb_matrix_decrease_sat,"ax",@progbits
 5020               	.global	rgb_matrix_decrease_sat
 5022               	rgb_matrix_decrease_sat:
 5023               	.LFB173:
 614:quantum/rgb_matrix.c **** void rgb_matrix_decrease_sat(void) { rgb_matrix_decrease_sat_helper(true); }
 5024               		.loc 5 614 36 view -0
 5025               		.cfi_startproc
 5026               	/* prologue: function */
 5027               	/* frame size = 0 */
 5028               	/* stack size = 0 */
 5029               	.L__stack_usage = 0
 5030               		.loc 5 614 38 view .LVU1060
 5031 0000 81E0      		ldi r24,lo8(1)
 5032 0002 0C94 0000 		jmp rgb_matrix_decrease_sat_helper
 5033               	.LVL393:
 5034               		.cfi_endproc
 5035               	.LFE173:
 5037               		.section	.text.rgb_matrix_increase_val_helper,"ax",@progbits
 5038               	.global	rgb_matrix_increase_val_helper
 5040               	rgb_matrix_increase_val_helper:
 5041               	.LVL394:
 5042               	.LFB174:
 615:quantum/rgb_matrix.c **** 
 616:quantum/rgb_matrix.c **** void rgb_matrix_increase_val_helper(bool write_to_eeprom) { rgb_matrix_sethsv_eeprom_helper(rgb_mat
 5043               		.loc 5 616 59 view -0
 5044               		.cfi_startproc
 5045               	/* prologue: function */
 5046               	/* frame size = 0 */
 5047               	/* stack size = 0 */
 5048               	.L__stack_usage = 0
 5049               		.loc 5 616 61 view .LVU1062
 5050               	.LBB148:
 5051               	.LBI148:
  23:./lib/lib8tion/math8.h **** {
 5052               		.loc 2 23 34 view .LVU1063
 5053               	.LBB149:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 5054               		.loc 2 30 5 view .LVU1064
 5055               	.LBE149:
 5056               	.LBE148:
 5057               		.loc 5 616 61 is_stmt 0 view .LVU1065
 5058 0000 E0E0      		ldi r30,lo8(rgb_matrix_config)
 5059 0002 F0E0      		ldi r31,hi8(rgb_matrix_config)
 5060               	.LBB151:
 5061               	.LBB150:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 5062               		.loc 2 30 5 view .LVU1066
 5063 0004 4381      		ldd r20,Z+3
 5064 0006 20E1      		ldi r18,lo8(16)
 5065               	/* #APP */
 5066               	 ;  30 "./lib/lib8tion/math8.h" 1
 5067 0008 420F      		add r20, r18    
 5068 000a 00F4      		brcc L_4114     
 5069 000c 4FEF      		ldi r20, 0xFF  
 5070               		L_4114: 
 5071               	 ;  0 "" 2
 5072               	.LVL395:
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 5073               		.loc 2 43 5 is_stmt 1 view .LVU1067
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 5074               		.loc 2 43 5 is_stmt 0 view .LVU1068
 5075               	/* #NOAPP */
 5076               	.LBE150:
 5077               	.LBE151:
 5078               		.loc 5 616 61 view .LVU1069
 5079 000e 9181      		ldd r25,Z+1
 5080 0010 282F      		mov r18,r24
 5081 0012 6281      		ldd r22,Z+2
 5082 0014 892F      		mov r24,r25
 5083               	.LVL396:
 5084               		.loc 5 616 61 view .LVU1070
 5085 0016 90E0      		ldi r25,0
 5086 0018 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 5087               	.LVL397:
 5088               		.loc 5 616 61 view .LVU1071
 5089               		.cfi_endproc
 5090               	.LFE174:
 5092               		.section	.text.rgb_matrix_increase_val_noeeprom,"ax",@progbits
 5093               	.global	rgb_matrix_increase_val_noeeprom
 5095               	rgb_matrix_increase_val_noeeprom:
 5096               	.LFB175:
 617:quantum/rgb_matrix.c **** void rgb_matrix_increase_val_noeeprom(void) { rgb_matrix_increase_val_helper(false); }
 5097               		.loc 5 617 45 is_stmt 1 view -0
 5098               		.cfi_startproc
 5099               	/* prologue: function */
 5100               	/* frame size = 0 */
 5101               	/* stack size = 0 */
 5102               	.L__stack_usage = 0
 5103               		.loc 5 617 47 view .LVU1073
 5104 0000 80E0      		ldi r24,0
 5105 0002 0C94 0000 		jmp rgb_matrix_increase_val_helper
 5106               	.LVL398:
 5107               		.cfi_endproc
 5108               	.LFE175:
 5110               		.section	.text.rgb_matrix_increase_val,"ax",@progbits
 5111               	.global	rgb_matrix_increase_val
 5113               	rgb_matrix_increase_val:
 5114               	.LFB176:
 618:quantum/rgb_matrix.c **** void rgb_matrix_increase_val(void) { rgb_matrix_increase_val_helper(true); }
 5115               		.loc 5 618 36 view -0
 5116               		.cfi_startproc
 5117               	/* prologue: function */
 5118               	/* frame size = 0 */
 5119               	/* stack size = 0 */
 5120               	.L__stack_usage = 0
 5121               		.loc 5 618 38 view .LVU1075
 5122 0000 81E0      		ldi r24,lo8(1)
 5123 0002 0C94 0000 		jmp rgb_matrix_increase_val_helper
 5124               	.LVL399:
 5125               		.cfi_endproc
 5126               	.LFE176:
 5128               		.section	.text.rgb_matrix_decrease_val_helper,"ax",@progbits
 5129               	.global	rgb_matrix_decrease_val_helper
 5131               	rgb_matrix_decrease_val_helper:
 5132               	.LVL400:
 5133               	.LFB177:
 619:quantum/rgb_matrix.c **** 
 620:quantum/rgb_matrix.c **** void rgb_matrix_decrease_val_helper(bool write_to_eeprom) { rgb_matrix_sethsv_eeprom_helper(rgb_mat
 5134               		.loc 5 620 59 view -0
 5135               		.cfi_startproc
 5136               	/* prologue: function */
 5137               	/* frame size = 0 */
 5138               	/* stack size = 0 */
 5139               	.L__stack_usage = 0
 5140               		.loc 5 620 61 view .LVU1077
 5141               	.LBB152:
 5142               	.LBI152:
  88:./lib/lib8tion/math8.h **** {
 5143               		.loc 2 88 34 view .LVU1078
 5144               	.LBB153:
  96:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
 5145               		.loc 2 96 5 view .LVU1079
 5146               	.LBE153:
 5147               	.LBE152:
 5148               		.loc 5 620 61 is_stmt 0 view .LVU1080
 5149 0000 E0E0      		ldi r30,lo8(rgb_matrix_config)
 5150 0002 F0E0      		ldi r31,hi8(rgb_matrix_config)
 5151               	.LBB155:
 5152               	.LBB154:
  96:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
 5153               		.loc 2 96 5 view .LVU1081
 5154 0004 4381      		ldd r20,Z+3
 5155 0006 20E1      		ldi r18,lo8(16)
 5156               	/* #APP */
 5157               	 ;  96 "./lib/lib8tion/math8.h" 1
 5158 0008 421B      		sub r20, r18    
 5159 000a 00F4      		brcc L_4170     
 5160 000c 40E0      		ldi r20, 0x00  
 5161               		L_4170: 
 5162               	 ;  0 "" 2
 5163               	.LVL401:
 110:./lib/lib8tion/math8.h **** #else
 5164               		.loc 2 110 5 is_stmt 1 view .LVU1082
 110:./lib/lib8tion/math8.h **** #else
 5165               		.loc 2 110 5 is_stmt 0 view .LVU1083
 5166               	/* #NOAPP */
 5167               	.LBE154:
 5168               	.LBE155:
 5169               		.loc 5 620 61 view .LVU1084
 5170 000e 9181      		ldd r25,Z+1
 5171 0010 282F      		mov r18,r24
 5172 0012 6281      		ldd r22,Z+2
 5173 0014 892F      		mov r24,r25
 5174               	.LVL402:
 5175               		.loc 5 620 61 view .LVU1085
 5176 0016 90E0      		ldi r25,0
 5177 0018 0C94 0000 		jmp rgb_matrix_sethsv_eeprom_helper
 5178               	.LVL403:
 5179               		.loc 5 620 61 view .LVU1086
 5180               		.cfi_endproc
 5181               	.LFE177:
 5183               		.section	.text.rgb_matrix_decrease_val_noeeprom,"ax",@progbits
 5184               	.global	rgb_matrix_decrease_val_noeeprom
 5186               	rgb_matrix_decrease_val_noeeprom:
 5187               	.LFB178:
 621:quantum/rgb_matrix.c **** void rgb_matrix_decrease_val_noeeprom(void) { rgb_matrix_decrease_val_helper(false); }
 5188               		.loc 5 621 45 is_stmt 1 view -0
 5189               		.cfi_startproc
 5190               	/* prologue: function */
 5191               	/* frame size = 0 */
 5192               	/* stack size = 0 */
 5193               	.L__stack_usage = 0
 5194               		.loc 5 621 47 view .LVU1088
 5195 0000 80E0      		ldi r24,0
 5196 0002 0C94 0000 		jmp rgb_matrix_decrease_val_helper
 5197               	.LVL404:
 5198               		.cfi_endproc
 5199               	.LFE178:
 5201               		.section	.text.rgb_matrix_decrease_val,"ax",@progbits
 5202               	.global	rgb_matrix_decrease_val
 5204               	rgb_matrix_decrease_val:
 5205               	.LFB179:
 622:quantum/rgb_matrix.c **** void rgb_matrix_decrease_val(void) { rgb_matrix_decrease_val_helper(true); }
 5206               		.loc 5 622 36 view -0
 5207               		.cfi_startproc
 5208               	/* prologue: function */
 5209               	/* frame size = 0 */
 5210               	/* stack size = 0 */
 5211               	.L__stack_usage = 0
 5212               		.loc 5 622 38 view .LVU1090
 5213 0000 81E0      		ldi r24,lo8(1)
 5214 0002 0C94 0000 		jmp rgb_matrix_decrease_val_helper
 5215               	.LVL405:
 5216               		.cfi_endproc
 5217               	.LFE179:
 5219               		.section	.text.rgb_matrix_set_speed_eeprom_helper,"ax",@progbits
 5220               	.global	rgb_matrix_set_speed_eeprom_helper
 5222               	rgb_matrix_set_speed_eeprom_helper:
 5223               	.LVL406:
 5224               	.LFB180:
 623:quantum/rgb_matrix.c **** 
 624:quantum/rgb_matrix.c **** void rgb_matrix_set_speed_eeprom_helper(uint8_t speed, bool write_to_eeprom) {
 5225               		.loc 5 624 78 view -0
 5226               		.cfi_startproc
 5227               	/* prologue: function */
 5228               	/* frame size = 0 */
 5229               	/* stack size = 0 */
 5230               	.L__stack_usage = 0
 625:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = speed;
 5231               		.loc 5 625 5 view .LVU1092
 5232               		.loc 5 625 29 is_stmt 0 view .LVU1093
 5233 0000 8093 0000 		sts rgb_matrix_config+4,r24
 626:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5234               		.loc 5 626 5 is_stmt 1 view .LVU1094
 5235               		.loc 5 626 8 is_stmt 0 view .LVU1095
 5236 0004 6111      		cpse r22,__zero_reg__
 627:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5237               		.loc 5 627 9 is_stmt 1 view .LVU1096
 5238 0006 0C94 0000 		jmp eeconfig_update_rgb_matrix
 5239               	.LVL407:
 5240               	.L243:
 5241               	/* epilogue start */
 628:quantum/rgb_matrix.c ****     }
 629:quantum/rgb_matrix.c ****     dprintf("rgb matrix set speed [%s]: %u\n", (write_to_eeprom) ? "EEPROM" : "NOEEPROM", rgb_matri
 630:quantum/rgb_matrix.c **** }
 5242               		.loc 5 630 1 is_stmt 0 view .LVU1097
 5243 000a 0895      		ret
 5244               		.cfi_endproc
 5245               	.LFE180:
 5247               		.section	.text.rgb_matrix_set_speed_noeeprom,"ax",@progbits
 5248               	.global	rgb_matrix_set_speed_noeeprom
 5250               	rgb_matrix_set_speed_noeeprom:
 5251               	.LVL408:
 5252               	.LFB181:
 631:quantum/rgb_matrix.c **** void rgb_matrix_set_speed_noeeprom(uint8_t speed) { rgb_matrix_set_speed_eeprom_helper(speed, false
 5253               		.loc 5 631 51 is_stmt 1 view -0
 5254               		.cfi_startproc
 5255               	/* prologue: function */
 5256               	/* frame size = 0 */
 5257               	/* stack size = 0 */
 5258               	.L__stack_usage = 0
 5259               		.loc 5 631 53 view .LVU1099
 5260               	.LBB158:
 5261               	.LBI158:
 624:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = speed;
 5262               		.loc 5 624 6 view .LVU1100
 5263               	.LBB159:
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5264               		.loc 5 625 5 view .LVU1101
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5265               		.loc 5 625 29 is_stmt 0 view .LVU1102
 5266 0000 8093 0000 		sts rgb_matrix_config+4,r24
 626:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5267               		.loc 5 626 5 is_stmt 1 view .LVU1103
 629:quantum/rgb_matrix.c **** }
 5268               		.loc 5 629 115 view .LVU1104
 5269               	.LVL409:
 5270               	/* epilogue start */
 629:quantum/rgb_matrix.c **** }
 5271               		.loc 5 629 115 is_stmt 0 view .LVU1105
 5272               	.LBE159:
 5273               	.LBE158:
 5274               		.loc 5 631 1 view .LVU1106
 5275 0004 0895      		ret
 5276               		.cfi_endproc
 5277               	.LFE181:
 5279               		.section	.text.rgb_matrix_set_speed,"ax",@progbits
 5280               	.global	rgb_matrix_set_speed
 5282               	rgb_matrix_set_speed:
 5283               	.LVL410:
 5284               	.LFB182:
 632:quantum/rgb_matrix.c **** void rgb_matrix_set_speed(uint8_t speed) { rgb_matrix_set_speed_eeprom_helper(speed, true); }
 5285               		.loc 5 632 42 is_stmt 1 view -0
 5286               		.cfi_startproc
 5287               	/* prologue: function */
 5288               	/* frame size = 0 */
 5289               	/* stack size = 0 */
 5290               	.L__stack_usage = 0
 5291               		.loc 5 632 44 view .LVU1108
 5292               	.LBB162:
 5293               	.LBI162:
 624:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = speed;
 5294               		.loc 5 624 6 view .LVU1109
 5295               	.LBB163:
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5296               		.loc 5 625 5 view .LVU1110
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5297               		.loc 5 625 29 is_stmt 0 view .LVU1111
 5298 0000 8093 0000 		sts rgb_matrix_config+4,r24
 626:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5299               		.loc 5 626 5 is_stmt 1 view .LVU1112
 627:quantum/rgb_matrix.c ****     }
 5300               		.loc 5 627 9 view .LVU1113
 5301 0004 0C94 0000 		jmp eeconfig_update_rgb_matrix
 5302               	.LVL411:
 627:quantum/rgb_matrix.c ****     }
 5303               		.loc 5 627 9 is_stmt 0 view .LVU1114
 5304               	.LBE163:
 5305               	.LBE162:
 5306               		.cfi_endproc
 5307               	.LFE182:
 5309               		.section	.text.rgb_matrix_get_speed,"ax",@progbits
 5310               	.global	rgb_matrix_get_speed
 5312               	rgb_matrix_get_speed:
 5313               	.LFB183:
 633:quantum/rgb_matrix.c **** 
 634:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_speed(void) { return rgb_matrix_config.speed; }
 5314               		.loc 5 634 36 is_stmt 1 view -0
 5315               		.cfi_startproc
 5316               	/* prologue: function */
 5317               	/* frame size = 0 */
 5318               	/* stack size = 0 */
 5319               	.L__stack_usage = 0
 5320               		.loc 5 634 38 view .LVU1116
 5321               		.loc 5 634 1 is_stmt 0 view .LVU1117
 5322 0000 8091 0000 		lds r24,rgb_matrix_config+4
 5323               	/* epilogue start */
 5324 0004 0895      		ret
 5325               		.cfi_endproc
 5326               	.LFE183:
 5328               		.section	.text.rgb_matrix_increase_speed_helper,"ax",@progbits
 5329               	.global	rgb_matrix_increase_speed_helper
 5331               	rgb_matrix_increase_speed_helper:
 5332               	.LVL412:
 5333               	.LFB184:
 635:quantum/rgb_matrix.c **** 
 636:quantum/rgb_matrix.c **** void rgb_matrix_increase_speed_helper(bool write_to_eeprom) { rgb_matrix_set_speed_eeprom_helper(qa
 5334               		.loc 5 636 61 is_stmt 1 view -0
 5335               		.cfi_startproc
 5336               	/* prologue: function */
 5337               	/* frame size = 0 */
 5338               	/* stack size = 0 */
 5339               	.L__stack_usage = 0
 5340               		.loc 5 636 63 view .LVU1119
 5341               	.LBB168:
 5342               	.LBI168:
  23:./lib/lib8tion/math8.h **** {
 5343               		.loc 2 23 34 view .LVU1120
 5344               	.LBB169:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 5345               		.loc 2 30 5 view .LVU1121
 5346 0000 2091 0000 		lds r18,rgb_matrix_config+4
 5347 0004 30E1      		ldi r19,lo8(16)
 5348               	/* #APP */
 5349               	 ;  30 "./lib/lib8tion/math8.h" 1
 5350 0006 230F      		add r18, r19    
 5351 0008 00F4      		brcc L_4308     
 5352 000a 2FEF      		ldi r18, 0xFF  
 5353               		L_4308: 
 5354               	 ;  0 "" 2
 5355               	.LVL413:
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 5356               		.loc 2 43 5 view .LVU1122
  43:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
 5357               		.loc 2 43 5 is_stmt 0 view .LVU1123
 5358               	/* #NOAPP */
 5359               	.LBE169:
 5360               	.LBE168:
 5361               	.LBB170:
 5362               	.LBI170:
 624:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = speed;
 5363               		.loc 5 624 6 is_stmt 1 view .LVU1124
 5364               	.LBB171:
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5365               		.loc 5 625 5 view .LVU1125
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5366               		.loc 5 625 29 is_stmt 0 view .LVU1126
 5367 000c 2093 0000 		sts rgb_matrix_config+4,r18
 626:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5368               		.loc 5 626 5 is_stmt 1 view .LVU1127
 626:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5369               		.loc 5 626 8 is_stmt 0 view .LVU1128
 5370 0010 8111      		cpse r24,__zero_reg__
 627:quantum/rgb_matrix.c ****     }
 5371               		.loc 5 627 9 is_stmt 1 view .LVU1129
 5372 0012 0C94 0000 		jmp eeconfig_update_rgb_matrix
 5373               	.LVL414:
 5374               	.L248:
 5375               	/* epilogue start */
 627:quantum/rgb_matrix.c ****     }
 5376               		.loc 5 627 9 is_stmt 0 view .LVU1130
 5377               	.LBE171:
 5378               	.LBE170:
 5379               		.loc 5 636 1 view .LVU1131
 5380 0016 0895      		ret
 5381               		.cfi_endproc
 5382               	.LFE184:
 5384               		.section	.text.rgb_matrix_increase_speed_noeeprom,"ax",@progbits
 5385               	.global	rgb_matrix_increase_speed_noeeprom
 5387               	rgb_matrix_increase_speed_noeeprom:
 5388               	.LFB185:
 637:quantum/rgb_matrix.c **** void rgb_matrix_increase_speed_noeeprom(void) { rgb_matrix_increase_speed_helper(false); }
 5389               		.loc 5 637 47 is_stmt 1 view -0
 5390               		.cfi_startproc
 5391               	/* prologue: function */
 5392               	/* frame size = 0 */
 5393               	/* stack size = 0 */
 5394               	.L__stack_usage = 0
 5395               		.loc 5 637 49 view .LVU1133
 5396 0000 80E0      		ldi r24,0
 5397 0002 0C94 0000 		jmp rgb_matrix_increase_speed_helper
 5398               	.LVL415:
 5399               		.cfi_endproc
 5400               	.LFE185:
 5402               		.section	.text.rgb_matrix_increase_speed,"ax",@progbits
 5403               	.global	rgb_matrix_increase_speed
 5405               	rgb_matrix_increase_speed:
 5406               	.LFB186:
 638:quantum/rgb_matrix.c **** void rgb_matrix_increase_speed(void) { rgb_matrix_increase_speed_helper(true); }
 5407               		.loc 5 638 38 view -0
 5408               		.cfi_startproc
 5409               	/* prologue: function */
 5410               	/* frame size = 0 */
 5411               	/* stack size = 0 */
 5412               	.L__stack_usage = 0
 5413               		.loc 5 638 40 view .LVU1135
 5414 0000 81E0      		ldi r24,lo8(1)
 5415 0002 0C94 0000 		jmp rgb_matrix_increase_speed_helper
 5416               	.LVL416:
 5417               		.cfi_endproc
 5418               	.LFE186:
 5420               		.section	.text.rgb_matrix_decrease_speed_helper,"ax",@progbits
 5421               	.global	rgb_matrix_decrease_speed_helper
 5423               	rgb_matrix_decrease_speed_helper:
 5424               	.LVL417:
 5425               	.LFB187:
 639:quantum/rgb_matrix.c **** 
 640:quantum/rgb_matrix.c **** void rgb_matrix_decrease_speed_helper(bool write_to_eeprom) { rgb_matrix_set_speed_eeprom_helper(qs
 5426               		.loc 5 640 61 view -0
 5427               		.cfi_startproc
 5428               	/* prologue: function */
 5429               	/* frame size = 0 */
 5430               	/* stack size = 0 */
 5431               	.L__stack_usage = 0
 5432               		.loc 5 640 63 view .LVU1137
 5433               	.LBB176:
 5434               	.LBI176:
  88:./lib/lib8tion/math8.h **** {
 5435               		.loc 2 88 34 view .LVU1138
 5436               	.LBB177:
  96:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
 5437               		.loc 2 96 5 view .LVU1139
 5438 0000 2091 0000 		lds r18,rgb_matrix_config+4
 5439 0004 30E1      		ldi r19,lo8(16)
 5440               	/* #APP */
 5441               	 ;  96 "./lib/lib8tion/math8.h" 1
 5442 0006 231B      		sub r18, r19    
 5443 0008 00F4      		brcc L_4375     
 5444 000a 20E0      		ldi r18, 0x00  
 5445               		L_4375: 
 5446               	 ;  0 "" 2
 5447               	.LVL418:
 110:./lib/lib8tion/math8.h **** #else
 5448               		.loc 2 110 5 view .LVU1140
 110:./lib/lib8tion/math8.h **** #else
 5449               		.loc 2 110 5 is_stmt 0 view .LVU1141
 5450               	/* #NOAPP */
 5451               	.LBE177:
 5452               	.LBE176:
 5453               	.LBB178:
 5454               	.LBI178:
 624:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = speed;
 5455               		.loc 5 624 6 is_stmt 1 view .LVU1142
 5456               	.LBB179:
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5457               		.loc 5 625 5 view .LVU1143
 625:quantum/rgb_matrix.c ****     if (write_to_eeprom) {
 5458               		.loc 5 625 29 is_stmt 0 view .LVU1144
 5459 000c 2093 0000 		sts rgb_matrix_config+4,r18
 626:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5460               		.loc 5 626 5 is_stmt 1 view .LVU1145
 626:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix();
 5461               		.loc 5 626 8 is_stmt 0 view .LVU1146
 5462 0010 8111      		cpse r24,__zero_reg__
 627:quantum/rgb_matrix.c ****     }
 5463               		.loc 5 627 9 is_stmt 1 view .LVU1147
 5464 0012 0C94 0000 		jmp eeconfig_update_rgb_matrix
 5465               	.LVL419:
 5466               	.L252:
 5467               	/* epilogue start */
 627:quantum/rgb_matrix.c ****     }
 5468               		.loc 5 627 9 is_stmt 0 view .LVU1148
 5469               	.LBE179:
 5470               	.LBE178:
 5471               		.loc 5 640 1 view .LVU1149
 5472 0016 0895      		ret
 5473               		.cfi_endproc
 5474               	.LFE187:
 5476               		.section	.text.rgb_matrix_decrease_speed_noeeprom,"ax",@progbits
 5477               	.global	rgb_matrix_decrease_speed_noeeprom
 5479               	rgb_matrix_decrease_speed_noeeprom:
 5480               	.LFB188:
 641:quantum/rgb_matrix.c **** void rgb_matrix_decrease_speed_noeeprom(void) { rgb_matrix_decrease_speed_helper(false); }
 5481               		.loc 5 641 47 is_stmt 1 view -0
 5482               		.cfi_startproc
 5483               	/* prologue: function */
 5484               	/* frame size = 0 */
 5485               	/* stack size = 0 */
 5486               	.L__stack_usage = 0
 5487               		.loc 5 641 49 view .LVU1151
 5488 0000 80E0      		ldi r24,0
 5489 0002 0C94 0000 		jmp rgb_matrix_decrease_speed_helper
 5490               	.LVL420:
 5491               		.cfi_endproc
 5492               	.LFE188:
 5494               		.section	.text.rgb_matrix_decrease_speed,"ax",@progbits
 5495               	.global	rgb_matrix_decrease_speed
 5497               	rgb_matrix_decrease_speed:
 5498               	.LFB189:
 642:quantum/rgb_matrix.c **** void rgb_matrix_decrease_speed(void) { rgb_matrix_decrease_speed_helper(true); }
 5499               		.loc 5 642 38 view -0
 5500               		.cfi_startproc
 5501               	/* prologue: function */
 5502               	/* frame size = 0 */
 5503               	/* stack size = 0 */
 5504               	.L__stack_usage = 0
 5505               		.loc 5 642 40 view .LVU1153
 5506 0000 81E0      		ldi r24,lo8(1)
 5507 0002 0C94 0000 		jmp rgb_matrix_decrease_speed_helper
 5508               	.LVL421:
 5509               		.cfi_endproc
 5510               	.LFE189:
 5512               		.section	.text.rgb_matrix_get_flags,"ax",@progbits
 5513               	.global	rgb_matrix_get_flags
 5515               	rgb_matrix_get_flags:
 5516               	.LFB190:
 643:quantum/rgb_matrix.c **** 
 644:quantum/rgb_matrix.c **** led_flags_t rgb_matrix_get_flags(void) { return rgb_matrix_config.flags; }
 5517               		.loc 5 644 40 view -0
 5518               		.cfi_startproc
 5519               	/* prologue: function */
 5520               	/* frame size = 0 */
 5521               	/* stack size = 0 */
 5522               	.L__stack_usage = 0
 5523               		.loc 5 644 42 view .LVU1155
 5524               		.loc 5 644 1 is_stmt 0 view .LVU1156
 5525 0000 8091 0000 		lds r24,rgb_matrix_config+5
 5526               	/* epilogue start */
 5527 0004 0895      		ret
 5528               		.cfi_endproc
 5529               	.LFE190:
 5531               		.section	.text.rgb_matrix_set_flags,"ax",@progbits
 5532               	.global	rgb_matrix_set_flags
 5534               	rgb_matrix_set_flags:
 5535               	.LVL422:
 5536               	.LFB191:
 645:quantum/rgb_matrix.c **** 
 646:quantum/rgb_matrix.c **** void rgb_matrix_set_flags(led_flags_t flags) { rgb_matrix_config.flags = flags; }
 5537               		.loc 5 646 46 is_stmt 1 view -0
 5538               		.cfi_startproc
 5539               	/* prologue: function */
 5540               	/* frame size = 0 */
 5541               	/* stack size = 0 */
 5542               	.L__stack_usage = 0
 5543               		.loc 5 646 48 view .LVU1158
 5544               		.loc 5 646 72 is_stmt 0 view .LVU1159
 5545 0000 8093 0000 		sts rgb_matrix_config+5,r24
 5546               	/* epilogue start */
 5547               		.loc 5 646 1 view .LVU1160
 5548 0004 0895      		ret
 5549               		.cfi_endproc
 5550               	.LFE191:
 5552               		.section	.bss.last_hit_buffer,"aw",@nobits
 5555               	last_hit_buffer:
 5556 0000 0000 0000 		.zero	41
 5556      0000 0000 
 5556      0000 0000 
 5556      0000 0000 
 5556      0000 0000 
 5557               		.section	.bss.rgb_timer_buffer,"aw",@nobits
 5560               	rgb_timer_buffer:
 5561 0000 0000 0000 		.zero	4
 5562               		.section	.data.rgb_task_state,"aw"
 5565               	rgb_task_state:
 5566 0000 03        		.byte	3
 5567               		.section	.data.rgb_effect_params,"aw"
 5570               	rgb_effect_params:
 5571 0000 00        		.byte	0
 5572 0001 FF        		.byte	-1
 5573 0002 00        		.byte	0
 5574               		.section	.data.rgb_last_effect,"aw"
 5577               	rgb_last_effect:
 5578 0000 FF        		.byte	-1
 5579               		.section	.data.rgb_last_enable,"aw"
 5582               	rgb_last_enable:
 5583 0000 FF        		.byte	-1
 5584               		.section	.bss.suspend_state,"aw",@nobits
 5587               	suspend_state:
 5588 0000 00        		.zero	1
 5589               		.comm	g_last_hit_tracker,41,1
 5590               		.comm	g_rgb_timer,4,1
 5591               		.comm	rgb_matrix_config,6,1
 5592               	.global	k_rgb_matrix_center
 5593               		.section	.rodata.k_rgb_matrix_center,"a"
 5596               	k_rgb_matrix_center:
 5597 0000 70        		.byte	112
 5598 0001 20        		.byte	32
 5599               		.section	.rodata.b_m16_interleave,"a"
 5602               	b_m16_interleave:
 5603 0000 00        		.byte	0
 5604 0001 31        		.byte	49
 5605 0002 31        		.byte	49
 5606 0003 29        		.byte	41
 5607 0004 5A        		.byte	90
 5608 0005 1B        		.byte	27
 5609 0006 75        		.byte	117
 5610 0007 0A        		.byte	10
 5611               		.text
 5612               	.Letext0:
 5613               		.file 14 "c:\\qmk_msys\\mingw64\\avr\\include\\stdint.h"
 5614               		.file 15 "quantum/color.h"
 5615               		.file 16 "quantum/rgb_matrix_types.h"
 5616               		.file 17 "c:\\qmk_msys\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 5617               		.file 18 "tmk_core/common/report.h"
 5618               		.file 19 "tmk_core/common/action.h"
 5619               		.file 20 "tmk_core/common/host.h"
 5620               		.file 21 "tmk_core/common/debug.h"
 5621               		.file 22 "quantum/keycode_config.h"
 5622               		.file 23 "tmk_core/common/timer.h"
 5623               		.file 24 "quantum/sequencer/sequencer.h"
 5624               		.file 25 "quantum/keymap.h"
 5625               		.file 26 "tmk_core/common/action_layer.h"
 5626               		.file 27 "tmk_core/common/action_util.h"
 5627               		.file 28 "quantum/send_string.h"
 5628               		.file 29 "c:\\qmk_msys\\mingw64\\avr\\include\\stdlib.h"
 5629               		.file 30 "quantum/process_keycode/process_tap_dance.h"
 5630               		.file 31 "quantum/rgb_matrix.h"
 5631               		.file 32 "./lib/lib8tion/lib8tion.h"
 5632               		.file 33 "./lib/lib8tion/random8.h"
 5633               		.file 34 "tmk_core/common/eeconfig.h"
 5634               		.file 35 "tmk_core/common/keyboard.h"
 5635               		.file 36 "c:\\qmk_msys\\mingw64\\avr\\include\\avr\\eeprom.h"
 5636               		.file 37 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rgb_matrix.c
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4      *ABS*:000000000000003f __SREG__
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:12     .text.scale16by8:0000000000000000 scale16by8
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:50     .text.sqrt16:0000000000000000 sqrt16
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:167    .text.sin8_avr:0000000000000000 sin8_avr
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5602   .rodata.b_m16_interleave:0000000000000000 b_m16_interleave
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:272    .text.SOLID_SPLASH_math:0000000000000000 SOLID_SPLASH_math
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:333    .text.SOLID_SPLASH_math:0000000000000022 L_273
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:360    .text.rgb_matrix_hsv_to_rgb:0000000000000000 rgb_matrix_hsv_to_rgb
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:381    .text.eeconfig_read_rgb_matrix:0000000000000000 eeconfig_read_rgb_matrix
                            *COM*:0000000000000006 rgb_matrix_config
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:404    .text.eeconfig_update_rgb_matrix:0000000000000000 eeconfig_update_rgb_matrix
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:432    .text.eeconfig_update_rgb_matrix_default:0000000000000000 eeconfig_update_rgb_matrix_default
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:473    .text.eeconfig_debug_rgb_matrix:0000000000000000 eeconfig_debug_rgb_matrix
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:498    .text.rgb_matrix_map_row_column_to_led_kb:0000000000000000 rgb_matrix_map_row_column_to_led_kb
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:520    .text.rgb_matrix_map_row_column_to_led:0000000000000000 rgb_matrix_map_row_column_to_led
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:601    .text.rgb_matrix_update_pwm_buffers:0000000000000000 rgb_matrix_update_pwm_buffers
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:620    .text.rgb_matrix_set_color:0000000000000000 rgb_matrix_set_color
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:641    .text.effect_runner_dx_dy_dist:0000000000000000 effect_runner_dx_dy_dist
                            *COM*:0000000000000004 g_rgb_timer
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:910    .text.effect_runner_dx_dy:0000000000000000 effect_runner_dx_dy
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:1128   .text.effect_runner_i:0000000000000000 effect_runner_i
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:1305   .text.effect_runner_sin_cos_i:0000000000000000 effect_runner_sin_cos_i
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:1536   .text.effect_runner_reactive:0000000000000000 effect_runner_reactive
                            *COM*:0000000000000029 g_last_hit_tracker
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:1796   .text.effect_runner_reactive_splash:0000000000000000 effect_runner_reactive_splash
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2196   .text.SOLID_SPLASH:0000000000000000 SOLID_SPLASH
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2218   .text.SOLID_SPLASH:000000000000000c L_1936
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2242   .text.SOLID_COLOR:0000000000000000 SOLID_COLOR
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2400   .text.rgb_matrix_set_color_all:0000000000000000 rgb_matrix_set_color_all
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2421   .text.process_rgb_matrix:0000000000000000 process_rgb_matrix
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5555   .bss.last_hit_buffer:0000000000000000 last_hit_buffer
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2692   .text.rgb_matrix_test:0000000000000000 rgb_matrix_test
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2766   .text.rgb_matrix_indicators_kb:0000000000000000 rgb_matrix_indicators_kb
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2766   .text.rgb_matrix_indicators_kb:0000000000000000 rgb_matrix_indicators_kb.localalias.5
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2785   .text.rgb_matrix_indicators_user:0000000000000000 rgb_matrix_indicators_user
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2800   .text.rgb_matrix_indicators:0000000000000000 rgb_matrix_indicators
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2820   .text.rgb_matrix_indicators_advanced_kb:0000000000000000 rgb_matrix_indicators_advanced_kb
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2820   .text.rgb_matrix_indicators_advanced_kb:0000000000000000 rgb_matrix_indicators_advanced_kb.localalias.6
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2840   .text.rgb_matrix_indicators_advanced_user:0000000000000000 rgb_matrix_indicators_advanced_user
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2855   .text.rgb_matrix_indicators_advanced:0000000000000000 rgb_matrix_indicators_advanced
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:2987   .text.rgb_matrix_task:0000000000000000 rgb_matrix_task
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5560   .bss.rgb_timer_buffer:0000000000000000 rgb_timer_buffer
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5587   .bss.suspend_state:0000000000000000 suspend_state
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5565   .data.rgb_task_state:0000000000000000 rgb_task_state
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5570   .data.rgb_effect_params:0000000000000000 rgb_effect_params
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5577   .data.rgb_last_effect:0000000000000000 rgb_last_effect
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5582   .data.rgb_last_enable:0000000000000000 rgb_last_enable
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:3843   .text.rgb_matrix_init:0000000000000000 rgb_matrix_init
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4026   .text.rgb_matrix_set_suspend_state:0000000000000000 rgb_matrix_set_suspend_state
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4069   .text.rgb_matrix_get_suspend_state:0000000000000000 rgb_matrix_get_suspend_state
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4088   .text.rgb_matrix_toggle_eeprom_helper:0000000000000000 rgb_matrix_toggle_eeprom_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4122   .text.rgb_matrix_toggle_noeeprom:0000000000000000 rgb_matrix_toggle_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4140   .text.rgb_matrix_toggle:0000000000000000 rgb_matrix_toggle
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4158   .text.rgb_matrix_enable_noeeprom:0000000000000000 rgb_matrix_enable_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4191   .text.rgb_matrix_enable:0000000000000000 rgb_matrix_enable
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4211   .text.rgb_matrix_disable_noeeprom:0000000000000000 rgb_matrix_disable_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4243   .text.rgb_matrix_disable:0000000000000000 rgb_matrix_disable
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4263   .text.rgb_matrix_is_enabled:0000000000000000 rgb_matrix_is_enabled
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4284   .text.rgb_matrix_mode_eeprom_helper:0000000000000000 rgb_matrix_mode_eeprom_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4348   .text.rgb_matrix_mode_noeeprom:0000000000000000 rgb_matrix_mode_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4368   .text.rgb_matrix_mode:0000000000000000 rgb_matrix_mode
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4388   .text.rgb_matrix_get_mode:0000000000000000 rgb_matrix_get_mode
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4410   .text.rgb_matrix_step_helper:0000000000000000 rgb_matrix_step_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4448   .text.rgb_matrix_step_noeeprom:0000000000000000 rgb_matrix_step_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4466   .text.rgb_matrix_step:0000000000000000 rgb_matrix_step
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4484   .text.rgb_matrix_step_reverse_helper:0000000000000000 rgb_matrix_step_reverse_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4521   .text.rgb_matrix_step_reverse_noeeprom:0000000000000000 rgb_matrix_step_reverse_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4539   .text.rgb_matrix_step_reverse:0000000000000000 rgb_matrix_step_reverse
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4557   .text.rgb_matrix_sethsv_eeprom_helper:0000000000000000 rgb_matrix_sethsv_eeprom_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4597   .text.rgb_matrix_sethsv_noeeprom:0000000000000000 rgb_matrix_sethsv_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4617   .text.rgb_matrix_sethsv:0000000000000000 rgb_matrix_sethsv
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4637   .text.rgb_matrix_get_hsv:0000000000000000 rgb_matrix_get_hsv
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4659   .text.rgb_matrix_get_hue:0000000000000000 rgb_matrix_get_hue
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4678   .text.rgb_matrix_get_sat:0000000000000000 rgb_matrix_get_sat
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4697   .text.rgb_matrix_get_val:0000000000000000 rgb_matrix_get_val
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4716   .text.rgb_matrix_increase_hue_helper:0000000000000000 rgb_matrix_increase_hue_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4753   .text.rgb_matrix_increase_hue_noeeprom:0000000000000000 rgb_matrix_increase_hue_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4771   .text.rgb_matrix_increase_hue:0000000000000000 rgb_matrix_increase_hue
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4789   .text.rgb_matrix_decrease_hue_helper:0000000000000000 rgb_matrix_decrease_hue_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4822   .text.rgb_matrix_decrease_hue_noeeprom:0000000000000000 rgb_matrix_decrease_hue_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4840   .text.rgb_matrix_decrease_hue:0000000000000000 rgb_matrix_decrease_hue
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4858   .text.rgb_matrix_increase_sat_helper:0000000000000000 rgb_matrix_increase_sat_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4888   .text.rgb_matrix_increase_sat_helper:000000000000000e L_4002
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4913   .text.rgb_matrix_increase_sat_noeeprom:0000000000000000 rgb_matrix_increase_sat_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4931   .text.rgb_matrix_increase_sat:0000000000000000 rgb_matrix_increase_sat
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4949   .text.rgb_matrix_decrease_sat_helper:0000000000000000 rgb_matrix_decrease_sat_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:4979   .text.rgb_matrix_decrease_sat_helper:000000000000000e L_4058
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5004   .text.rgb_matrix_decrease_sat_noeeprom:0000000000000000 rgb_matrix_decrease_sat_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5022   .text.rgb_matrix_decrease_sat:0000000000000000 rgb_matrix_decrease_sat
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5040   .text.rgb_matrix_increase_val_helper:0000000000000000 rgb_matrix_increase_val_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5070   .text.rgb_matrix_increase_val_helper:000000000000000e L_4114
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5095   .text.rgb_matrix_increase_val_noeeprom:0000000000000000 rgb_matrix_increase_val_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5113   .text.rgb_matrix_increase_val:0000000000000000 rgb_matrix_increase_val
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5131   .text.rgb_matrix_decrease_val_helper:0000000000000000 rgb_matrix_decrease_val_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5161   .text.rgb_matrix_decrease_val_helper:000000000000000e L_4170
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5186   .text.rgb_matrix_decrease_val_noeeprom:0000000000000000 rgb_matrix_decrease_val_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5204   .text.rgb_matrix_decrease_val:0000000000000000 rgb_matrix_decrease_val
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5222   .text.rgb_matrix_set_speed_eeprom_helper:0000000000000000 rgb_matrix_set_speed_eeprom_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5250   .text.rgb_matrix_set_speed_noeeprom:0000000000000000 rgb_matrix_set_speed_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5282   .text.rgb_matrix_set_speed:0000000000000000 rgb_matrix_set_speed
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5312   .text.rgb_matrix_get_speed:0000000000000000 rgb_matrix_get_speed
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5331   .text.rgb_matrix_increase_speed_helper:0000000000000000 rgb_matrix_increase_speed_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5353   .text.rgb_matrix_increase_speed_helper:000000000000000c L_4308
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5387   .text.rgb_matrix_increase_speed_noeeprom:0000000000000000 rgb_matrix_increase_speed_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5405   .text.rgb_matrix_increase_speed:0000000000000000 rgb_matrix_increase_speed
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5423   .text.rgb_matrix_decrease_speed_helper:0000000000000000 rgb_matrix_decrease_speed_helper
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5445   .text.rgb_matrix_decrease_speed_helper:000000000000000c L_4375
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5479   .text.rgb_matrix_decrease_speed_noeeprom:0000000000000000 rgb_matrix_decrease_speed_noeeprom
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5497   .text.rgb_matrix_decrease_speed:0000000000000000 rgb_matrix_decrease_speed
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5515   .text.rgb_matrix_get_flags:0000000000000000 rgb_matrix_get_flags
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5534   .text.rgb_matrix_set_flags:0000000000000000 rgb_matrix_set_flags
C:\Users\xue\AppData\Local\Temp\ccpmoJq6.s:5596   .rodata.k_rgb_matrix_center:0000000000000000 k_rgb_matrix_center

UNDEFINED SYMBOLS
hsv_to_rgb
eeprom_read_block
eeprom_update_block
g_led_config
rgb_matrix_driver
__divmodsi4
is_keyboard_master
memcpy
timer_elapsed32
timer_read32
__tablejump2__
eeconfig_is_enabled
eeconfig_init
__do_copy_data
__do_clear_bss
