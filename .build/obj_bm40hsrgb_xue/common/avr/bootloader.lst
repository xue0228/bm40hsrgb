   1               		.file	"bootloader.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.bootloader_jump,"ax",@progbits
  11               		.weak	bootloader_jump
  13               	bootloader_jump:
  14               	.LFB102:
  15               		.file 1 "tmk_core/common/avr/bootloader.c"
   1:tmk_core/common/avr/bootloader.c **** #include <stdint.h>
   2:tmk_core/common/avr/bootloader.c **** #include <stdbool.h>
   3:tmk_core/common/avr/bootloader.c **** #include <avr/io.h>
   4:tmk_core/common/avr/bootloader.c **** #include <avr/eeprom.h>
   5:tmk_core/common/avr/bootloader.c **** #include <avr/interrupt.h>
   6:tmk_core/common/avr/bootloader.c **** #include <avr/wdt.h>
   7:tmk_core/common/avr/bootloader.c **** #include <util/delay.h>
   8:tmk_core/common/avr/bootloader.c **** #include "bootloader.h"
   9:tmk_core/common/avr/bootloader.c **** #include <avr/boot.h>
  10:tmk_core/common/avr/bootloader.c **** 
  11:tmk_core/common/avr/bootloader.c **** #ifdef PROTOCOL_LUFA
  12:tmk_core/common/avr/bootloader.c **** #    include <LUFA/Drivers/USB/USB.h>
  13:tmk_core/common/avr/bootloader.c **** #endif
  14:tmk_core/common/avr/bootloader.c **** 
  15:tmk_core/common/avr/bootloader.c **** /** \brief Bootloader Size in *bytes*
  16:tmk_core/common/avr/bootloader.c ****  *
  17:tmk_core/common/avr/bootloader.c ****  * AVR Boot section size are defined by setting BOOTSZ fuse in fact. Consult with your MCU datashee
  18:tmk_core/common/avr/bootloader.c ****  * Note that 'Word'(2 bytes) size and address are used in datasheet while TMK uses 'Byte'.
  19:tmk_core/common/avr/bootloader.c ****  *
  20:tmk_core/common/avr/bootloader.c ****  * Size of Bootloaders in bytes:
  21:tmk_core/common/avr/bootloader.c ****  *   Atmel DFU loader(ATmega32U4)   4096
  22:tmk_core/common/avr/bootloader.c ****  *   Atmel DFU loader(AT90USB128)   8192
  23:tmk_core/common/avr/bootloader.c ****  *   LUFA bootloader(ATmega32U4)    4096
  24:tmk_core/common/avr/bootloader.c ****  *   Arduino Caterina(ATmega32U4)   4096
  25:tmk_core/common/avr/bootloader.c ****  *   USBaspLoader(ATmega***)        2048
  26:tmk_core/common/avr/bootloader.c ****  *   Teensy   halfKay(ATmega32U4)   512
  27:tmk_core/common/avr/bootloader.c ****  *   Teensy++ halfKay(AT90USB128)   1024
  28:tmk_core/common/avr/bootloader.c ****  *
  29:tmk_core/common/avr/bootloader.c ****  * AVR Boot section is located at the end of Flash memory like the followings.
  30:tmk_core/common/avr/bootloader.c ****  *
  31:tmk_core/common/avr/bootloader.c ****  * byte     Atmel/LUFA(ATMega32u4)          byte     Atmel(AT90SUB128)
  32:tmk_core/common/avr/bootloader.c ****  * 0x0000   +---------------+               0x00000  +---------------+
  33:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  34:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  35:tmk_core/common/avr/bootloader.c ****  *          |  Application  |                        |  Application  |
  36:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  37:tmk_core/common/avr/bootloader.c ****  *          =               =                        =               =
  38:tmk_core/common/avr/bootloader.c ****  *          |               | 32KB-4KB               |               | 128KB-8KB
  39:tmk_core/common/avr/bootloader.c ****  * 0x7000   +---------------+               0x1E000  +---------------+
  40:tmk_core/common/avr/bootloader.c ****  *          |  Bootloader   | 4KB                    |  Bootloader   | 8KB
  41:tmk_core/common/avr/bootloader.c ****  * 0x7FFF   +---------------+               0x1FFFF  +---------------+
  42:tmk_core/common/avr/bootloader.c ****  *
  43:tmk_core/common/avr/bootloader.c ****  *
  44:tmk_core/common/avr/bootloader.c ****  * byte     Teensy(ATMega32u4)              byte     Teensy++(AT90SUB128)
  45:tmk_core/common/avr/bootloader.c ****  * 0x0000   +---------------+               0x00000  +---------------+
  46:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  47:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  48:tmk_core/common/avr/bootloader.c ****  *          |  Application  |                        |  Application  |
  49:tmk_core/common/avr/bootloader.c ****  *          |               |                        |               |
  50:tmk_core/common/avr/bootloader.c ****  *          =               =                        =               =
  51:tmk_core/common/avr/bootloader.c ****  *          |               | 32KB-512B              |               | 128KB-1KB
  52:tmk_core/common/avr/bootloader.c ****  * 0x7E00   +---------------+               0x1FC00  +---------------+
  53:tmk_core/common/avr/bootloader.c ****  *          |  Bootloader   | 512B                   |  Bootloader   | 1KB
  54:tmk_core/common/avr/bootloader.c ****  * 0x7FFF   +---------------+               0x1FFFF  +---------------+
  55:tmk_core/common/avr/bootloader.c ****  */
  56:tmk_core/common/avr/bootloader.c **** #define FLASH_SIZE (FLASHEND + 1L)
  57:tmk_core/common/avr/bootloader.c **** 
  58:tmk_core/common/avr/bootloader.c **** #if !defined(BOOTLOADER_SIZE)
  59:tmk_core/common/avr/bootloader.c **** uint16_t bootloader_start;
  60:tmk_core/common/avr/bootloader.c **** #endif
  61:tmk_core/common/avr/bootloader.c **** 
  62:tmk_core/common/avr/bootloader.c **** // compatibility between ATMega8 and ATMega88
  63:tmk_core/common/avr/bootloader.c **** #if !defined(MCUCSR)
  64:tmk_core/common/avr/bootloader.c **** #    if defined(MCUSR)
  65:tmk_core/common/avr/bootloader.c **** #        define MCUCSR MCUSR
  66:tmk_core/common/avr/bootloader.c **** #    endif
  67:tmk_core/common/avr/bootloader.c **** #endif
  68:tmk_core/common/avr/bootloader.c **** 
  69:tmk_core/common/avr/bootloader.c **** /** \brief Entering the Bootloader via Software
  70:tmk_core/common/avr/bootloader.c ****  *
  71:tmk_core/common/avr/bootloader.c ****  * http://www.fourwalledcubicle.com/files/LUFA/Doc/120730/html/_page__software_bootloader_start.htm
  72:tmk_core/common/avr/bootloader.c ****  */
  73:tmk_core/common/avr/bootloader.c **** #define BOOTLOADER_RESET_KEY 0xB007B007
  74:tmk_core/common/avr/bootloader.c **** uint32_t reset_key __attribute__((section(".noinit,\"aw\",@nobits;")));
  75:tmk_core/common/avr/bootloader.c **** 
  76:tmk_core/common/avr/bootloader.c **** /** \brief initialize MCU status by watchdog reset
  77:tmk_core/common/avr/bootloader.c ****  *
  78:tmk_core/common/avr/bootloader.c ****  * FIXME: needs doc
  79:tmk_core/common/avr/bootloader.c ****  */
  80:tmk_core/common/avr/bootloader.c **** __attribute__((weak)) void bootloader_jump(void) {
  16               		.loc 1 80 50 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  81:tmk_core/common/avr/bootloader.c **** #if !defined(BOOTLOADER_SIZE)
  82:tmk_core/common/avr/bootloader.c ****     uint8_t high_fuse = boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
  83:tmk_core/common/avr/bootloader.c **** 
  84:tmk_core/common/avr/bootloader.c ****     if (high_fuse & ~(FUSE_BOOTSZ0 & FUSE_BOOTSZ1)) {
  85:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 512) >> 1;
  86:tmk_core/common/avr/bootloader.c ****     } else if (high_fuse & ~(FUSE_BOOTSZ1)) {
  87:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 1024) >> 1;
  88:tmk_core/common/avr/bootloader.c ****     } else if (high_fuse & ~(FUSE_BOOTSZ0)) {
  89:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 2048) >> 1;
  90:tmk_core/common/avr/bootloader.c ****     } else {
  91:tmk_core/common/avr/bootloader.c ****         bootloader_start = (FLASH_SIZE - 4096) >> 1;
  92:tmk_core/common/avr/bootloader.c ****     }
  93:tmk_core/common/avr/bootloader.c **** #endif
  94:tmk_core/common/avr/bootloader.c **** 
  95:tmk_core/common/avr/bootloader.c ****     // Something like this might work, but it compiled larger than the block above
  96:tmk_core/common/avr/bootloader.c ****     // bootloader_start = FLASH_SIZE - (256 << (~high_fuse & 0b110 >> 1));
  97:tmk_core/common/avr/bootloader.c **** 
  98:tmk_core/common/avr/bootloader.c **** #if defined(BOOTLOADER_HALFKAY)
  99:tmk_core/common/avr/bootloader.c ****     //  http://www.pjrc.com/teensy/jump_to_bootloader.html
 100:tmk_core/common/avr/bootloader.c ****     cli();
 101:tmk_core/common/avr/bootloader.c ****     // disable watchdog, if enabled (it's not)
 102:tmk_core/common/avr/bootloader.c ****     // disable all peripherals
 103:tmk_core/common/avr/bootloader.c ****     // a shutdown call might make sense here
 104:tmk_core/common/avr/bootloader.c ****     UDCON  = 1;
 105:tmk_core/common/avr/bootloader.c ****     USBCON = (1 << FRZCLK);  // disable USB
 106:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 107:tmk_core/common/avr/bootloader.c ****     _delay_ms(5);
 108:tmk_core/common/avr/bootloader.c **** #    if defined(__AVR_AT90USB162__)  // Teensy 1.0
 109:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 110:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 111:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 112:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 113:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 114:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 115:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 116:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 117:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 118:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 119:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 120:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 121:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 122:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 123:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0x3E00");
 124:tmk_core/common/avr/bootloader.c **** #    elif defined(__AVR_ATmega32U4__)   // Teensy 2.0
 125:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 126:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 127:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 128:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 129:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 130:tmk_core/common/avr/bootloader.c ****     ADCSRA = 0;
 131:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 132:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 133:tmk_core/common/avr/bootloader.c ****     TIMSK3 = 0;
 134:tmk_core/common/avr/bootloader.c ****     TIMSK4 = 0;
 135:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 136:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 137:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 138:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 139:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 140:tmk_core/common/avr/bootloader.c ****     DDRE   = 0;
 141:tmk_core/common/avr/bootloader.c ****     DDRF   = 0;
 142:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 143:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 144:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 145:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 146:tmk_core/common/avr/bootloader.c ****     PORTE  = 0;
 147:tmk_core/common/avr/bootloader.c ****     PORTF  = 0;
 148:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0x7E00");
 149:tmk_core/common/avr/bootloader.c **** #    elif defined(__AVR_AT90USB646__)   // Teensy++ 1.0
 150:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 151:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 152:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 153:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 154:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 155:tmk_core/common/avr/bootloader.c ****     ADCSRA = 0;
 156:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 157:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 158:tmk_core/common/avr/bootloader.c ****     TIMSK2 = 0;
 159:tmk_core/common/avr/bootloader.c ****     TIMSK3 = 0;
 160:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 161:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 162:tmk_core/common/avr/bootloader.c ****     DDRA   = 0;
 163:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 164:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 165:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 166:tmk_core/common/avr/bootloader.c ****     DDRE   = 0;
 167:tmk_core/common/avr/bootloader.c ****     DDRF   = 0;
 168:tmk_core/common/avr/bootloader.c ****     PORTA  = 0;
 169:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 170:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 171:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 172:tmk_core/common/avr/bootloader.c ****     PORTE  = 0;
 173:tmk_core/common/avr/bootloader.c ****     PORTF  = 0;
 174:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0xFC00");
 175:tmk_core/common/avr/bootloader.c **** #    elif defined(__AVR_AT90USB1286__)  // Teensy++ 2.0
 176:tmk_core/common/avr/bootloader.c ****     EIMSK  = 0;
 177:tmk_core/common/avr/bootloader.c ****     PCICR  = 0;
 178:tmk_core/common/avr/bootloader.c ****     SPCR   = 0;
 179:tmk_core/common/avr/bootloader.c ****     ACSR   = 0;
 180:tmk_core/common/avr/bootloader.c ****     EECR   = 0;
 181:tmk_core/common/avr/bootloader.c ****     ADCSRA = 0;
 182:tmk_core/common/avr/bootloader.c ****     TIMSK0 = 0;
 183:tmk_core/common/avr/bootloader.c ****     TIMSK1 = 0;
 184:tmk_core/common/avr/bootloader.c ****     TIMSK2 = 0;
 185:tmk_core/common/avr/bootloader.c ****     TIMSK3 = 0;
 186:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
 187:tmk_core/common/avr/bootloader.c ****     TWCR   = 0;
 188:tmk_core/common/avr/bootloader.c ****     DDRA   = 0;
 189:tmk_core/common/avr/bootloader.c ****     DDRB   = 0;
 190:tmk_core/common/avr/bootloader.c ****     DDRC   = 0;
 191:tmk_core/common/avr/bootloader.c ****     DDRD   = 0;
 192:tmk_core/common/avr/bootloader.c ****     DDRE   = 0;
 193:tmk_core/common/avr/bootloader.c ****     DDRF   = 0;
 194:tmk_core/common/avr/bootloader.c ****     PORTA  = 0;
 195:tmk_core/common/avr/bootloader.c ****     PORTB  = 0;
 196:tmk_core/common/avr/bootloader.c ****     PORTC  = 0;
 197:tmk_core/common/avr/bootloader.c ****     PORTD  = 0;
 198:tmk_core/common/avr/bootloader.c ****     PORTE  = 0;
 199:tmk_core/common/avr/bootloader.c ****     PORTF  = 0;
 200:tmk_core/common/avr/bootloader.c ****     asm volatile("jmp 0x1FC00");
 201:tmk_core/common/avr/bootloader.c **** #    endif
 202:tmk_core/common/avr/bootloader.c **** 
 203:tmk_core/common/avr/bootloader.c **** #elif defined(BOOTLOADER_CATERINA)
 204:tmk_core/common/avr/bootloader.c ****     // this block may be optional
 205:tmk_core/common/avr/bootloader.c ****     // TODO: figure it out
 206:tmk_core/common/avr/bootloader.c **** 
 207:tmk_core/common/avr/bootloader.c ****     uint16_t *const bootKeyPtr = (uint16_t *)0x0800;
 208:tmk_core/common/avr/bootloader.c **** 
 209:tmk_core/common/avr/bootloader.c ****     // Value used by Caterina bootloader use to determine whether to run the
 210:tmk_core/common/avr/bootloader.c ****     // sketch or the bootloader programmer.
 211:tmk_core/common/avr/bootloader.c ****     uint16_t bootKey = 0x7777;
 212:tmk_core/common/avr/bootloader.c **** 
 213:tmk_core/common/avr/bootloader.c ****     *bootKeyPtr = bootKey;
 214:tmk_core/common/avr/bootloader.c **** 
 215:tmk_core/common/avr/bootloader.c ****     // setup watchdog timeout
 216:tmk_core/common/avr/bootloader.c ****     wdt_enable(WDTO_60MS);
 217:tmk_core/common/avr/bootloader.c **** 
 218:tmk_core/common/avr/bootloader.c ****     while (1) {
 219:tmk_core/common/avr/bootloader.c ****     }  // wait for watchdog timer to trigger
 220:tmk_core/common/avr/bootloader.c **** 
 221:tmk_core/common/avr/bootloader.c **** #elif defined(BOOTLOADER_USBASP)
 222:tmk_core/common/avr/bootloader.c ****     // Taken with permission of Stephan Baerwolf from https://github.com/tinyusbboard/API/blob/mast
 223:tmk_core/common/avr/bootloader.c ****     wdt_enable(WDTO_15MS);
 224:tmk_core/common/avr/bootloader.c ****     wdt_reset();
 225:tmk_core/common/avr/bootloader.c ****     asm volatile("cli                    \n\t"
 226:tmk_core/common/avr/bootloader.c ****                  "ldi    r29 ,       %[ramendhi] \n\t"
 227:tmk_core/common/avr/bootloader.c ****                  "ldi    r28 ,       %[ramendlo] \n\t"
 228:tmk_core/common/avr/bootloader.c **** #    if (FLASHEND > 131071)
 229:tmk_core/common/avr/bootloader.c ****                  "ldi    r18 ,       %[bootaddrhi]   \n\t"
 230:tmk_core/common/avr/bootloader.c ****                  "st     Y+,         r18     \n\t"
 231:tmk_core/common/avr/bootloader.c **** #    endif
 232:tmk_core/common/avr/bootloader.c ****                  "ldi    r18 ,       %[bootaddrme]   \n\t"
 233:tmk_core/common/avr/bootloader.c ****                  "st     Y+,     r18     \n\t"
 234:tmk_core/common/avr/bootloader.c ****                  "ldi    r18 ,       %[bootaddrlo]   \n\t"
 235:tmk_core/common/avr/bootloader.c ****                  "st     Y+,     r18     \n\t"
 236:tmk_core/common/avr/bootloader.c ****                  "out    %[mcucsrio],    __zero_reg__    \n\t"
 237:tmk_core/common/avr/bootloader.c ****                  "bootloader_startup_loop%=:         \n\t"
 238:tmk_core/common/avr/bootloader.c ****                  "rjmp bootloader_startup_loop%=     \n\t"
 239:tmk_core/common/avr/bootloader.c ****                  :
 240:tmk_core/common/avr/bootloader.c ****                  : [mcucsrio] "I"(_SFR_IO_ADDR(MCUCSR)),
 241:tmk_core/common/avr/bootloader.c **** #    if (FLASHEND > 131071)
 242:tmk_core/common/avr/bootloader.c ****                    [ramendhi] "M"(((RAMEND - 2) >> 8) & 0xff), [ramendlo] "M"(((RAMEND - 2) >> 0) &
 243:tmk_core/common/avr/bootloader.c **** #    else
 244:tmk_core/common/avr/bootloader.c ****                    [ramendhi] "M"(((RAMEND - 1) >> 8) & 0xff), [ramendlo] "M"(((RAMEND - 1) >> 0) &
 245:tmk_core/common/avr/bootloader.c **** #    endif
 246:tmk_core/common/avr/bootloader.c ****                    [bootaddrme] "M"((((FLASH_SIZE - BOOTLOADER_SIZE) >> 1) >> 8) & 0xff), [bootaddr
 247:tmk_core/common/avr/bootloader.c **** 
 248:tmk_core/common/avr/bootloader.c **** #else  // Assume remaining boards are DFU, even if the flag isn't set
 249:tmk_core/common/avr/bootloader.c **** 
 250:tmk_core/common/avr/bootloader.c **** #    if !(defined(__AVR_ATmega32A__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328__) |
 251:tmk_core/common/avr/bootloader.c ****     UDCON  = 1;
  22               		.loc 1 251 5 view .LVU1
  23               		.loc 1 251 12 is_stmt 0 view .LVU2
  24 0000 81E0      		ldi r24,lo8(1)
  25 0002 8093 E000 		sts 224,r24
 252:tmk_core/common/avr/bootloader.c ****     USBCON = (1 << FRZCLK);  // disable USB
  26               		.loc 1 252 5 is_stmt 1 view .LVU3
  27               		.loc 1 252 12 is_stmt 0 view .LVU4
  28 0006 80E2      		ldi r24,lo8(32)
  29 0008 8093 D800 		sts 216,r24
 253:tmk_core/common/avr/bootloader.c ****     UCSR1B = 0;
  30               		.loc 1 253 5 is_stmt 1 view .LVU5
  31               		.loc 1 253 12 is_stmt 0 view .LVU6
  32 000c 1092 C900 		sts 201,__zero_reg__
 254:tmk_core/common/avr/bootloader.c ****     _delay_ms(5);  // 5 seems to work fine
  33               		.loc 1 254 5 is_stmt 1 view .LVU7
  34               	.LVL0:
  35               	.LBB9:
  36               	.LBI9:
  37               		.file 2 "c:\\qmk_msys\\mingw64\\avr\\include\\util\\delay.h"
   1:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    All rights reserved.
   5:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   6:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   9:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  12:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      distribution.
  16:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  17:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  21:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  33:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  35:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  38:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  endif
  42:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  44:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <math.h>
  47:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  48:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \file */
  49:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \code
  51:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \endcode
  55:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  56:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     used.
  60:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  61:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  70:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  79:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  83:c:\qmk_msys\mingw64\avr\include\util\delay.h **** */
  84:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  85:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
  89:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  90:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \def F_CPU
  95:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  97:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 103:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     integer value.
 107:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 108:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 110:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 111:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 114:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 115:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  include <math.h>
 119:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 120:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 121:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /**
 122:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 124:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 126:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 129:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 131:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 137:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 142:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 147:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    respectively.
 151:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 152:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \note
 153:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 154:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 164:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 165:c:\qmk_msys\mingw64\avr\include\util\delay.h **** void
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** _delay_ms(double __ms)
  38               		.loc 2 166 1 view .LVU8
  39               	.LBB10:
 167:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	double __tmp ;
  40               		.loc 2 168 2 view .LVU9
 169:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
  41               		.loc 2 172 2 view .LVU10
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  42               		.loc 2 173 2 view .LVU11
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  43               		.loc 2 174 2 view .LVU12
 175:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 176:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 179:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 182:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#else
 183:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		//round up by default
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  44               		.loc 2 184 3 view .LVU13
 185:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 186:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 187:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  45               		.loc 2 187 2 view .LVU14
  46 0010 8FE1      		ldi r24,lo8(19999)
  47 0012 9EE4      		ldi r25,hi8(19999)
  48 0014 0197      	1:	sbiw r24,1
  49 0016 01F4      		brne 1b
  50 0018 00C0      		rjmp .
  51 001a 0000      		nop
  52               	.LVL1:
  53               		.loc 2 187 2 is_stmt 0 view .LVU15
  54               	.LBE10:
  55               	.LBE9:
 255:tmk_core/common/avr/bootloader.c **** #    endif
 256:tmk_core/common/avr/bootloader.c **** 
 257:tmk_core/common/avr/bootloader.c **** #    ifdef BOOTLOADER_BOOTLOADHID
 258:tmk_core/common/avr/bootloader.c ****     // force bootloadHID to stay in bootloader mode, so that it waits
 259:tmk_core/common/avr/bootloader.c ****     // for a new firmware to be flashed
 260:tmk_core/common/avr/bootloader.c ****     eeprom_write_byte((uint8_t *)1, 0x00);
 261:tmk_core/common/avr/bootloader.c **** #    endif
 262:tmk_core/common/avr/bootloader.c **** 
 263:tmk_core/common/avr/bootloader.c ****     // watchdog reset
 264:tmk_core/common/avr/bootloader.c ****     reset_key = BOOTLOADER_RESET_KEY;
  56               		.loc 1 264 5 is_stmt 1 view .LVU16
  57               		.loc 1 264 15 is_stmt 0 view .LVU17
  58 001c 87E0      		ldi r24,lo8(7)
  59 001e 90EB      		ldi r25,lo8(-80)
  60 0020 DC01      		movw r26,r24
  61 0022 8093 0000 		sts reset_key,r24
  62 0026 9093 0000 		sts reset_key+1,r25
  63 002a A093 0000 		sts reset_key+2,r26
  64 002e B093 0000 		sts reset_key+3,r27
 265:tmk_core/common/avr/bootloader.c ****     wdt_enable(WDTO_250MS);
  65               		.loc 1 265 5 is_stmt 1 view .LVU18
  66               	.LVL2:
  67               	.LBB11:
  68               	.LBI11:
  69               		.file 3 "c:\\qmk_msys\\mingw64\\avr\\include\\avr\\wdt.h"
   1:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
   5:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
   8:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  11:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****      distribution.
  15:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  16:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  20:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  32:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  34:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /*
  35:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****  */
  37:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  38:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  41:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  44:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /** \file */
  45:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  48:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  57:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  61:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     the following:
  68:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  69:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     \code
  70:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  73:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  75:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     {
  80:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     }
  84:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     \endcode
  85:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  86:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** */
  91:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  92:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /**
  93:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** */
  98:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
  99:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 101:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 103:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #else
 106:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #endif
 108:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 109:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #else
 114:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #endif
 116:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 117:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #else
 120:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #endif
 122:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 123:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 125:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 126:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /**
 127:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 134:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** */
 136:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 137:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 138:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 140:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** /*
 141:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 142:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    registers to the CCP register
 144:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** ** At the same time,
 145:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 148:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****    sync is finished).
 151:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** */
 152:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 153:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** do { \
 154:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** uint8_t temp; \
 155:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 156:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 165:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : "r0" \
 173:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** ); \
 174:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** } while(0)
 175:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 176:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define wdt_disable() \
 177:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 178:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : \
 184:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : "r0" \
 190:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** );
 191:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 192:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 193:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 194:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 195:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 196:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 198:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 199:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : /* no outputs */  \
 203:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : "r16" \
 209:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** )
 210:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 211:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #define wdt_disable() \
 212:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** do { \
 213:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 214:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 215:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 217:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 218:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : /*no output */ \
 224:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****     : "r16" \
 230:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** ); \
 231:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** }while(0)
 232:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 233:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #elif defined(CCP)
 234:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 235:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** static __inline__
 236:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 237:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 238:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** {
 239:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 241:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 242:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 244:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 245:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 249:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 255:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			);
 256:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 257:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 259:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 260:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 262:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 263:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 267:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 273:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			);
 274:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 275:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 277:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 278:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 280:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 281:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 285:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 291:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			);
 292:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 293:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else
 294:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****  	{
 295:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 296:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 298:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 299:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 303:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 309:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 			);
 310:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 311:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** }
 312:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 313:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** static __inline__
 314:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 315:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** void wdt_disable (void)
 316:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** {
 317:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 319:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 320:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 321:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 323:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 324:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 330:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 336:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				);
 337:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 338:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 340:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 341:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 342:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 344:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 345:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 351:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 357:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				);
 358:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 359:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 361:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 362:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 363:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 365:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 366:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 372:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 378:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				);
 379:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 380:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else
 381:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 382:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 383:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 384:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 386:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 387:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 393:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 399:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				);
 400:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 401:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** }
 402:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 403:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** #else
 404:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 405:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** static __inline__
 406:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 407:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
  70               		.loc 3 407 6 view .LVU19
  71               	.LBB12:
 408:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** {
 409:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
  72               		.loc 3 409 2 view .LVU20
 410:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 411:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 412:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 414:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 415:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 416:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 418:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: /* no outputs */
 419:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 424:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		);
 425:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 426:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else
 427:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 428:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
  73               		.loc 3 428 3 view .LVU21
  74 0032 88E1      		ldi r24,lo8(24)
  75 0034 9CE0      		ldi r25,lo8(12)
  76               	/* #APP */
  77               	 ;  428 "c:\qmk_msys\mingw64\avr\include\avr\wdt.h" 1
  78 0036 0FB6      		in __tmp_reg__,__SREG__
  79 0038 F894      		cli
  80 003a A895      		wdr
  81 003c 8093 6000 		sts 96, r24
  82 0040 0FBE      		out __SREG__,__tmp_reg__
  83 0042 9093 6000 		sts 96, r25
  84               	 	
  85               	 ;  0 "" 2
  86               	/* #NOAPP */
  87               	.L2:
  88               	.LBE12:
  89               	.LBE11:
 266:tmk_core/common/avr/bootloader.c ****     for (;;)
  90               		.loc 1 266 5 discriminator 1 view .LVU22
 267:tmk_core/common/avr/bootloader.c ****         ;
  91               		.loc 1 267 9 discriminator 1 view .LVU23
 266:tmk_core/common/avr/bootloader.c ****     for (;;)
  92               		.loc 1 266 11 discriminator 1 view .LVU24
  93 0046 00C0      		rjmp .L2
  94               		.cfi_endproc
  95               	.LFE102:
  97               		.section	.init3,"ax",@progbits
  98               	.global	bootloader_jump_after_watchdog_reset
 100               	bootloader_jump_after_watchdog_reset:
 101               	.LFB103:
 268:tmk_core/common/avr/bootloader.c **** #endif
 269:tmk_core/common/avr/bootloader.c **** }
 270:tmk_core/common/avr/bootloader.c **** 
 271:tmk_core/common/avr/bootloader.c **** /* this runs before main() */
 272:tmk_core/common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void) __attribute__((used, naked, section(".init3")));
 273:tmk_core/common/avr/bootloader.c **** void bootloader_jump_after_watchdog_reset(void) {
 102               		.loc 1 273 49 view -0
 103               		.cfi_startproc
 104               	/* prologue: naked */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 274:tmk_core/common/avr/bootloader.c **** #ifndef BOOTLOADER_HALFKAY
 275:tmk_core/common/avr/bootloader.c ****     if ((MCUCSR & (1 << WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
 108               		.loc 1 275 5 view .LVU26
 109               		.loc 1 275 8 is_stmt 0 view .LVU27
 110 0000 04B6      		in __tmp_reg__,0x34
 111 0002 03FE      		sbrs __tmp_reg__,3
 112 0004 00C0      		rjmp .L3
 113               		.loc 1 275 32 discriminator 1 view .LVU28
 114 0006 8091 0000 		lds r24,reset_key
 115 000a 9091 0000 		lds r25,reset_key+1
 116 000e A091 0000 		lds r26,reset_key+2
 117 0012 B091 0000 		lds r27,reset_key+3
 118 0016 8730      		cpi r24,7
 119 0018 904B      		sbci r25,-80
 120 001a A740      		sbci r26,7
 121 001c B04B      		sbci r27,-80
 122 001e 01F4      		brne .L3
 276:tmk_core/common/avr/bootloader.c ****         reset_key = 0;
 123               		.loc 1 276 9 is_stmt 1 view .LVU29
 124               		.loc 1 276 19 is_stmt 0 view .LVU30
 125 0020 1092 0000 		sts reset_key,__zero_reg__
 126 0024 1092 0000 		sts reset_key+1,__zero_reg__
 127 0028 1092 0000 		sts reset_key+2,__zero_reg__
 128 002c 1092 0000 		sts reset_key+3,__zero_reg__
 277:tmk_core/common/avr/bootloader.c **** 
 278:tmk_core/common/avr/bootloader.c ****         // My custom USBasploader requires this to come up.
 279:tmk_core/common/avr/bootloader.c ****         MCUCSR = 0;
 129               		.loc 1 279 9 is_stmt 1 view .LVU31
 130               		.loc 1 279 16 is_stmt 0 view .LVU32
 131 0030 14BE      		out 0x34,__zero_reg__
 280:tmk_core/common/avr/bootloader.c **** 
 281:tmk_core/common/avr/bootloader.c ****         // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
 282:tmk_core/common/avr/bootloader.c ****         MCUCSR &= ~(1 << WDRF);
 132               		.loc 1 282 9 is_stmt 1 view .LVU33
 133               		.loc 1 282 16 is_stmt 0 view .LVU34
 134 0032 84B7      		in r24,0x34
 135 0034 877F      		andi r24,lo8(-9)
 136 0036 84BF      		out 0x34,r24
 283:tmk_core/common/avr/bootloader.c ****         wdt_disable();
 137               		.loc 1 283 9 is_stmt 1 view .LVU35
 138               	.LBB13:
 139               	.LBI13:
 429:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 433:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 435:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: /* no outputs */
 436:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 441:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		);
 442:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 443:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** }
 444:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 
 445:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** static __inline__
 446:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 447:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** void wdt_disable (void)
 140               		.loc 3 447 6 view .LVU36
 141               	.LBE13:
 448:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** {
 449:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 142               		.loc 3 449 2 view .LVU37
 143               	.LBB15:
 144               	.LBB14:
 450:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 451:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 452:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 453:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 455:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 456:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 465:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		);
 466:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	}
 467:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	else
 468:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 	{
 469:c:\qmk_msys\mingw64\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 145               		.loc 3 469 9 view .LVU38
 470:c:\qmk_msys\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 146               		.loc 3 470 3 view .LVU39
 147               	/* #APP */
 148               	 ;  470 "c:\qmk_msys\mingw64\avr\include\avr\wdt.h" 1
 149 0038 0FB6      		in __tmp_reg__,__SREG__
 150 003a F894      		cli
 151 003c A895      		wdr
 152 003e 8091 6000 		lds r24,96
 153 0042 8861      		ori r24,24
 154 0044 8093 6000 		sts 96,r24
 155 0048 1092 6000 		sts 96,__zero_reg__
 156 004c 0FBE      		out __SREG__,__tmp_reg__
 157               		
 158               	 ;  0 "" 2
 159               	/* #NOAPP */
 160               	.LBE14:
 161               	.LBE15:
 284:tmk_core/common/avr/bootloader.c **** 
 285:tmk_core/common/avr/bootloader.c **** // This is compled into 'icall', address should be in word unit, not byte.
 286:tmk_core/common/avr/bootloader.c **** #    ifdef BOOTLOADER_SIZE
 287:tmk_core/common/avr/bootloader.c ****         ((void (*)(void))((FLASH_SIZE - BOOTLOADER_SIZE) >> 1))();
 162               		.loc 1 287 9 view .LVU40
 163 004e E0E0      		ldi r30,0
 164 0050 F8E3      		ldi r31,lo8(56)
 165 0052 0995      		icall
 166               	.LVL3:
 167               	.L3:
 168               	/* epilogue start */
 288:tmk_core/common/avr/bootloader.c **** #    else
 289:tmk_core/common/avr/bootloader.c ****         asm("ijmp" ::"z"(bootloader_start));
 290:tmk_core/common/avr/bootloader.c **** #    endif
 291:tmk_core/common/avr/bootloader.c ****     }
 292:tmk_core/common/avr/bootloader.c **** #endif
 293:tmk_core/common/avr/bootloader.c **** }
 169               		.loc 1 293 1 is_stmt 0 view .LVU41
 170               		.cfi_endproc
 171               	.LFE103:
 173               	.global	reset_key
 174               		.section	.noinit,"aw",@nobits;,"aw"
 177               	reset_key:
 178 0000 0000 0000 		.zero	4
 179               		.text
 180               	.Letext0:
 181               		.file 4 "c:\\qmk_msys\\mingw64\\avr\\include\\stdint.h"
 182               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 183               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 184               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 185               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 186               		.file 9 "c:\\qmk_msys\\mingw64\\avr\\include\\stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootloader.c
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:4      *ABS*:000000000000003f __SREG__
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:13     .text.bootloader_jump:0000000000000000 bootloader_jump
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:177    .noinit:0000000000000000 reset_key
C:\Users\xue\AppData\Local\Temp\ccckHi6A.s:100    .init3:0000000000000000 bootloader_jump_after_watchdog_reset

NO UNDEFINED SYMBOLS
