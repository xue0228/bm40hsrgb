   1               		.file	"process_tap_dance.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.process_tap_dance_action_on_dance_finished.part.0,"ax",@progbits
  12               	process_tap_dance_action_on_dance_finished.part.0:
  13               	.LVL0:
  14               	.LFB38:
  15               		.file 1 "quantum/process_keycode/process_tap_dance.c"
   1:quantum/process_keycode/process_tap_dance.c **** /* Copyright 2016 Jack Humbert
   2:quantum/process_keycode/process_tap_dance.c ****  *
   3:quantum/process_keycode/process_tap_dance.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/process_keycode/process_tap_dance.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/process_keycode/process_tap_dance.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/process_keycode/process_tap_dance.c ****  * (at your option) any later version.
   7:quantum/process_keycode/process_tap_dance.c ****  *
   8:quantum/process_keycode/process_tap_dance.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/process_keycode/process_tap_dance.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/process_keycode/process_tap_dance.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/process_keycode/process_tap_dance.c ****  * GNU General Public License for more details.
  12:quantum/process_keycode/process_tap_dance.c ****  *
  13:quantum/process_keycode/process_tap_dance.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/process_keycode/process_tap_dance.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/process_keycode/process_tap_dance.c ****  */
  16:quantum/process_keycode/process_tap_dance.c **** #include "quantum.h"
  17:quantum/process_keycode/process_tap_dance.c **** 
  18:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
  19:quantum/process_keycode/process_tap_dance.c **** uint8_t get_oneshot_mods(void);
  20:quantum/process_keycode/process_tap_dance.c **** #endif
  21:quantum/process_keycode/process_tap_dance.c **** 
  22:quantum/process_keycode/process_tap_dance.c **** static uint16_t last_td;
  23:quantum/process_keycode/process_tap_dance.c **** static int8_t   highest_td = -1;
  24:quantum/process_keycode/process_tap_dance.c **** 
  25:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_on_each_tap(qk_tap_dance_state_t *state, void *user_data) {
  26:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  27:quantum/process_keycode/process_tap_dance.c **** 
  28:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 2) {
  29:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
  30:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
  31:quantum/process_keycode/process_tap_dance.c ****     }
  32:quantum/process_keycode/process_tap_dance.c **** }
  33:quantum/process_keycode/process_tap_dance.c **** 
  34:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_finished(qk_tap_dance_state_t *state, void *user_data) {
  35:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  36:quantum/process_keycode/process_tap_dance.c **** 
  37:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  38:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc1);
  39:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
  40:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
  41:quantum/process_keycode/process_tap_dance.c ****     }
  42:quantum/process_keycode/process_tap_dance.c **** }
  43:quantum/process_keycode/process_tap_dance.c **** 
  44:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_pair_reset(qk_tap_dance_state_t *state, void *user_data) {
  45:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
  46:quantum/process_keycode/process_tap_dance.c **** 
  47:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  48:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc1);
  49:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
  50:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc2);
  51:quantum/process_keycode/process_tap_dance.c ****     }
  52:quantum/process_keycode/process_tap_dance.c **** }
  53:quantum/process_keycode/process_tap_dance.c **** 
  54:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_on_each_tap(qk_tap_dance_state_t *state, void *user_data) {
  55:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  56:quantum/process_keycode/process_tap_dance.c **** 
  57:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 2) {
  58:quantum/process_keycode/process_tap_dance.c ****         layer_move(pair->layer);
  59:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
  60:quantum/process_keycode/process_tap_dance.c ****     }
  61:quantum/process_keycode/process_tap_dance.c **** }
  62:quantum/process_keycode/process_tap_dance.c **** 
  63:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_finished(qk_tap_dance_state_t *state, void *user_data) {
  64:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  65:quantum/process_keycode/process_tap_dance.c **** 
  66:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  67:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc);
  68:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
  69:quantum/process_keycode/process_tap_dance.c ****         pair->layer_function(pair->layer);
  70:quantum/process_keycode/process_tap_dance.c ****     }
  71:quantum/process_keycode/process_tap_dance.c **** }
  72:quantum/process_keycode/process_tap_dance.c **** 
  73:quantum/process_keycode/process_tap_dance.c **** void qk_tap_dance_dual_role_reset(qk_tap_dance_state_t *state, void *user_data) {
  74:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
  75:quantum/process_keycode/process_tap_dance.c **** 
  76:quantum/process_keycode/process_tap_dance.c ****     if (state->count == 1) {
  77:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc);
  78:quantum/process_keycode/process_tap_dance.c ****     }
  79:quantum/process_keycode/process_tap_dance.c **** }
  80:quantum/process_keycode/process_tap_dance.c **** 
  81:quantum/process_keycode/process_tap_dance.c **** static inline void _process_tap_dance_action_fn(qk_tap_dance_state_t *state, void *user_data, qk_ta
  82:quantum/process_keycode/process_tap_dance.c ****     if (fn) {
  83:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
  84:quantum/process_keycode/process_tap_dance.c ****     }
  85:quantum/process_keycode/process_tap_dance.c **** }
  86:quantum/process_keycode/process_tap_dance.c **** 
  87:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_each_tap(qk_tap_dance_action_t *action) { _process_t
  88:quantum/process_keycode/process_tap_dance.c **** 
  89:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_dance_finished(qk_tap_dance_action_t *action) {
  16               		.loc 1 89 20 view -0
  17               		.cfi_startproc
  18               		.loc 1 89 20 is_stmt 0 view .LVU1
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24
  90:quantum/process_keycode/process_tap_dance.c ****     if (action->state.finished) return;
  91:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
  32               		.loc 1 91 5 is_stmt 1 view .LVU2
  33               		.loc 1 91 28 is_stmt 0 view .LVU3
  34 0006 81E0      		ldi r24,lo8(1)
  35               	.LVL1:
  36               		.loc 1 91 28 view .LVU4
  37 0008 898B      		std Y+17,r24
  92:quantum/process_keycode/process_tap_dance.c ****     add_mods(action->state.oneshot_mods);
  38               		.loc 1 92 5 is_stmt 1 view .LVU5
  39 000a 8F81      		ldd r24,Y+7
  40 000c 0E94 0000 		call add_mods
  41               	.LVL2:
  93:quantum/process_keycode/process_tap_dance.c ****     add_weak_mods(action->state.weak_mods);
  42               		.loc 1 93 5 view .LVU6
  43 0010 8885      		ldd r24,Y+8
  44 0012 0E94 0000 		call add_weak_mods
  45               	.LVL3:
  94:quantum/process_keycode/process_tap_dance.c ****     send_keyboard_report();
  46               		.loc 1 94 5 view .LVU7
  47 0016 0E94 0000 		call send_keyboard_report
  48               	.LVL4:
  95:quantum/process_keycode/process_tap_dance.c ****     _process_tap_dance_action_fn(&action->state, action->user_data, action->fn.on_dance_finished);
  49               		.loc 1 95 5 view .LVU8
  50 001a EA81      		ldd r30,Y+2
  51 001c FB81      		ldd r31,Y+3
  52               	.LVL5:
  53               	.LBB4:
  54               	.LBI4:
  81:quantum/process_keycode/process_tap_dance.c ****     if (fn) {
  55               		.loc 1 81 20 view .LVU9
  56               	.LBB5:
  82:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
  57               		.loc 1 82 5 view .LVU10
  82:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
  58               		.loc 1 82 8 is_stmt 0 view .LVU11
  59 001e 3097      		sbiw r30,0
  60 0020 01F0      		breq .L1
  83:quantum/process_keycode/process_tap_dance.c ****     }
  61               		.loc 1 83 9 is_stmt 1 view .LVU12
  62 0022 6C89      		ldd r22,Y+20
  63 0024 7D89      		ldd r23,Y+21
  64 0026 CE01      		movw r24,r28
  65 0028 0696      		adiw r24,6
  66               	.LVL6:
  67               	/* epilogue start */
  83:quantum/process_keycode/process_tap_dance.c ****     }
  68               		.loc 1 83 9 is_stmt 0 view .LVU13
  69               	.LBE5:
  70               	.LBE4:
  96:quantum/process_keycode/process_tap_dance.c **** }
  71               		.loc 1 96 1 view .LVU14
  72 002a DF91      		pop r29
  73 002c CF91      		pop r28
  74               	.LVL7:
  75               	.LBB7:
  76               	.LBB6:
  83:quantum/process_keycode/process_tap_dance.c ****     }
  77               		.loc 1 83 9 view .LVU15
  78 002e 0994      		ijmp
  79               	.LVL8:
  80               	.L1:
  81               	/* epilogue start */
  83:quantum/process_keycode/process_tap_dance.c ****     }
  82               		.loc 1 83 9 view .LVU16
  83               	.LBE6:
  84               	.LBE7:
  85               		.loc 1 96 1 view .LVU17
  86 0030 DF91      		pop r29
  87 0032 CF91      		pop r28
  88               	.LVL9:
  89               		.loc 1 96 1 view .LVU18
  90 0034 0895      		ret
  91               		.cfi_endproc
  92               	.LFE38:
  94               		.section	.text.qk_tap_dance_pair_on_each_tap,"ax",@progbits
  95               	.global	qk_tap_dance_pair_on_each_tap
  97               	qk_tap_dance_pair_on_each_tap:
  98               	.LVL10:
  99               	.LFB24:
  25:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 100               		.loc 1 25 82 is_stmt 1 view -0
 101               		.cfi_startproc
  25:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 102               		.loc 1 25 82 is_stmt 0 view .LVU20
 103 0000 CF93      		push r28
 104               	.LCFI2:
 105               		.cfi_def_cfa_offset 3
 106               		.cfi_offset 28, -2
 107 0002 DF93      		push r29
 108               	.LCFI3:
 109               		.cfi_def_cfa_offset 4
 110               		.cfi_offset 29, -3
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 2 */
 114               	.L__stack_usage = 2
 115 0004 EC01      		movw r28,r24
  26:quantum/process_keycode/process_tap_dance.c **** 
 116               		.loc 1 26 5 is_stmt 1 view .LVU21
 117               	.LVL11:
  28:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 118               		.loc 1 28 5 view .LVU22
  28:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 119               		.loc 1 28 8 is_stmt 0 view .LVU23
 120 0006 8881      		ld r24,Y
 121               	.LVL12:
  28:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 122               		.loc 1 28 8 view .LVU24
 123 0008 8230      		cpi r24,lo8(2)
 124 000a 01F4      		brne .L3
  29:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
 125               		.loc 1 29 9 is_stmt 1 view .LVU25
 126 000c FB01      		movw r30,r22
 127 000e 8281      		ldd r24,Z+2
 128 0010 9381      		ldd r25,Z+3
 129 0012 0E94 0000 		call register_code16
 130               	.LVL13:
  30:quantum/process_keycode/process_tap_dance.c ****     }
 131               		.loc 1 30 9 view .LVU26
  30:quantum/process_keycode/process_tap_dance.c ****     }
 132               		.loc 1 30 25 is_stmt 0 view .LVU27
 133 0016 81E0      		ldi r24,lo8(1)
 134 0018 8B87      		std Y+11,r24
 135               	.L3:
 136               	/* epilogue start */
  32:quantum/process_keycode/process_tap_dance.c **** 
 137               		.loc 1 32 1 view .LVU28
 138 001a DF91      		pop r29
 139 001c CF91      		pop r28
 140               	.LVL14:
  32:quantum/process_keycode/process_tap_dance.c **** 
 141               		.loc 1 32 1 view .LVU29
 142 001e 0895      		ret
 143               		.cfi_endproc
 144               	.LFE24:
 146               		.section	.text.qk_tap_dance_pair_finished,"ax",@progbits
 147               	.global	qk_tap_dance_pair_finished
 149               	qk_tap_dance_pair_finished:
 150               	.LVL15:
 151               	.LFB25:
  34:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 152               		.loc 1 34 79 is_stmt 1 view -0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
  35:quantum/process_keycode/process_tap_dance.c **** 
 158               		.loc 1 35 5 view .LVU31
  37:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc1);
 159               		.loc 1 37 5 view .LVU32
  37:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc1);
 160               		.loc 1 37 14 is_stmt 0 view .LVU33
 161 0000 FC01      		movw r30,r24
 162 0002 8081      		ld r24,Z
 163               	.LVL16:
  37:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc1);
 164               		.loc 1 37 8 view .LVU34
 165 0004 8130      		cpi r24,lo8(1)
 166 0006 01F4      		brne .L6
  38:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 167               		.loc 1 38 9 is_stmt 1 view .LVU35
 168 0008 FB01      		movw r30,r22
 169               	.LVL17:
  38:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 170               		.loc 1 38 9 is_stmt 0 view .LVU36
 171 000a 8081      		ld r24,Z
 172 000c 9181      		ldd r25,Z+1
 173               	.L8:
  40:quantum/process_keycode/process_tap_dance.c ****     }
 174               		.loc 1 40 9 view .LVU37
 175 000e 0C94 0000 		jmp register_code16
 176               	.LVL18:
 177               	.L6:
  39:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 178               		.loc 1 39 12 is_stmt 1 view .LVU38
  39:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc2);
 179               		.loc 1 39 15 is_stmt 0 view .LVU39
 180 0012 8230      		cpi r24,lo8(2)
 181 0014 01F4      		brne .L5
  40:quantum/process_keycode/process_tap_dance.c ****     }
 182               		.loc 1 40 9 is_stmt 1 view .LVU40
 183 0016 FB01      		movw r30,r22
 184               	.LVL19:
  40:quantum/process_keycode/process_tap_dance.c ****     }
 185               		.loc 1 40 9 is_stmt 0 view .LVU41
 186 0018 8281      		ldd r24,Z+2
 187 001a 9381      		ldd r25,Z+3
 188 001c 00C0      		rjmp .L8
 189               	.LVL20:
 190               	.L5:
 191               	/* epilogue start */
  42:quantum/process_keycode/process_tap_dance.c **** 
 192               		.loc 1 42 1 view .LVU42
 193 001e 0895      		ret
 194               		.cfi_endproc
 195               	.LFE25:
 197               		.section	.text.qk_tap_dance_pair_reset,"ax",@progbits
 198               	.global	qk_tap_dance_pair_reset
 200               	qk_tap_dance_pair_reset:
 201               	.LVL21:
 202               	.LFB26:
  44:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_pair_t *pair = (qk_tap_dance_pair_t *)user_data;
 203               		.loc 1 44 76 is_stmt 1 view -0
 204               		.cfi_startproc
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 0 */
 208               	.L__stack_usage = 0
  45:quantum/process_keycode/process_tap_dance.c **** 
 209               		.loc 1 45 5 view .LVU44
  47:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc1);
 210               		.loc 1 47 5 view .LVU45
  47:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc1);
 211               		.loc 1 47 14 is_stmt 0 view .LVU46
 212 0000 FC01      		movw r30,r24
 213 0002 8081      		ld r24,Z
 214               	.LVL22:
  47:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc1);
 215               		.loc 1 47 8 view .LVU47
 216 0004 8130      		cpi r24,lo8(1)
 217 0006 01F4      		brne .L10
  48:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 218               		.loc 1 48 9 is_stmt 1 view .LVU48
 219 0008 FB01      		movw r30,r22
 220               	.LVL23:
  48:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 221               		.loc 1 48 9 is_stmt 0 view .LVU49
 222 000a 8081      		ld r24,Z
 223 000c 9181      		ldd r25,Z+1
 224               	.L12:
  50:quantum/process_keycode/process_tap_dance.c ****     }
 225               		.loc 1 50 9 view .LVU50
 226 000e 0C94 0000 		jmp unregister_code16
 227               	.LVL24:
 228               	.L10:
  49:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc2);
 229               		.loc 1 49 12 is_stmt 1 view .LVU51
  49:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc2);
 230               		.loc 1 49 15 is_stmt 0 view .LVU52
 231 0012 8230      		cpi r24,lo8(2)
 232 0014 01F4      		brne .L9
  50:quantum/process_keycode/process_tap_dance.c ****     }
 233               		.loc 1 50 9 is_stmt 1 view .LVU53
 234 0016 FB01      		movw r30,r22
 235               	.LVL25:
  50:quantum/process_keycode/process_tap_dance.c ****     }
 236               		.loc 1 50 9 is_stmt 0 view .LVU54
 237 0018 8281      		ldd r24,Z+2
 238 001a 9381      		ldd r25,Z+3
 239 001c 00C0      		rjmp .L12
 240               	.LVL26:
 241               	.L9:
 242               	/* epilogue start */
  52:quantum/process_keycode/process_tap_dance.c **** 
 243               		.loc 1 52 1 view .LVU55
 244 001e 0895      		ret
 245               		.cfi_endproc
 246               	.LFE26:
 248               		.section	.text.qk_tap_dance_dual_role_on_each_tap,"ax",@progbits
 249               	.global	qk_tap_dance_dual_role_on_each_tap
 251               	qk_tap_dance_dual_role_on_each_tap:
 252               	.LVL27:
 253               	.LFB27:
  54:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 254               		.loc 1 54 87 is_stmt 1 view -0
 255               		.cfi_startproc
  54:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 256               		.loc 1 54 87 is_stmt 0 view .LVU57
 257 0000 CF93      		push r28
 258               	.LCFI4:
 259               		.cfi_def_cfa_offset 3
 260               		.cfi_offset 28, -2
 261 0002 DF93      		push r29
 262               	.LCFI5:
 263               		.cfi_def_cfa_offset 4
 264               		.cfi_offset 29, -3
 265               	/* prologue: function */
 266               	/* frame size = 0 */
 267               	/* stack size = 2 */
 268               	.L__stack_usage = 2
 269 0004 EC01      		movw r28,r24
  55:quantum/process_keycode/process_tap_dance.c **** 
 270               		.loc 1 55 5 is_stmt 1 view .LVU58
 271               	.LVL28:
  57:quantum/process_keycode/process_tap_dance.c ****         layer_move(pair->layer);
 272               		.loc 1 57 5 view .LVU59
  57:quantum/process_keycode/process_tap_dance.c ****         layer_move(pair->layer);
 273               		.loc 1 57 8 is_stmt 0 view .LVU60
 274 0006 8881      		ld r24,Y
 275               	.LVL29:
  57:quantum/process_keycode/process_tap_dance.c ****         layer_move(pair->layer);
 276               		.loc 1 57 8 view .LVU61
 277 0008 8230      		cpi r24,lo8(2)
 278 000a 01F4      		brne .L13
  58:quantum/process_keycode/process_tap_dance.c ****         state->finished = true;
 279               		.loc 1 58 9 is_stmt 1 view .LVU62
 280 000c FB01      		movw r30,r22
 281 000e 8281      		ldd r24,Z+2
 282 0010 0E94 0000 		call layer_move
 283               	.LVL30:
  59:quantum/process_keycode/process_tap_dance.c ****     }
 284               		.loc 1 59 9 view .LVU63
  59:quantum/process_keycode/process_tap_dance.c ****     }
 285               		.loc 1 59 25 is_stmt 0 view .LVU64
 286 0014 81E0      		ldi r24,lo8(1)
 287 0016 8B87      		std Y+11,r24
 288               	.L13:
 289               	/* epilogue start */
  61:quantum/process_keycode/process_tap_dance.c **** 
 290               		.loc 1 61 1 view .LVU65
 291 0018 DF91      		pop r29
 292 001a CF91      		pop r28
 293               	.LVL31:
  61:quantum/process_keycode/process_tap_dance.c **** 
 294               		.loc 1 61 1 view .LVU66
 295 001c 0895      		ret
 296               		.cfi_endproc
 297               	.LFE27:
 299               		.section	.text.qk_tap_dance_dual_role_finished,"ax",@progbits
 300               	.global	qk_tap_dance_dual_role_finished
 302               	qk_tap_dance_dual_role_finished:
 303               	.LVL32:
 304               	.LFB28:
  63:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 305               		.loc 1 63 84 is_stmt 1 view -0
 306               		.cfi_startproc
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
  63:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 311               		.loc 1 63 84 is_stmt 0 view .LVU68
 312 0000 DB01      		movw r26,r22
  64:quantum/process_keycode/process_tap_dance.c **** 
 313               		.loc 1 64 5 is_stmt 1 view .LVU69
 314               	.LVL33:
  66:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc);
 315               		.loc 1 66 5 view .LVU70
  66:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc);
 316               		.loc 1 66 14 is_stmt 0 view .LVU71
 317 0002 FC01      		movw r30,r24
 318 0004 8081      		ld r24,Z
 319               	.LVL34:
  66:quantum/process_keycode/process_tap_dance.c ****         register_code16(pair->kc);
 320               		.loc 1 66 8 view .LVU72
 321 0006 8130      		cpi r24,lo8(1)
 322 0008 01F4      		brne .L16
  67:quantum/process_keycode/process_tap_dance.c ****     } else if (state->count == 2) {
 323               		.loc 1 67 9 is_stmt 1 view .LVU73
 324 000a 8D91      		ld r24,X+
 325 000c 9C91      		ld r25,X
 326 000e 0C94 0000 		jmp register_code16
 327               	.LVL35:
 328               	.L16:
  68:quantum/process_keycode/process_tap_dance.c ****         pair->layer_function(pair->layer);
 329               		.loc 1 68 12 view .LVU74
  68:quantum/process_keycode/process_tap_dance.c ****         pair->layer_function(pair->layer);
 330               		.loc 1 68 15 is_stmt 0 view .LVU75
 331 0012 8230      		cpi r24,lo8(2)
 332 0014 01F4      		brne .L15
  69:quantum/process_keycode/process_tap_dance.c ****     }
 333               		.loc 1 69 9 is_stmt 1 view .LVU76
 334 0016 1396      		adiw r26,3
 335 0018 ED91      		ld r30,X+
 336 001a FC91      		ld r31,X
 337 001c 1497      		sbiw r26,3+1
 338               	.LVL36:
  69:quantum/process_keycode/process_tap_dance.c ****     }
 339               		.loc 1 69 9 is_stmt 0 view .LVU77
 340 001e 1296      		adiw r26,2
 341 0020 8C91      		ld r24,X
 342 0022 0994      		ijmp
 343               	.LVL37:
 344               	.L15:
 345               	/* epilogue start */
  71:quantum/process_keycode/process_tap_dance.c **** 
 346               		.loc 1 71 1 view .LVU78
 347 0024 0895      		ret
 348               		.cfi_endproc
 349               	.LFE28:
 351               		.section	.text.qk_tap_dance_dual_role_reset,"ax",@progbits
 352               	.global	qk_tap_dance_dual_role_reset
 354               	qk_tap_dance_dual_role_reset:
 355               	.LVL38:
 356               	.LFB29:
  73:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_dual_role_t *pair = (qk_tap_dance_dual_role_t *)user_data;
 357               		.loc 1 73 81 is_stmt 1 view -0
 358               		.cfi_startproc
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
  74:quantum/process_keycode/process_tap_dance.c **** 
 363               		.loc 1 74 5 view .LVU80
  76:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc);
 364               		.loc 1 76 5 view .LVU81
  76:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc);
 365               		.loc 1 76 8 is_stmt 0 view .LVU82
 366 0000 FC01      		movw r30,r24
 367 0002 8081      		ld r24,Z
 368               	.LVL39:
  76:quantum/process_keycode/process_tap_dance.c ****         unregister_code16(pair->kc);
 369               		.loc 1 76 8 view .LVU83
 370 0004 8130      		cpi r24,lo8(1)
 371 0006 01F4      		brne .L18
  77:quantum/process_keycode/process_tap_dance.c ****     }
 372               		.loc 1 77 9 is_stmt 1 view .LVU84
 373 0008 FB01      		movw r30,r22
 374               	.LVL40:
  77:quantum/process_keycode/process_tap_dance.c ****     }
 375               		.loc 1 77 9 is_stmt 0 view .LVU85
 376 000a 8081      		ld r24,Z
 377 000c 9181      		ldd r25,Z+1
 378 000e 0C94 0000 		jmp unregister_code16
 379               	.LVL41:
 380               	.L18:
 381               	/* epilogue start */
  79:quantum/process_keycode/process_tap_dance.c **** 
 382               		.loc 1 79 1 view .LVU86
 383 0012 0895      		ret
 384               		.cfi_endproc
 385               	.LFE29:
 387               		.section	.text.reset_tap_dance,"ax",@progbits
 388               	.global	reset_tap_dance
 390               	reset_tap_dance:
 391               	.LVL42:
 392               	.LFB37:
  97:quantum/process_keycode/process_tap_dance.c **** 
  98:quantum/process_keycode/process_tap_dance.c **** static inline void process_tap_dance_action_on_reset(qk_tap_dance_action_t *action) {
  99:quantum/process_keycode/process_tap_dance.c ****     _process_tap_dance_action_fn(&action->state, action->user_data, action->fn.on_reset);
 100:quantum/process_keycode/process_tap_dance.c ****     del_mods(action->state.oneshot_mods);
 101:quantum/process_keycode/process_tap_dance.c ****     del_weak_mods(action->state.weak_mods);
 102:quantum/process_keycode/process_tap_dance.c ****     send_keyboard_report();
 103:quantum/process_keycode/process_tap_dance.c **** }
 104:quantum/process_keycode/process_tap_dance.c **** 
 105:quantum/process_keycode/process_tap_dance.c **** void preprocess_tap_dance(uint16_t keycode, keyrecord_t *record) {
 106:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 107:quantum/process_keycode/process_tap_dance.c **** 
 108:quantum/process_keycode/process_tap_dance.c ****     if (!record->event.pressed) return;
 109:quantum/process_keycode/process_tap_dance.c **** 
 110:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1) return;
 111:quantum/process_keycode/process_tap_dance.c **** 
 112:quantum/process_keycode/process_tap_dance.c ****     for (int i = 0; i <= highest_td; i++) {
 113:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 114:quantum/process_keycode/process_tap_dance.c ****         if (action->state.count) {
 115:quantum/process_keycode/process_tap_dance.c ****             if (keycode == action->state.keycode && keycode == last_td) continue;
 116:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 117:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 118:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 119:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 120:quantum/process_keycode/process_tap_dance.c **** 
 121:quantum/process_keycode/process_tap_dance.c ****             // Tap dance actions can leave some weak mods active (e.g., if the tap dance is mapped 
 122:quantum/process_keycode/process_tap_dance.c ****             // modifiers), but these weak mods should not affect the keypress which interrupted the
 123:quantum/process_keycode/process_tap_dance.c ****             clear_weak_mods();
 124:quantum/process_keycode/process_tap_dance.c ****         }
 125:quantum/process_keycode/process_tap_dance.c ****     }
 126:quantum/process_keycode/process_tap_dance.c **** }
 127:quantum/process_keycode/process_tap_dance.c **** 
 128:quantum/process_keycode/process_tap_dance.c **** bool process_tap_dance(uint16_t keycode, keyrecord_t *record) {
 129:quantum/process_keycode/process_tap_dance.c ****     uint16_t               idx = keycode - QK_TAP_DANCE;
 130:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 131:quantum/process_keycode/process_tap_dance.c **** 
 132:quantum/process_keycode/process_tap_dance.c ****     switch (keycode) {
 133:quantum/process_keycode/process_tap_dance.c ****         case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 134:quantum/process_keycode/process_tap_dance.c ****             if ((int16_t)idx > highest_td) highest_td = idx;
 135:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 136:quantum/process_keycode/process_tap_dance.c **** 
 137:quantum/process_keycode/process_tap_dance.c ****             action->state.pressed = record->event.pressed;
 138:quantum/process_keycode/process_tap_dance.c ****             if (record->event.pressed) {
 139:quantum/process_keycode/process_tap_dance.c ****                 action->state.keycode = keycode;
 140:quantum/process_keycode/process_tap_dance.c ****                 action->state.count++;
 141:quantum/process_keycode/process_tap_dance.c ****                 action->state.timer = timer_read();
 142:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
 143:quantum/process_keycode/process_tap_dance.c ****                 action->state.oneshot_mods = get_oneshot_mods();
 144:quantum/process_keycode/process_tap_dance.c **** #else
 145:quantum/process_keycode/process_tap_dance.c ****                 action->state.oneshot_mods = 0;
 146:quantum/process_keycode/process_tap_dance.c **** #endif
 147:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods = get_mods();
 148:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods |= get_weak_mods();
 149:quantum/process_keycode/process_tap_dance.c ****                 process_tap_dance_action_on_each_tap(action);
 150:quantum/process_keycode/process_tap_dance.c **** 
 151:quantum/process_keycode/process_tap_dance.c ****                 last_td = keycode;
 152:quantum/process_keycode/process_tap_dance.c ****             } else {
 153:quantum/process_keycode/process_tap_dance.c ****                 if (action->state.count && action->state.finished) {
 154:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 155:quantum/process_keycode/process_tap_dance.c ****                 }
 156:quantum/process_keycode/process_tap_dance.c ****             }
 157:quantum/process_keycode/process_tap_dance.c **** 
 158:quantum/process_keycode/process_tap_dance.c ****             break;
 159:quantum/process_keycode/process_tap_dance.c ****     }
 160:quantum/process_keycode/process_tap_dance.c **** 
 161:quantum/process_keycode/process_tap_dance.c ****     return true;
 162:quantum/process_keycode/process_tap_dance.c **** }
 163:quantum/process_keycode/process_tap_dance.c **** 
 164:quantum/process_keycode/process_tap_dance.c **** void matrix_scan_tap_dance() {
 165:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1) return;
 166:quantum/process_keycode/process_tap_dance.c ****     uint16_t tap_user_defined;
 167:quantum/process_keycode/process_tap_dance.c **** 
 168:quantum/process_keycode/process_tap_dance.c ****     for (uint8_t i = 0; i <= highest_td; i++) {
 169:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 170:quantum/process_keycode/process_tap_dance.c ****         if (action->custom_tapping_term > 0) {
 171:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 172:quantum/process_keycode/process_tap_dance.c ****         } else {
 173:quantum/process_keycode/process_tap_dance.c **** #ifdef TAPPING_TERM_PER_KEY
 174:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = get_tapping_term(action->state.keycode, NULL);
 175:quantum/process_keycode/process_tap_dance.c **** #else
 176:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = TAPPING_TERM;
 177:quantum/process_keycode/process_tap_dance.c **** #endif
 178:quantum/process_keycode/process_tap_dance.c ****         }
 179:quantum/process_keycode/process_tap_dance.c ****         if (action->state.count && timer_elapsed(action->state.timer) > tap_user_defined) {
 180:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 181:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 182:quantum/process_keycode/process_tap_dance.c ****         }
 183:quantum/process_keycode/process_tap_dance.c ****     }
 184:quantum/process_keycode/process_tap_dance.c **** }
 185:quantum/process_keycode/process_tap_dance.c **** 
 186:quantum/process_keycode/process_tap_dance.c **** void reset_tap_dance(qk_tap_dance_state_t *state) {
 393               		.loc 1 186 51 is_stmt 1 view -0
 394               		.cfi_startproc
 395               		.loc 1 186 51 is_stmt 0 view .LVU88
 396 0000 EF92      		push r14
 397               	.LCFI6:
 398               		.cfi_def_cfa_offset 3
 399               		.cfi_offset 14, -2
 400 0002 FF92      		push r15
 401               	.LCFI7:
 402               		.cfi_def_cfa_offset 4
 403               		.cfi_offset 15, -3
 404 0004 0F93      		push r16
 405               	.LCFI8:
 406               		.cfi_def_cfa_offset 5
 407               		.cfi_offset 16, -4
 408 0006 1F93      		push r17
 409               	.LCFI9:
 410               		.cfi_def_cfa_offset 6
 411               		.cfi_offset 17, -5
 412 0008 CF93      		push r28
 413               	.LCFI10:
 414               		.cfi_def_cfa_offset 7
 415               		.cfi_offset 28, -6
 416 000a DF93      		push r29
 417               	.LCFI11:
 418               		.cfi_def_cfa_offset 8
 419               		.cfi_offset 29, -7
 420               	/* prologue: function */
 421               	/* frame size = 0 */
 422               	/* stack size = 6 */
 423               	.L__stack_usage = 6
 424 000c EC01      		movw r28,r24
 187:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 425               		.loc 1 187 5 is_stmt 1 view .LVU89
 188:quantum/process_keycode/process_tap_dance.c **** 
 189:quantum/process_keycode/process_tap_dance.c ****     if (state->pressed) return;
 426               		.loc 1 189 5 view .LVU90
 427               		.loc 1 189 8 is_stmt 0 view .LVU91
 428 000e 8A85      		ldd r24,Y+10
 429               	.LVL43:
 430               		.loc 1 189 8 view .LVU92
 431 0010 8111      		cpse r24,__zero_reg__
 432 0012 00C0      		rjmp .L20
 190:quantum/process_keycode/process_tap_dance.c **** 
 191:quantum/process_keycode/process_tap_dance.c ****     action = &tap_dance_actions[state->keycode - QK_TAP_DANCE];
 433               		.loc 1 191 5 is_stmt 1 view .LVU93
 434               		.loc 1 191 48 is_stmt 0 view .LVU94
 435 0014 EB80      		ldd r14,Y+3
 436 0016 FC80      		ldd r15,Y+4
 437 0018 87E5      		ldi r24,87
 438 001a F81A      		sub r15,r24
 439               	.LVL44:
 192:quantum/process_keycode/process_tap_dance.c **** 
 193:quantum/process_keycode/process_tap_dance.c ****     process_tap_dance_action_on_reset(action);
 440               		.loc 1 193 5 is_stmt 1 view .LVU95
 441               	.LBB12:
 442               	.LBI12:
  98:quantum/process_keycode/process_tap_dance.c ****     _process_tap_dance_action_fn(&action->state, action->user_data, action->fn.on_reset);
 443               		.loc 1 98 20 view .LVU96
 444               	.LBB13:
  99:quantum/process_keycode/process_tap_dance.c ****     del_mods(action->state.oneshot_mods);
 445               		.loc 1 99 5 view .LVU97
 446 001c 26E1      		ldi r18,lo8(22)
 447 001e 2E9D      		mul r18,r14
 448 0020 C001      		movw r24,r0
 449 0022 2F9D      		mul r18,r15
 450 0024 900D      		add r25,r0
 451 0026 1124      		clr __zero_reg__
 452 0028 DC01      		movw r26,r24
 453 002a A050      		subi r26,lo8(-(tap_dance_actions))
 454 002c B040      		sbci r27,hi8(-(tap_dance_actions))
 455 002e 1496      		adiw r26,4
 456 0030 ED91      		ld r30,X+
 457 0032 FC91      		ld r31,X
 458 0034 1597      		sbiw r26,4+1
 459               	.LVL45:
 460               	.LBB14:
 461               	.LBI14:
  81:quantum/process_keycode/process_tap_dance.c ****     if (fn) {
 462               		.loc 1 81 20 view .LVU98
 463               	.LBB15:
  82:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
 464               		.loc 1 82 5 view .LVU99
  82:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
 465               		.loc 1 82 8 is_stmt 0 view .LVU100
 466 0036 3097      		sbiw r30,0
 467 0038 01F0      		breq .L22
  83:quantum/process_keycode/process_tap_dance.c ****     }
 468               		.loc 1 83 9 is_stmt 1 view .LVU101
 469 003a 5496      		adiw r26,20
 470 003c 6D91      		ld r22,X+
 471 003e 7C91      		ld r23,X
 472 0040 8050      		subi r24,lo8(-(tap_dance_actions+6))
 473 0042 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 474 0044 0995      		icall
 475               	.LVL46:
 476               	.L22:
  83:quantum/process_keycode/process_tap_dance.c ****     }
 477               		.loc 1 83 9 is_stmt 0 view .LVU102
 478               	.LBE15:
 479               	.LBE14:
 100:quantum/process_keycode/process_tap_dance.c ****     del_weak_mods(action->state.weak_mods);
 480               		.loc 1 100 5 is_stmt 1 view .LVU103
 481 0046 86E1      		ldi r24,lo8(22)
 482 0048 8E9D      		mul r24,r14
 483 004a 8001      		movw r16,r0
 484 004c 8F9D      		mul r24,r15
 485 004e 100D      		add r17,r0
 486 0050 1124      		clr __zero_reg__
 487 0052 0050      		subi r16,lo8(-(tap_dance_actions))
 488 0054 1040      		sbci r17,hi8(-(tap_dance_actions))
 489 0056 F801      		movw r30,r16
 490 0058 8781      		ldd r24,Z+7
 491 005a 0E94 0000 		call del_mods
 492               	.LVL47:
 101:quantum/process_keycode/process_tap_dance.c ****     send_keyboard_report();
 493               		.loc 1 101 5 view .LVU104
 494 005e F801      		movw r30,r16
 495 0060 8085      		ldd r24,Z+8
 496 0062 0E94 0000 		call del_weak_mods
 497               	.LVL48:
 102:quantum/process_keycode/process_tap_dance.c **** }
 498               		.loc 1 102 5 view .LVU105
 499 0066 0E94 0000 		call send_keyboard_report
 500               	.LVL49:
 102:quantum/process_keycode/process_tap_dance.c **** }
 501               		.loc 1 102 5 is_stmt 0 view .LVU106
 502               	.LBE13:
 503               	.LBE12:
 194:quantum/process_keycode/process_tap_dance.c **** 
 195:quantum/process_keycode/process_tap_dance.c ****     state->count                = 0;
 504               		.loc 1 195 5 is_stmt 1 view .LVU107
 505               		.loc 1 195 33 is_stmt 0 view .LVU108
 506 006a 1882      		st Y,__zero_reg__
 196:quantum/process_keycode/process_tap_dance.c ****     state->interrupted          = false;
 507               		.loc 1 196 5 is_stmt 1 view .LVU109
 508               		.loc 1 196 33 is_stmt 0 view .LVU110
 509 006c 1986      		std Y+9,__zero_reg__
 197:quantum/process_keycode/process_tap_dance.c ****     state->finished             = false;
 510               		.loc 1 197 5 is_stmt 1 view .LVU111
 511               		.loc 1 197 33 is_stmt 0 view .LVU112
 512 006e 1B86      		std Y+11,__zero_reg__
 198:quantum/process_keycode/process_tap_dance.c ****     state->interrupting_keycode = 0;
 513               		.loc 1 198 5 is_stmt 1 view .LVU113
 514               		.loc 1 198 33 is_stmt 0 view .LVU114
 515 0070 1E82      		std Y+6,__zero_reg__
 516 0072 1D82      		std Y+5,__zero_reg__
 199:quantum/process_keycode/process_tap_dance.c ****     last_td                     = 0;
 517               		.loc 1 199 5 is_stmt 1 view .LVU115
 518               		.loc 1 199 33 is_stmt 0 view .LVU116
 519 0074 1092 0000 		sts last_td+1,__zero_reg__
 520 0078 1092 0000 		sts last_td,__zero_reg__
 521               	.LVL50:
 522               	.L20:
 523               	/* epilogue start */
 200:quantum/process_keycode/process_tap_dance.c **** }
 524               		.loc 1 200 1 view .LVU117
 525 007c DF91      		pop r29
 526 007e CF91      		pop r28
 527               	.LVL51:
 528               		.loc 1 200 1 view .LVU118
 529 0080 1F91      		pop r17
 530 0082 0F91      		pop r16
 531 0084 FF90      		pop r15
 532 0086 EF90      		pop r14
 533 0088 0895      		ret
 534               		.cfi_endproc
 535               	.LFE37:
 537               		.section	.text.preprocess_tap_dance,"ax",@progbits
 538               	.global	preprocess_tap_dance
 540               	preprocess_tap_dance:
 541               	.LVL52:
 542               	.LFB34:
 105:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 543               		.loc 1 105 66 is_stmt 1 view -0
 544               		.cfi_startproc
 105:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 545               		.loc 1 105 66 is_stmt 0 view .LVU120
 546 0000 DF92      		push r13
 547               	.LCFI12:
 548               		.cfi_def_cfa_offset 3
 549               		.cfi_offset 13, -2
 550 0002 EF92      		push r14
 551               	.LCFI13:
 552               		.cfi_def_cfa_offset 4
 553               		.cfi_offset 14, -3
 554 0004 FF92      		push r15
 555               	.LCFI14:
 556               		.cfi_def_cfa_offset 5
 557               		.cfi_offset 15, -4
 558 0006 0F93      		push r16
 559               	.LCFI15:
 560               		.cfi_def_cfa_offset 6
 561               		.cfi_offset 16, -5
 562 0008 1F93      		push r17
 563               	.LCFI16:
 564               		.cfi_def_cfa_offset 7
 565               		.cfi_offset 17, -6
 566 000a CF93      		push r28
 567               	.LCFI17:
 568               		.cfi_def_cfa_offset 8
 569               		.cfi_offset 28, -7
 570 000c DF93      		push r29
 571               	.LCFI18:
 572               		.cfi_def_cfa_offset 9
 573               		.cfi_offset 29, -8
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 7 */
 577               	.L__stack_usage = 7
 578 000e 7C01      		movw r14,r24
 106:quantum/process_keycode/process_tap_dance.c **** 
 579               		.loc 1 106 5 is_stmt 1 view .LVU121
 108:quantum/process_keycode/process_tap_dance.c **** 
 580               		.loc 1 108 5 view .LVU122
 108:quantum/process_keycode/process_tap_dance.c **** 
 581               		.loc 1 108 8 is_stmt 0 view .LVU123
 582 0010 FB01      		movw r30,r22
 583 0012 8281      		ldd r24,Z+2
 584               	.LVL53:
 108:quantum/process_keycode/process_tap_dance.c **** 
 585               		.loc 1 108 8 view .LVU124
 586 0014 8823      		tst r24
 587 0016 01F0      		breq .L26
 110:quantum/process_keycode/process_tap_dance.c **** 
 588               		.loc 1 110 5 is_stmt 1 view .LVU125
 110:quantum/process_keycode/process_tap_dance.c **** 
 589               		.loc 1 110 8 is_stmt 0 view .LVU126
 590 0018 8091 0000 		lds r24,highest_td
 591 001c 8F3F      		cpi r24,lo8(-1)
 592 001e 01F0      		breq .L26
 593 0020 C0E0      		ldi r28,lo8(tap_dance_actions)
 594 0022 D0E0      		ldi r29,hi8(tap_dance_actions)
 595               	.LBB19:
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 596               		.loc 1 112 14 view .LVU127
 597 0024 10E0      		ldi r17,0
 598 0026 00E0      		ldi r16,0
 116:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 599               		.loc 1 116 48 view .LVU128
 600 0028 DD24      		clr r13
 601 002a D394      		inc r13
 602               	.LVL54:
 603               	.L29:
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 604               		.loc 1 112 21 is_stmt 1 discriminator 1 view .LVU129
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 605               		.loc 1 112 23 is_stmt 0 discriminator 1 view .LVU130
 606 002c 8091 0000 		lds r24,highest_td
 607 0030 082E      		mov __tmp_reg__,r24
 608 0032 000C      		lsl r0
 609 0034 990B      		sbc r25,r25
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 610               		.loc 1 112 5 discriminator 1 view .LVU131
 611 0036 8017      		cp r24,r16
 612 0038 9107      		cpc r25,r17
 613 003a 04F4      		brge .L33
 614               	.LVL55:
 615               	.L26:
 616               	/* epilogue start */
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 617               		.loc 1 112 5 discriminator 1 view .LVU132
 618               	.LBE19:
 126:quantum/process_keycode/process_tap_dance.c **** 
 619               		.loc 1 126 1 view .LVU133
 620 003c DF91      		pop r29
 621 003e CF91      		pop r28
 622 0040 1F91      		pop r17
 623 0042 0F91      		pop r16
 624 0044 FF90      		pop r15
 625 0046 EF90      		pop r14
 626               	.LVL56:
 126:quantum/process_keycode/process_tap_dance.c **** 
 627               		.loc 1 126 1 view .LVU134
 628 0048 DF90      		pop r13
 629 004a 0895      		ret
 630               	.LVL57:
 631               	.L33:
 632               	.LBB22:
 113:quantum/process_keycode/process_tap_dance.c ****         if (action->state.count) {
 633               		.loc 1 113 9 is_stmt 1 view .LVU135
 114:quantum/process_keycode/process_tap_dance.c ****             if (keycode == action->state.keycode && keycode == last_td) continue;
 634               		.loc 1 114 9 view .LVU136
 114:quantum/process_keycode/process_tap_dance.c ****             if (keycode == action->state.keycode && keycode == last_td) continue;
 635               		.loc 1 114 12 is_stmt 0 view .LVU137
 636 004c 8E81      		ldd r24,Y+6
 637 004e 8823      		tst r24
 638 0050 01F0      		breq .L30
 115:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 639               		.loc 1 115 13 is_stmt 1 view .LVU138
 115:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 640               		.loc 1 115 16 is_stmt 0 view .LVU139
 641 0052 8985      		ldd r24,Y+9
 642 0054 9A85      		ldd r25,Y+10
 643 0056 8E15      		cp r24,r14
 644 0058 9F05      		cpc r25,r15
 645 005a 01F4      		brne .L31
 115:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupted          = true;
 646               		.loc 1 115 50 discriminator 1 view .LVU140
 647 005c 8091 0000 		lds r24,last_td
 648 0060 9091 0000 		lds r25,last_td+1
 649 0064 8E15      		cp r24,r14
 650 0066 9F05      		cpc r25,r15
 651 0068 01F0      		breq .L30
 652               	.L31:
 116:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 653               		.loc 1 116 13 is_stmt 1 view .LVU141
 116:quantum/process_keycode/process_tap_dance.c ****             action->state.interrupting_keycode = keycode;
 654               		.loc 1 116 48 is_stmt 0 view .LVU142
 655 006a DF86      		std Y+15,r13
 117:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 656               		.loc 1 117 13 is_stmt 1 view .LVU143
 117:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 657               		.loc 1 117 48 is_stmt 0 view .LVU144
 658 006c FC86      		std Y+12,r15
 659 006e EB86      		std Y+11,r14
 118:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 660               		.loc 1 118 13 is_stmt 1 view .LVU145
 661               	.LVL58:
 662               	.LBB20:
 663               	.LBI20:
  89:quantum/process_keycode/process_tap_dance.c ****     if (action->state.finished) return;
 664               		.loc 1 89 20 view .LVU146
 665               	.LBB21:
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 666               		.loc 1 90 5 view .LVU147
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 667               		.loc 1 90 8 is_stmt 0 view .LVU148
 668 0070 8989      		ldd r24,Y+17
 669 0072 8111      		cpse r24,__zero_reg__
 670 0074 00C0      		rjmp .L32
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 671               		.loc 1 90 8 view .LVU149
 672 0076 CE01      		movw r24,r28
 673 0078 0E94 0000 		call process_tap_dance_action_on_dance_finished.part.0
 674               	.LVL59:
 675               	.L32:
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 676               		.loc 1 90 8 view .LVU150
 677               	.LBE21:
 678               	.LBE20:
 119:quantum/process_keycode/process_tap_dance.c **** 
 679               		.loc 1 119 13 is_stmt 1 view .LVU151
 680 007c CE01      		movw r24,r28
 681 007e 0696      		adiw r24,6
 682 0080 0E94 0000 		call reset_tap_dance
 683               	.LVL60:
 123:quantum/process_keycode/process_tap_dance.c ****         }
 684               		.loc 1 123 13 view .LVU152
 685 0084 0E94 0000 		call clear_weak_mods
 686               	.LVL61:
 687               	.L30:
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 688               		.loc 1 112 38 discriminator 2 view .LVU153
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 689               		.loc 1 112 39 is_stmt 0 discriminator 2 view .LVU154
 690 0088 0F5F      		subi r16,-1
 691 008a 1F4F      		sbci r17,-1
 692               	.LVL62:
 112:quantum/process_keycode/process_tap_dance.c ****         action = &tap_dance_actions[i];
 693               		.loc 1 112 39 discriminator 2 view .LVU155
 694 008c 6696      		adiw r28,22
 695 008e 00C0      		rjmp .L29
 696               	.LBE22:
 697               		.cfi_endproc
 698               	.LFE34:
 700               		.section	.text.process_tap_dance,"ax",@progbits
 701               	.global	process_tap_dance
 703               	process_tap_dance:
 704               	.LVL63:
 705               	.LFB35:
 128:quantum/process_keycode/process_tap_dance.c ****     uint16_t               idx = keycode - QK_TAP_DANCE;
 706               		.loc 1 128 63 is_stmt 1 view -0
 707               		.cfi_startproc
 128:quantum/process_keycode/process_tap_dance.c ****     uint16_t               idx = keycode - QK_TAP_DANCE;
 708               		.loc 1 128 63 is_stmt 0 view .LVU157
 709 0000 EF92      		push r14
 710               	.LCFI19:
 711               		.cfi_def_cfa_offset 3
 712               		.cfi_offset 14, -2
 713 0002 FF92      		push r15
 714               	.LCFI20:
 715               		.cfi_def_cfa_offset 4
 716               		.cfi_offset 15, -3
 717 0004 0F93      		push r16
 718               	.LCFI21:
 719               		.cfi_def_cfa_offset 5
 720               		.cfi_offset 16, -4
 721 0006 1F93      		push r17
 722               	.LCFI22:
 723               		.cfi_def_cfa_offset 6
 724               		.cfi_offset 17, -5
 725 0008 CF93      		push r28
 726               	.LCFI23:
 727               		.cfi_def_cfa_offset 7
 728               		.cfi_offset 28, -6
 729 000a DF93      		push r29
 730               	.LCFI24:
 731               		.cfi_def_cfa_offset 8
 732               		.cfi_offset 29, -7
 733               	/* prologue: function */
 734               	/* frame size = 0 */
 735               	/* stack size = 6 */
 736               	.L__stack_usage = 6
 737 000c 7C01      		movw r14,r24
 129:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 738               		.loc 1 129 5 is_stmt 1 view .LVU158
 129:quantum/process_keycode/process_tap_dance.c ****     qk_tap_dance_action_t *action;
 739               		.loc 1 129 28 is_stmt 0 view .LVU159
 740 000e 9755      		subi r25,87
 741               	.LVL64:
 130:quantum/process_keycode/process_tap_dance.c **** 
 742               		.loc 1 130 5 is_stmt 1 view .LVU160
 132:quantum/process_keycode/process_tap_dance.c ****         case QK_TAP_DANCE ... QK_TAP_DANCE_MAX:
 743               		.loc 1 132 5 view .LVU161
 744 0010 8F3F      		cpi r24,-1
 745 0012 9105      		cpc r25,__zero_reg__
 746 0014 01F0      		breq .+2
 747 0016 00F4      		brsh .L42
 134:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 748               		.loc 1 134 13 view .LVU162
 134:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 749               		.loc 1 134 30 is_stmt 0 view .LVU163
 750 0018 2091 0000 		lds r18,highest_td
 751 001c 022E      		mov __tmp_reg__,r18
 752 001e 000C      		lsl r0
 753 0020 330B      		sbc r19,r19
 134:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 754               		.loc 1 134 16 view .LVU164
 755 0022 2817      		cp r18,r24
 756 0024 3907      		cpc r19,r25
 757 0026 04F4      		brge .L43
 134:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 758               		.loc 1 134 44 is_stmt 1 discriminator 1 view .LVU165
 134:quantum/process_keycode/process_tap_dance.c ****             action = &tap_dance_actions[idx];
 759               		.loc 1 134 55 is_stmt 0 discriminator 1 view .LVU166
 760 0028 8093 0000 		sts highest_td,r24
 761               	.L43:
 135:quantum/process_keycode/process_tap_dance.c **** 
 762               		.loc 1 135 13 is_stmt 1 view .LVU167
 763               	.LVL65:
 137:quantum/process_keycode/process_tap_dance.c ****             if (record->event.pressed) {
 764               		.loc 1 137 13 view .LVU168
 137:quantum/process_keycode/process_tap_dance.c ****             if (record->event.pressed) {
 765               		.loc 1 137 50 is_stmt 0 view .LVU169
 766 002c FB01      		movw r30,r22
 767 002e 2281      		ldd r18,Z+2
 137:quantum/process_keycode/process_tap_dance.c ****             if (record->event.pressed) {
 768               		.loc 1 137 35 view .LVU170
 769 0030 36E1      		ldi r19,lo8(22)
 770 0032 389F      		mul r19,r24
 771 0034 8001      		movw r16,r0
 772 0036 399F      		mul r19,r25
 773 0038 100D      		add r17,r0
 774 003a 1124      		clr __zero_reg__
 775 003c E801      		movw r28,r16
 776 003e C050      		subi r28,lo8(-(tap_dance_actions))
 777 0040 D040      		sbci r29,hi8(-(tap_dance_actions))
 778 0042 288B      		std Y+16,r18
 138:quantum/process_keycode/process_tap_dance.c ****                 action->state.keycode = keycode;
 779               		.loc 1 138 13 is_stmt 1 view .LVU171
 138:quantum/process_keycode/process_tap_dance.c ****                 action->state.keycode = keycode;
 780               		.loc 1 138 16 is_stmt 0 view .LVU172
 781 0044 9281      		ldd r25,Z+2
 782 0046 8E81      		ldd r24,Y+6
 783               	.LVL66:
 138:quantum/process_keycode/process_tap_dance.c ****                 action->state.keycode = keycode;
 784               		.loc 1 138 16 view .LVU173
 785 0048 9923      		tst r25
 786 004a 01F0      		breq .L44
 139:quantum/process_keycode/process_tap_dance.c ****                 action->state.count++;
 787               		.loc 1 139 17 is_stmt 1 view .LVU174
 139:quantum/process_keycode/process_tap_dance.c ****                 action->state.count++;
 788               		.loc 1 139 39 is_stmt 0 view .LVU175
 789 004c FA86      		std Y+10,r15
 790 004e E986      		std Y+9,r14
 140:quantum/process_keycode/process_tap_dance.c ****                 action->state.timer = timer_read();
 791               		.loc 1 140 17 is_stmt 1 view .LVU176
 140:quantum/process_keycode/process_tap_dance.c ****                 action->state.timer = timer_read();
 792               		.loc 1 140 36 is_stmt 0 view .LVU177
 793 0050 8F5F      		subi r24,lo8(-(1))
 794 0052 8E83      		std Y+6,r24
 141:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
 795               		.loc 1 141 17 is_stmt 1 view .LVU178
 141:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
 796               		.loc 1 141 39 is_stmt 0 view .LVU179
 797 0054 0E94 0000 		call timer_read
 798               	.LVL67:
 141:quantum/process_keycode/process_tap_dance.c **** #ifndef NO_ACTION_ONESHOT
 799               		.loc 1 141 37 view .LVU180
 800 0058 9E87      		std Y+14,r25
 801 005a 8D87      		std Y+13,r24
 143:quantum/process_keycode/process_tap_dance.c **** #else
 802               		.loc 1 143 17 is_stmt 1 view .LVU181
 143:quantum/process_keycode/process_tap_dance.c **** #else
 803               		.loc 1 143 46 is_stmt 0 view .LVU182
 804 005c 0E94 0000 		call get_oneshot_mods
 805               	.LVL68:
 143:quantum/process_keycode/process_tap_dance.c **** #else
 806               		.loc 1 143 44 view .LVU183
 807 0060 8F83      		std Y+7,r24
 147:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods |= get_weak_mods();
 808               		.loc 1 147 17 is_stmt 1 view .LVU184
 147:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods |= get_weak_mods();
 809               		.loc 1 147 43 is_stmt 0 view .LVU185
 810 0062 0E94 0000 		call get_mods
 811               	.LVL69:
 147:quantum/process_keycode/process_tap_dance.c ****                 action->state.weak_mods |= get_weak_mods();
 812               		.loc 1 147 41 view .LVU186
 813 0066 8887      		std Y+8,r24
 148:quantum/process_keycode/process_tap_dance.c ****                 process_tap_dance_action_on_each_tap(action);
 814               		.loc 1 148 17 is_stmt 1 view .LVU187
 148:quantum/process_keycode/process_tap_dance.c ****                 process_tap_dance_action_on_each_tap(action);
 815               		.loc 1 148 44 is_stmt 0 view .LVU188
 816 0068 0E94 0000 		call get_weak_mods
 817               	.LVL70:
 148:quantum/process_keycode/process_tap_dance.c ****                 process_tap_dance_action_on_each_tap(action);
 818               		.loc 1 148 41 view .LVU189
 819 006c 9885      		ldd r25,Y+8
 820 006e 892B      		or r24,r25
 821 0070 8887      		std Y+8,r24
 149:quantum/process_keycode/process_tap_dance.c **** 
 822               		.loc 1 149 17 is_stmt 1 view .LVU190
 823               	.LVL71:
 824               	.LBB27:
 825               	.LBI27:
  87:quantum/process_keycode/process_tap_dance.c **** 
 826               		.loc 1 87 20 view .LVU191
 827               	.LBB28:
  87:quantum/process_keycode/process_tap_dance.c **** 
 828               		.loc 1 87 90 view .LVU192
 829 0072 E881      		ld r30,Y
 830 0074 F981      		ldd r31,Y+1
 831               	.LVL72:
 832               	.LBB29:
 833               	.LBI29:
  81:quantum/process_keycode/process_tap_dance.c ****     if (fn) {
 834               		.loc 1 81 20 view .LVU193
 835               	.LBB30:
  82:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
 836               		.loc 1 82 5 view .LVU194
  82:quantum/process_keycode/process_tap_dance.c ****         fn(state, user_data);
 837               		.loc 1 82 8 is_stmt 0 view .LVU195
 838 0076 3097      		sbiw r30,0
 839 0078 01F0      		breq .L45
  83:quantum/process_keycode/process_tap_dance.c ****     }
 840               		.loc 1 83 9 is_stmt 1 view .LVU196
 841 007a 6C89      		ldd r22,Y+20
 842 007c 7D89      		ldd r23,Y+21
 843 007e C801      		movw r24,r16
 844 0080 8050      		subi r24,lo8(-(tap_dance_actions+6))
 845 0082 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 846 0084 0995      		icall
 847               	.LVL73:
 848               	.L45:
  83:quantum/process_keycode/process_tap_dance.c ****     }
 849               		.loc 1 83 9 is_stmt 0 view .LVU197
 850               	.LBE30:
 851               	.LBE29:
 852               	.LBE28:
 853               	.LBE27:
 151:quantum/process_keycode/process_tap_dance.c ****             } else {
 854               		.loc 1 151 17 is_stmt 1 view .LVU198
 151:quantum/process_keycode/process_tap_dance.c ****             } else {
 855               		.loc 1 151 25 is_stmt 0 view .LVU199
 856 0086 F092 0000 		sts last_td+1,r15
 857 008a E092 0000 		sts last_td,r14
 858               	.LVL74:
 859               	.L42:
 161:quantum/process_keycode/process_tap_dance.c **** }
 860               		.loc 1 161 5 is_stmt 1 view .LVU200
 162:quantum/process_keycode/process_tap_dance.c **** 
 861               		.loc 1 162 1 is_stmt 0 view .LVU201
 862 008e 81E0      		ldi r24,lo8(1)
 863               	/* epilogue start */
 864 0090 DF91      		pop r29
 865 0092 CF91      		pop r28
 866 0094 1F91      		pop r17
 867 0096 0F91      		pop r16
 868 0098 FF90      		pop r15
 869 009a EF90      		pop r14
 870               	.LVL75:
 162:quantum/process_keycode/process_tap_dance.c **** 
 871               		.loc 1 162 1 view .LVU202
 872 009c 0895      		ret
 873               	.LVL76:
 874               	.L44:
 153:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 875               		.loc 1 153 17 is_stmt 1 view .LVU203
 153:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 876               		.loc 1 153 20 is_stmt 0 view .LVU204
 877 009e 8823      		tst r24
 878 00a0 01F0      		breq .L42
 153:quantum/process_keycode/process_tap_dance.c ****                     reset_tap_dance(&action->state);
 879               		.loc 1 153 41 discriminator 1 view .LVU205
 880 00a2 8989      		ldd r24,Y+17
 881 00a4 8823      		tst r24
 882 00a6 01F0      		breq .L42
 154:quantum/process_keycode/process_tap_dance.c ****                 }
 883               		.loc 1 154 21 is_stmt 1 view .LVU206
 884 00a8 C801      		movw r24,r16
 885 00aa 8050      		subi r24,lo8(-(tap_dance_actions+6))
 886 00ac 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 887 00ae 0E94 0000 		call reset_tap_dance
 888               	.LVL77:
 154:quantum/process_keycode/process_tap_dance.c ****                 }
 889               		.loc 1 154 21 is_stmt 0 view .LVU207
 890 00b2 00C0      		rjmp .L42
 891               		.cfi_endproc
 892               	.LFE35:
 894               		.section	.text.matrix_scan_tap_dance,"ax",@progbits
 895               	.global	matrix_scan_tap_dance
 897               	matrix_scan_tap_dance:
 898               	.LFB36:
 164:quantum/process_keycode/process_tap_dance.c ****     if (highest_td == -1) return;
 899               		.loc 1 164 30 is_stmt 1 view -0
 900               		.cfi_startproc
 901 0000 EF92      		push r14
 902               	.LCFI25:
 903               		.cfi_def_cfa_offset 3
 904               		.cfi_offset 14, -2
 905 0002 FF92      		push r15
 906               	.LCFI26:
 907               		.cfi_def_cfa_offset 4
 908               		.cfi_offset 15, -3
 909 0004 0F93      		push r16
 910               	.LCFI27:
 911               		.cfi_def_cfa_offset 5
 912               		.cfi_offset 16, -4
 913 0006 1F93      		push r17
 914               	.LCFI28:
 915               		.cfi_def_cfa_offset 6
 916               		.cfi_offset 17, -5
 917 0008 CF93      		push r28
 918               	.LCFI29:
 919               		.cfi_def_cfa_offset 7
 920               		.cfi_offset 28, -6
 921 000a DF93      		push r29
 922               	.LCFI30:
 923               		.cfi_def_cfa_offset 8
 924               		.cfi_offset 29, -7
 925               	/* prologue: function */
 926               	/* frame size = 0 */
 927               	/* stack size = 6 */
 928               	.L__stack_usage = 6
 165:quantum/process_keycode/process_tap_dance.c ****     uint16_t tap_user_defined;
 929               		.loc 1 165 5 view .LVU209
 165:quantum/process_keycode/process_tap_dance.c ****     uint16_t tap_user_defined;
 930               		.loc 1 165 8 is_stmt 0 view .LVU210
 931 000c 8091 0000 		lds r24,highest_td
 932               	.LBB35:
 168:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 933               		.loc 1 168 18 view .LVU211
 934 0010 10E0      		ldi r17,0
 935               	.LBB36:
 170:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 936               		.loc 1 170 19 view .LVU212
 937 0012 06E1      		ldi r16,lo8(22)
 938               	.LBE36:
 939               	.LBE35:
 165:quantum/process_keycode/process_tap_dance.c ****     uint16_t tap_user_defined;
 940               		.loc 1 165 8 view .LVU213
 941 0014 8F3F      		cpi r24,lo8(-1)
 942 0016 01F4      		brne .L57
 943               	.L56:
 944               	/* epilogue start */
 184:quantum/process_keycode/process_tap_dance.c **** 
 945               		.loc 1 184 1 view .LVU214
 946 0018 DF91      		pop r29
 947 001a CF91      		pop r28
 948 001c 1F91      		pop r17
 949 001e 0F91      		pop r16
 950 0020 FF90      		pop r15
 951 0022 EF90      		pop r14
 952 0024 0895      		ret
 953               	.LVL78:
 954               	.L63:
 955               	.LBB40:
 956               	.LBB39:
 169:quantum/process_keycode/process_tap_dance.c ****         if (action->custom_tapping_term > 0) {
 957               		.loc 1 169 9 is_stmt 1 view .LVU215
 170:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 958               		.loc 1 170 9 view .LVU216
 170:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 959               		.loc 1 170 19 is_stmt 0 view .LVU217
 960 0026 029F      		mul r16,r18
 961 0028 F001      		movw r30,r0
 962 002a 039F      		mul r16,r19
 963 002c F00D      		add r31,r0
 964 002e 1124      		clr __zero_reg__
 965 0030 E050      		subi r30,lo8(-(tap_dance_actions))
 966 0032 F040      		sbci r31,hi8(-(tap_dance_actions))
 967 0034 E288      		ldd r14,Z+18
 968 0036 F388      		ldd r15,Z+19
 170:quantum/process_keycode/process_tap_dance.c ****             tap_user_defined = action->custom_tapping_term;
 969               		.loc 1 170 12 view .LVU218
 970 0038 E114      		cp r14,__zero_reg__
 971 003a F104      		cpc r15,__zero_reg__
 972 003c 01F4      		brne .L58
 176:quantum/process_keycode/process_tap_dance.c **** #endif
 973               		.loc 1 176 30 view .LVU219
 974 003e 88EC      		ldi r24,lo8(-56)
 975 0040 E82E      		mov r14,r24
 976 0042 F12C      		mov r15,__zero_reg__
 977               	.L58:
 978               	.LVL79:
 179:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 979               		.loc 1 179 9 is_stmt 1 view .LVU220
 179:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 980               		.loc 1 179 26 is_stmt 0 view .LVU221
 981 0044 029F      		mul r16,r18
 982 0046 E001      		movw r28,r0
 983 0048 039F      		mul r16,r19
 984 004a D00D      		add r29,r0
 985 004c 1124      		clr __zero_reg__
 986 004e C050      		subi r28,lo8(-(tap_dance_actions))
 987 0050 D040      		sbci r29,hi8(-(tap_dance_actions))
 179:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 988               		.loc 1 179 12 view .LVU222
 989 0052 8E81      		ldd r24,Y+6
 990 0054 8823      		tst r24
 991 0056 01F0      		breq .L60
 179:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 992               		.loc 1 179 36 discriminator 1 view .LVU223
 993 0058 8D85      		ldd r24,Y+13
 994 005a 9E85      		ldd r25,Y+14
 995 005c 0E94 0000 		call timer_elapsed
 996               	.LVL80:
 179:quantum/process_keycode/process_tap_dance.c ****             process_tap_dance_action_on_dance_finished(action);
 997               		.loc 1 179 33 discriminator 1 view .LVU224
 998 0060 E816      		cp r14,r24
 999 0062 F906      		cpc r15,r25
 1000 0064 00F4      		brsh .L60
 1001 0066 109F      		mul r17,r16
 1002 0068 7001      		movw r14,r0
 1003 006a 1124      		clr __zero_reg__
 1004               	.LVL81:
 180:quantum/process_keycode/process_tap_dance.c ****             reset_tap_dance(&action->state);
 1005               		.loc 1 180 13 is_stmt 1 view .LVU225
 1006               	.LBB37:
 1007               	.LBI37:
  89:quantum/process_keycode/process_tap_dance.c ****     if (action->state.finished) return;
 1008               		.loc 1 89 20 view .LVU226
 1009               	.LBB38:
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 1010               		.loc 1 90 5 view .LVU227
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 1011               		.loc 1 90 8 is_stmt 0 view .LVU228
 1012 006c 8989      		ldd r24,Y+17
 1013 006e 8111      		cpse r24,__zero_reg__
 1014 0070 00C0      		rjmp .L62
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 1015               		.loc 1 90 8 view .LVU229
 1016 0072 C701      		movw r24,r14
 1017 0074 8050      		subi r24,lo8(-(tap_dance_actions))
 1018 0076 9040      		sbci r25,hi8(-(tap_dance_actions))
 1019 0078 0E94 0000 		call process_tap_dance_action_on_dance_finished.part.0
 1020               	.LVL82:
 1021               	.L62:
  90:quantum/process_keycode/process_tap_dance.c ****     action->state.finished = true;
 1022               		.loc 1 90 8 view .LVU230
 1023               	.LBE38:
 1024               	.LBE37:
 181:quantum/process_keycode/process_tap_dance.c ****         }
 1025               		.loc 1 181 13 is_stmt 1 view .LVU231
 1026 007c C701      		movw r24,r14
 1027 007e 8050      		subi r24,lo8(-(tap_dance_actions+6))
 1028 0080 9040      		sbci r25,hi8(-(tap_dance_actions+6))
 1029 0082 0E94 0000 		call reset_tap_dance
 1030               	.LVL83:
 1031               	.L60:
 181:quantum/process_keycode/process_tap_dance.c ****         }
 1032               		.loc 1 181 13 is_stmt 0 view .LVU232
 1033               	.LBE39:
 168:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 1034               		.loc 1 168 42 is_stmt 1 discriminator 2 view .LVU233
 168:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 1035               		.loc 1 168 43 is_stmt 0 discriminator 2 view .LVU234
 1036 0086 1F5F      		subi r17,lo8(-(1))
 1037               	.LVL84:
 1038               	.L57:
 168:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 1039               		.loc 1 168 25 is_stmt 1 discriminator 1 view .LVU235
 168:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 1040               		.loc 1 168 27 is_stmt 0 discriminator 1 view .LVU236
 1041 0088 212F      		mov r18,r17
 1042 008a 30E0      		ldi r19,0
 1043 008c 8091 0000 		lds r24,highest_td
 1044 0090 082E      		mov __tmp_reg__,r24
 1045 0092 000C      		lsl r0
 1046 0094 990B      		sbc r25,r25
 168:quantum/process_keycode/process_tap_dance.c ****         qk_tap_dance_action_t *action = &tap_dance_actions[i];
 1047               		.loc 1 168 5 discriminator 1 view .LVU237
 1048 0096 8217      		cp r24,r18
 1049 0098 9307      		cpc r25,r19
 1050 009a 04F4      		brge .L63
 1051 009c 00C0      		rjmp .L56
 1052               	.LBE40:
 1053               		.cfi_endproc
 1054               	.LFE36:
 1056               		.section	.data.highest_td,"aw"
 1059               	highest_td:
 1060 0000 FF        		.byte	-1
 1061               		.section	.bss.last_td,"aw",@nobits
 1064               	last_td:
 1065 0000 0000      		.zero	2
 1066               		.text
 1067               	.Letext0:
 1068               		.file 2 "c:\\qmk_msys\\mingw64\\avr\\include\\stdint.h"
 1069               		.file 3 "c:\\qmk_msys\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 1070               		.file 4 "tmk_core/common/keyboard.h"
 1071               		.file 5 "tmk_core/common/action.h"
 1072               		.file 6 "tmk_core/common/report.h"
 1073               		.file 7 "tmk_core/common/host.h"
 1074               		.file 8 "tmk_core/common/debug.h"
 1075               		.file 9 "quantum/keycode_config.h"
 1076               		.file 10 "tmk_core/common/timer.h"
 1077               		.file 11 "quantum/sequencer/sequencer.h"
 1078               		.file 12 "quantum/quantum_keycodes.h"
 1079               		.file 13 "quantum/keymap.h"
 1080               		.file 14 "quantum/color.h"
 1081               		.file 15 "quantum/rgb_matrix_types.h"
 1082               		.file 16 "quantum/rgb_matrix.h"
 1083               		.file 17 "tmk_core/common/action_layer.h"
 1084               		.file 18 "tmk_core/common/action_util.h"
 1085               		.file 19 "quantum/send_string.h"
 1086               		.file 20 "c:\\qmk_msys\\mingw64\\avr\\include\\stdlib.h"
 1087               		.file 21 "quantum/process_keycode/process_tap_dance.h"
 1088               		.file 22 "quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 process_tap_dance.c
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:4      *ABS*:000000000000003f __SREG__
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:12     .text.process_tap_dance_action_on_dance_finished.part.0:0000000000000000 process_tap_dance_action_on_dance_finished.part.0
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:97     .text.qk_tap_dance_pair_on_each_tap:0000000000000000 qk_tap_dance_pair_on_each_tap
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:149    .text.qk_tap_dance_pair_finished:0000000000000000 qk_tap_dance_pair_finished
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:200    .text.qk_tap_dance_pair_reset:0000000000000000 qk_tap_dance_pair_reset
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:251    .text.qk_tap_dance_dual_role_on_each_tap:0000000000000000 qk_tap_dance_dual_role_on_each_tap
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:302    .text.qk_tap_dance_dual_role_finished:0000000000000000 qk_tap_dance_dual_role_finished
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:354    .text.qk_tap_dance_dual_role_reset:0000000000000000 qk_tap_dance_dual_role_reset
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:390    .text.reset_tap_dance:0000000000000000 reset_tap_dance
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:1064   .bss.last_td:0000000000000000 last_td
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:540    .text.preprocess_tap_dance:0000000000000000 preprocess_tap_dance
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:1059   .data.highest_td:0000000000000000 highest_td
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:703    .text.process_tap_dance:0000000000000000 process_tap_dance
C:\Users\xue\AppData\Local\Temp\ccRPqGfH.s:897    .text.matrix_scan_tap_dance:0000000000000000 matrix_scan_tap_dance

UNDEFINED SYMBOLS
add_mods
add_weak_mods
send_keyboard_report
register_code16
unregister_code16
layer_move
tap_dance_actions
del_mods
del_weak_mods
clear_weak_mods
timer_read
get_oneshot_mods
get_mods
get_weak_mods
timer_elapsed
__do_copy_data
__do_clear_bss
