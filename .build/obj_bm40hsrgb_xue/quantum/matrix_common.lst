   1               		.file	"matrix_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB26:
  15               		.file 1 "quantum/matrix_common.c"
   1:quantum/matrix_common.c **** #include "quantum.h"
   2:quantum/matrix_common.c **** #include "matrix.h"
   3:quantum/matrix_common.c **** #include "debounce.h"
   4:quantum/matrix_common.c **** #include "wait.h"
   5:quantum/matrix_common.c **** #include "print.h"
   6:quantum/matrix_common.c **** #include "debug.h"
   7:quantum/matrix_common.c **** 
   8:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   9:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
  10:quantum/matrix_common.c **** #endif
  11:quantum/matrix_common.c **** 
  12:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  13:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  15:quantum/matrix_common.c **** 
  16:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  17:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  18:quantum/matrix_common.c **** #endif
  19:quantum/matrix_common.c **** 
  20:quantum/matrix_common.c **** // user-defined overridable functions
  21:quantum/matrix_common.c **** 
  22:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  23:quantum/matrix_common.c **** 
  24:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  25:quantum/matrix_common.c **** 
  26:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  16               		.loc 1 26 51 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 26 52 view .LVU1
  23               	/* epilogue start */
  24               		.loc 1 26 1 is_stmt 0 view .LVU2
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE26:
  29               		.set	matrix_init_user.localalias.0,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB24:
  22:quantum/matrix_common.c **** 
  35               		.loc 1 22 49 is_stmt 1 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  22:quantum/matrix_common.c **** 
  41               		.loc 1 22 51 view .LVU4
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE24:
  47               		.section	.text.matrix_scan_user,"ax",@progbits
  48               		.weak	matrix_scan_user
  50               	matrix_scan_user:
  51               	.LFB44:
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               	/* epilogue start */
  58 0000 0895      		ret
  59               		.cfi_endproc
  60               	.LFE44:
  62               		.section	.text.matrix_scan_kb,"ax",@progbits
  63               		.weak	matrix_scan_kb
  65               	matrix_scan_kb:
  66               	.LFB25:
  24:quantum/matrix_common.c **** 
  67               		.loc 1 24 49 view -0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  24:quantum/matrix_common.c **** 
  73               		.loc 1 24 51 view .LVU6
  74 0000 0C94 0000 		jmp matrix_scan_user
  75               	.LVL1:
  76               		.cfi_endproc
  77               	.LFE25:
  79               		.section	.text.matrix_rows,"ax",@progbits
  80               	.global	matrix_rows
  82               	matrix_rows:
  83               	.LFB28:
  27:quantum/matrix_common.c **** 
  28:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  29:quantum/matrix_common.c **** 
  30:quantum/matrix_common.c **** // helper functions
  31:quantum/matrix_common.c **** 
  32:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
  84               		.loc 1 32 34 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  90               		.loc 1 32 36 view .LVU8
  91               		.loc 1 32 1 is_stmt 0 view .LVU9
  92 0000 84E0      		ldi r24,lo8(4)
  93               	/* epilogue start */
  94 0002 0895      		ret
  95               		.cfi_endproc
  96               	.LFE28:
  98               		.section	.text.matrix_cols,"ax",@progbits
  99               	.global	matrix_cols
 101               	matrix_cols:
 102               	.LFB29:
  33:quantum/matrix_common.c **** 
  34:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 103               		.loc 1 34 34 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
 109               		.loc 1 34 36 view .LVU11
 110               		.loc 1 34 1 is_stmt 0 view .LVU12
 111 0000 8CE0      		ldi r24,lo8(12)
 112               	/* epilogue start */
 113 0002 0895      		ret
 114               		.cfi_endproc
 115               	.LFE29:
 117               		.section	.text.matrix_is_on,"ax",@progbits
 118               	.global	matrix_is_on
 120               	matrix_is_on:
 121               	.LVL2:
 122               	.LFB30:
  35:quantum/matrix_common.c **** 
  36:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 123               		.loc 1 36 52 is_stmt 1 view -0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
 129               		.loc 1 36 54 view .LVU14
 130               		.loc 1 36 68 is_stmt 0 view .LVU15
 131 0000 E82F      		mov r30,r24
 132 0002 F0E0      		ldi r31,0
 133 0004 EE0F      		lsl r30
 134 0006 FF1F      		rol r31
 135               	.LVL3:
 136               		.loc 1 36 68 view .LVU16
 137 0008 E050      		subi r30,lo8(-(matrix))
 138 000a F040      		sbci r31,hi8(-(matrix))
 139               		.loc 1 36 93 view .LVU17
 140 000c 21E0      		ldi r18,lo8(1)
 141 000e 30E0      		ldi r19,0
 142 0010 00C0      		rjmp 2f
 143               		1:
 144 0012 220F      		lsl r18
 145 0014 331F      		rol r19
 146               		2:
 147 0016 6A95      		dec r22
 148 0018 02F4      		brpl 1b
 149               		.loc 1 36 74 view .LVU18
 150 001a 8081      		ld r24,Z
 151 001c 9181      		ldd r25,Z+1
 152 001e 2823      		and r18,r24
 153 0020 3923      		and r19,r25
 154 0022 81E0      		ldi r24,lo8(1)
 155 0024 232B      		or r18,r19
 156 0026 01F4      		brne .L8
 157 0028 80E0      		ldi r24,0
 158               	.L8:
 159               	/* epilogue start */
 160               		.loc 1 36 1 view .LVU19
 161 002a 0895      		ret
 162               		.cfi_endproc
 163               	.LFE30:
 165               		.section	.text.matrix_get_row,"ax",@progbits
 166               	.global	matrix_get_row
 168               	matrix_get_row:
 169               	.LVL4:
 170               	.LFB31:
  37:quantum/matrix_common.c **** 
  38:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 171               		.loc 1 38 49 is_stmt 1 view -0
 172               		.cfi_startproc
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
  39:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  40:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  41:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  42:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  43:quantum/matrix_common.c **** #else
  44:quantum/matrix_common.c ****     return matrix[row];
 177               		.loc 1 44 5 view .LVU21
 178               		.loc 1 44 18 is_stmt 0 view .LVU22
 179 0000 E82F      		mov r30,r24
 180 0002 F0E0      		ldi r31,0
 181 0004 EE0F      		lsl r30
 182 0006 FF1F      		rol r31
 183               	.LVL5:
 184               		.loc 1 44 18 view .LVU23
 185 0008 E050      		subi r30,lo8(-(matrix))
 186 000a F040      		sbci r31,hi8(-(matrix))
  45:quantum/matrix_common.c **** #endif
  46:quantum/matrix_common.c **** }
 187               		.loc 1 46 1 view .LVU24
 188 000c 8081      		ld r24,Z
 189 000e 9181      		ldd r25,Z+1
 190               	/* epilogue start */
 191 0010 0895      		ret
 192               		.cfi_endproc
 193               	.LFE31:
 195               		.section	.text.matrix_is_modified,"ax",@progbits
 196               	.global	matrix_is_modified
 198               	matrix_is_modified:
 199               	.LFB32:
  47:quantum/matrix_common.c **** 
  48:quantum/matrix_common.c **** // Deprecated.
  49:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 200               		.loc 1 49 31 is_stmt 1 view -0
 201               		.cfi_startproc
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
  50:quantum/matrix_common.c ****     if (debounce_active()) return false;
 206               		.loc 1 50 5 view .LVU26
 207               		.loc 1 50 9 is_stmt 0 view .LVU27
 208 0000 0E94 0000 		call debounce_active
 209               	.LVL6:
  51:quantum/matrix_common.c ****     return true;
  52:quantum/matrix_common.c **** }
 210               		.loc 1 52 1 view .LVU28
 211 0004 91E0      		ldi r25,lo8(1)
 212 0006 8927      		eor r24,r25
 213               	/* epilogue start */
 214 0008 0895      		ret
 215               		.cfi_endproc
 216               	.LFE32:
 218               		.section	.text.matrix_print,"ax",@progbits
 219               	.global	matrix_print
 221               	matrix_print:
 222               	.LFB33:
  53:quantum/matrix_common.c **** 
  54:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  55:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  56:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  57:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  58:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  59:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  60:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  62:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  63:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  64:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  66:quantum/matrix_common.c **** #endif
  67:quantum/matrix_common.c **** 
  68:quantum/matrix_common.c **** void matrix_print(void) {
 223               		.loc 1 68 25 is_stmt 1 view -0
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
  69:quantum/matrix_common.c ****     print_matrix_header();
 229               		.loc 1 69 26 view .LVU30
  70:quantum/matrix_common.c **** 
  71:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 230               		.loc 1 71 5 view .LVU31
 231               		.loc 1 71 10 view .LVU32
 232               	.LVL7:
 233               		.loc 1 71 27 view .LVU33
 234               	/* epilogue start */
  72:quantum/matrix_common.c ****         print_hex8(row);
  73:quantum/matrix_common.c ****         print(": ");
  74:quantum/matrix_common.c ****         print_matrix_row(row);
  75:quantum/matrix_common.c ****         print("\n");
  76:quantum/matrix_common.c ****     }
  77:quantum/matrix_common.c **** }
 235               		.loc 1 77 1 is_stmt 0 view .LVU34
 236 0000 0895      		ret
 237               		.cfi_endproc
 238               	.LFE33:
 240               		.section	.text.matrix_key_count,"ax",@progbits
 241               	.global	matrix_key_count
 243               	matrix_key_count:
 244               	.LFB34:
  78:quantum/matrix_common.c **** 
  79:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 245               		.loc 1 79 32 is_stmt 1 view -0
 246               		.cfi_startproc
 247 0000 0F93      		push r16
 248               	.LCFI0:
 249               		.cfi_def_cfa_offset 3
 250               		.cfi_offset 16, -2
 251 0002 1F93      		push r17
 252               	.LCFI1:
 253               		.cfi_def_cfa_offset 4
 254               		.cfi_offset 17, -3
 255 0004 CF93      		push r28
 256               	.LCFI2:
 257               		.cfi_def_cfa_offset 5
 258               		.cfi_offset 28, -4
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 3 */
 262               	.L__stack_usage = 3
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 263               		.loc 1 80 5 view .LVU36
 264               	.LVL8:
  81:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 265               		.loc 1 81 5 view .LVU37
 266               	.LBB7:
 267               		.loc 1 81 10 view .LVU38
 268               		.loc 1 81 25 view .LVU39
 269 0006 00E0      		ldi r16,lo8(matrix)
 270 0008 10E0      		ldi r17,hi8(matrix)
 271               	.LBE7:
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 272               		.loc 1 80 13 is_stmt 0 view .LVU40
 273 000a C0E0      		ldi r28,0
 274               	.LVL9:
 275               	.L13:
 276               	.LBB10:
  82:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 277               		.loc 1 82 9 is_stmt 1 view .LVU41
 278               	.LBB8:
 279               	.LBI8:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 280               		.loc 1 38 21 view .LVU42
 281               	.LBB9:
  44:quantum/matrix_common.c **** #endif
 282               		.loc 1 44 5 view .LVU43
 283               	.LBE9:
 284               	.LBE8:
 285               		.loc 1 82 18 is_stmt 0 view .LVU44
 286 000c F801      		movw r30,r16
 287 000e 8191      		ld r24,Z+
 288 0010 9191      		ld r25,Z+
 289 0012 8F01      		movw r16,r30
 290 0014 0E94 0000 		call bitpop16
 291               	.LVL10:
 292               		.loc 1 82 15 view .LVU45
 293 0018 C80F      		add r28,r24
 294               	.LVL11:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 295               		.loc 1 81 42 is_stmt 1 view .LVU46
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 296               		.loc 1 81 25 view .LVU47
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 297               		.loc 1 81 5 is_stmt 0 view .LVU48
 298 001a F0E0      		ldi r31,hi8(matrix+8)
 299 001c 0030      		cpi r16,lo8(matrix+8)
 300 001e 1F07      		cpc r17,r31
 301 0020 01F4      		brne .L13
 302               	.LBE10:
  83:quantum/matrix_common.c ****     }
  84:quantum/matrix_common.c ****     return count;
 303               		.loc 1 84 5 is_stmt 1 view .LVU49
  85:quantum/matrix_common.c **** }
 304               		.loc 1 85 1 is_stmt 0 view .LVU50
 305 0022 8C2F      		mov r24,r28
 306               	/* epilogue start */
 307 0024 CF91      		pop r28
 308               	.LVL12:
 309               		.loc 1 85 1 view .LVU51
 310 0026 1F91      		pop r17
 311 0028 0F91      		pop r16
 312 002a 0895      		ret
 313               		.cfi_endproc
 314               	.LFE34:
 316               		.section	.text.matrix_io_delay,"ax",@progbits
 317               		.weak	matrix_io_delay
 319               	matrix_io_delay:
 320               	.LFB35:
  86:quantum/matrix_common.c **** 
  87:quantum/matrix_common.c **** /*　`matrix_io_delay ()` exists for backwards compatibility. From now on, use matrix_output_unsele
  88:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 321               		.loc 1 88 50 is_stmt 1 view -0
 322               		.cfi_startproc
 323               	/* prologue: function */
 324               	/* frame size = 0 */
 325               	/* stack size = 0 */
 326               	.L__stack_usage = 0
 327               		.loc 1 88 52 view .LVU53
 328               	.LVL13:
 329               	.LBB11:
 330               	.LBI11:
 331               		.file 2 "c:\\qmk_msys\\mingw64\\avr\\include\\util\\delay.h"
   1:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    All rights reserved.
   5:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   6:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
   9:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  12:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      distribution.
  16:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  17:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\qmk_msys\mingw64\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  21:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  33:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  35:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  38:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  endif
  42:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  44:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #include <math.h>
  47:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  48:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \file */
  49:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \code
  51:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \endcode
  55:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  56:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     used.
  60:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  61:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  70:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  79:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  83:c:\qmk_msys\mingw64\avr\include\util\delay.h **** */
  84:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  85:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\qmk_msys\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
  89:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  90:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \def F_CPU
  95:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
  97:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 103:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\qmk_msys\mingw64\avr\include\util\delay.h ****     integer value.
 107:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 108:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 110:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 111:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\qmk_msys\mingw64\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 114:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 115:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #  include <math.h>
 119:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 120:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 121:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /**
 122:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 124:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 126:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 129:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 131:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 137:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 142:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 147:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    respectively.
 151:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 152:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \note
 153:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 154:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 164:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 165:c:\qmk_msys\mingw64\avr\include\util\delay.h **** void
 166:c:\qmk_msys\mingw64\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 168:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 176:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 179:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 182:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#else
 183:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		//round up by default
 184:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 186:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 187:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 189:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #else
 190:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	{
 196:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		{
 200:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 			__ticks --;
 203:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		}
 204:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		return;
 205:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	}
 206:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	else
 207:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #endif
 210:c:\qmk_msys\mingw64\avr\include\util\delay.h **** }
 211:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 212:c:\qmk_msys\mingw64\avr\include\util\delay.h **** /**
 213:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 215:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 217:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 220:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 222:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 226:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 231:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 236:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    respectively.
 240:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 241:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \note
 242:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 243:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\qmk_msys\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 253:c:\qmk_msys\mingw64\avr\include\util\delay.h ****  */
 254:c:\qmk_msys\mingw64\avr\include\util\delay.h **** void
 255:c:\qmk_msys\mingw64\avr\include\util\delay.h **** _delay_us(double __us)
 332               		.loc 2 255 1 view .LVU54
 333               	.LBB12:
 256:c:\qmk_msys\mingw64\avr\include\util\delay.h **** {
 257:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 334               		.loc 2 257 2 view .LVU55
 258:c:\qmk_msys\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\qmk_msys\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 335               		.loc 2 261 2 view .LVU56
 262:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 336               		.loc 2 262 2 view .LVU57
 263:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 337               		.loc 2 263 2 view .LVU58
 264:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 265:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 268:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 271:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#else
 272:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		//round up by default
 273:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 338               		.loc 2 273 3 view .LVU59
 274:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	#endif
 275:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 
 276:c:\qmk_msys\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 339               		.loc 2 276 2 view .LVU60
 340 0000 80EA      		ldi r24,lo8(-96)
 341 0002 8A95      	1:	dec r24
 342 0004 01F4      		brne 1b
 343               	.LVL14:
 344               	/* epilogue start */
 345               		.loc 2 276 2 is_stmt 0 view .LVU61
 346               	.LBE12:
 347               	.LBE11:
 348               		.loc 1 88 1 view .LVU62
 349 0006 0895      		ret
 350               		.cfi_endproc
 351               	.LFE35:
 353               		.section	.text.matrix_output_select_delay,"ax",@progbits
 354               		.weak	matrix_output_select_delay
 356               	matrix_output_select_delay:
 357               	.LFB36:
  89:quantum/matrix_common.c **** 
  90:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_select_delay(void) { waitInputPinDelay(); }
 358               		.loc 1 90 61 is_stmt 1 view -0
 359               		.cfi_startproc
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 0 */
 363               	.L__stack_usage = 0
 364               		.loc 1 90 63 view .LVU64
 365 0000 00C0      		rjmp .
 366               	/* epilogue start */
 367               		.loc 1 90 1 is_stmt 0 view .LVU65
 368 0002 0895      		ret
 369               		.cfi_endproc
 370               	.LFE36:
 372               		.section	.text.matrix_output_unselect_delay,"ax",@progbits
 373               		.weak	matrix_output_unselect_delay
 375               	matrix_output_unselect_delay:
 376               	.LFB37:
  91:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_unselect_delay(void) { matrix_io_delay(); }
 377               		.loc 1 91 63 is_stmt 1 view -0
 378               		.cfi_startproc
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 383               		.loc 1 91 65 view .LVU67
 384 0000 0C94 0000 		jmp matrix_io_delay
 385               	.LVL15:
 386               		.cfi_endproc
 387               	.LFE37:
 389               		.section	.text.matrix_init_custom,"ax",@progbits
 390               		.weak	matrix_init_custom
 392               	matrix_init_custom:
 393               	.LFB46:
 394               		.cfi_startproc
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399               	/* epilogue start */
 400 0000 0895      		ret
 401               		.cfi_endproc
 402               	.LFE46:
 404               		.section	.text.matrix_scan_custom,"ax",@progbits
 405               		.weak	matrix_scan_custom
 407               	matrix_scan_custom:
 408               	.LVL16:
 409               	.LFB39:
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  94:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 410               		.loc 1 96 78 view -0
 411               		.cfi_startproc
 412               	/* prologue: function */
 413               	/* frame size = 0 */
 414               	/* stack size = 0 */
 415               	.L__stack_usage = 0
 416               		.loc 1 96 80 view .LVU69
 417               		.loc 1 96 1 is_stmt 0 view .LVU70
 418 0000 81E0      		ldi r24,lo8(1)
 419               	.LVL17:
 420               	/* epilogue start */
 421               		.loc 1 96 1 view .LVU71
 422 0002 0895      		ret
 423               		.cfi_endproc
 424               	.LFE39:
 426               		.section	.text.matrix_init,"ax",@progbits
 427               		.weak	matrix_init
 429               	matrix_init:
 430               	.LFB40:
  97:quantum/matrix_common.c **** 
  98:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 431               		.loc 1 98 46 is_stmt 1 view -0
 432               		.cfi_startproc
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 0 */
 436               	.L__stack_usage = 0
  99:quantum/matrix_common.c ****     matrix_init_custom();
 437               		.loc 1 99 5 view .LVU73
 438 0000 0E94 0000 		call matrix_init_custom
 439               	.LVL18:
 100:quantum/matrix_common.c **** 
 101:quantum/matrix_common.c ****     // initialize matrix state: all keys off
 102:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 440               		.loc 1 102 5 view .LVU74
 441               	.LBB13:
 442               		.loc 1 102 10 view .LVU75
 443               		.loc 1 102 25 view .LVU76
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 444               		.loc 1 103 9 view .LVU77
 445               		.loc 1 103 23 is_stmt 0 view .LVU78
 446 0004 A0E0      		ldi r26,lo8(raw_matrix)
 447 0006 B0E0      		ldi r27,hi8(raw_matrix)
 448 0008 1196      		adiw r26,1
 449 000a 1C92      		st X,__zero_reg__
 450 000c 1E92      		st -X,__zero_reg__
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 451               		.loc 1 104 9 is_stmt 1 view .LVU79
 452               		.loc 1 104 23 is_stmt 0 view .LVU80
 453 000e E0E0      		ldi r30,lo8(matrix)
 454 0010 F0E0      		ldi r31,hi8(matrix)
 455 0012 1182      		std Z+1,__zero_reg__
 456 0014 1082      		st Z,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 457               		.loc 1 102 42 is_stmt 1 view .LVU81
 458               	.LVL19:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 459               		.loc 1 102 25 view .LVU82
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 460               		.loc 1 103 9 view .LVU83
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 461               		.loc 1 103 23 is_stmt 0 view .LVU84
 462 0016 1396      		adiw r26,2+1
 463 0018 1C92      		st X,__zero_reg__
 464 001a 1E92      		st -X,__zero_reg__
 465 001c 1297      		sbiw r26,2
 466               		.loc 1 104 9 is_stmt 1 view .LVU85
 467               		.loc 1 104 23 is_stmt 0 view .LVU86
 468 001e 1382      		std Z+3,__zero_reg__
 469 0020 1282      		std Z+2,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 470               		.loc 1 102 42 is_stmt 1 view .LVU87
 471               	.LVL20:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 472               		.loc 1 102 25 view .LVU88
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 473               		.loc 1 103 9 view .LVU89
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 474               		.loc 1 103 23 is_stmt 0 view .LVU90
 475 0022 1596      		adiw r26,4+1
 476 0024 1C92      		st X,__zero_reg__
 477 0026 1E92      		st -X,__zero_reg__
 478 0028 1497      		sbiw r26,4
 479               		.loc 1 104 9 is_stmt 1 view .LVU91
 480               		.loc 1 104 23 is_stmt 0 view .LVU92
 481 002a 1582      		std Z+5,__zero_reg__
 482 002c 1482      		std Z+4,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 483               		.loc 1 102 42 is_stmt 1 view .LVU93
 484               	.LVL21:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 485               		.loc 1 102 25 view .LVU94
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 486               		.loc 1 103 9 view .LVU95
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 487               		.loc 1 103 23 is_stmt 0 view .LVU96
 488 002e 1796      		adiw r26,6+1
 489 0030 1C92      		st X,__zero_reg__
 490 0032 1E92      		st -X,__zero_reg__
 491 0034 1697      		sbiw r26,6
 492               		.loc 1 104 9 is_stmt 1 view .LVU97
 493               		.loc 1 104 23 is_stmt 0 view .LVU98
 494 0036 1782      		std Z+7,__zero_reg__
 495 0038 1682      		std Z+6,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 496               		.loc 1 102 42 is_stmt 1 view .LVU99
 497               	.LVL22:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 498               		.loc 1 102 25 view .LVU100
 499               	.LBE13:
 105:quantum/matrix_common.c ****     }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 500               		.loc 1 107 5 view .LVU101
 501 003a 84E0      		ldi r24,lo8(4)
 502 003c 0E94 0000 		call debounce_init
 503               	.LVL23:
 108:quantum/matrix_common.c **** 
 109:quantum/matrix_common.c ****     matrix_init_quantum();
 504               		.loc 1 109 5 view .LVU102
 505 0040 0C94 0000 		jmp matrix_init_quantum
 506               	.LVL24:
 507               		.cfi_endproc
 508               	.LFE40:
 510               		.section	.text.matrix_scan,"ax",@progbits
 511               		.weak	matrix_scan
 513               	matrix_scan:
 514               	.LFB41:
 110:quantum/matrix_common.c **** }
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 515               		.loc 1 112 49 view -0
 516               		.cfi_startproc
 517 0000 CF93      		push r28
 518               	.LCFI3:
 519               		.cfi_def_cfa_offset 3
 520               		.cfi_offset 28, -2
 521               	/* prologue: function */
 522               	/* frame size = 0 */
 523               	/* stack size = 1 */
 524               	.L__stack_usage = 1
 113:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 525               		.loc 1 113 5 view .LVU104
 526               		.loc 1 113 20 is_stmt 0 view .LVU105
 527 0002 80E0      		ldi r24,lo8(raw_matrix)
 528 0004 90E0      		ldi r25,hi8(raw_matrix)
 529 0006 0E94 0000 		call matrix_scan_custom
 530               	.LVL25:
 531 000a C82F      		mov r28,r24
 532               	.LVL26:
 114:quantum/matrix_common.c **** 
 115:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 533               		.loc 1 115 5 is_stmt 1 view .LVU106
 534 000c 282F      		mov r18,r24
 535 000e 44E0      		ldi r20,lo8(4)
 536 0010 60E0      		ldi r22,lo8(matrix)
 537 0012 70E0      		ldi r23,hi8(matrix)
 538 0014 80E0      		ldi r24,lo8(raw_matrix)
 539 0016 90E0      		ldi r25,hi8(raw_matrix)
 540               	.LVL27:
 541               		.loc 1 115 5 is_stmt 0 view .LVU107
 542 0018 0E94 0000 		call debounce
 543               	.LVL28:
 116:quantum/matrix_common.c **** 
 117:quantum/matrix_common.c ****     matrix_scan_quantum();
 544               		.loc 1 117 5 is_stmt 1 view .LVU108
 545 001c 0E94 0000 		call matrix_scan_quantum
 546               	.LVL29:
 118:quantum/matrix_common.c ****     return changed;
 547               		.loc 1 118 5 view .LVU109
 119:quantum/matrix_common.c **** }
 548               		.loc 1 119 1 is_stmt 0 view .LVU110
 549 0020 8C2F      		mov r24,r28
 550               	/* epilogue start */
 551 0022 CF91      		pop r28
 552               	.LVL30:
 553               		.loc 1 119 1 view .LVU111
 554 0024 0895      		ret
 555               		.cfi_endproc
 556               	.LFE41:
 558               		.section	.text.peek_matrix,"ax",@progbits
 559               		.weak	peek_matrix
 561               	peek_matrix:
 562               	.LVL31:
 563               	.LFB42:
 120:quantum/matrix_common.c **** 
 121:quantum/matrix_common.c **** __attribute__((weak)) bool peek_matrix(uint8_t row_index, uint8_t col_index, bool raw) { return 0 !
 564               		.loc 1 121 88 is_stmt 1 view -0
 565               		.cfi_startproc
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 0 */
 569               	.L__stack_usage = 0
 570               		.loc 1 121 90 view .LVU113
 571 0000 90E0      		ldi r25,0
 572 0002 880F      		lsl r24
 573 0004 991F      		rol r25
 574               	.LVL32:
 575               		.loc 1 121 132 is_stmt 0 view .LVU114
 576 0006 4423      		tst r20
 577 0008 01F0      		breq .L23
 578               		.loc 1 121 132 discriminator 1 view .LVU115
 579 000a 8050      		subi r24,lo8(-(raw_matrix))
 580 000c 9040      		sbci r25,hi8(-(raw_matrix))
 581               	.L26:
 582               		.loc 1 121 132 discriminator 2 view .LVU116
 583 000e FC01      		movw r30,r24
 584 0010 8081      		ld r24,Z
 585 0012 9181      		ldd r25,Z+1
 586               		.loc 1 121 175 discriminator 2 view .LVU117
 587 0014 21E0      		ldi r18,lo8(1)
 588 0016 30E0      		ldi r19,0
 589 0018 00C0      		rjmp 2f
 590               		1:
 591 001a 220F      		lsl r18
 592 001c 331F      		rol r19
 593               		2:
 594 001e 6A95      		dec r22
 595 0020 02F4      		brpl 1b
 596               		.loc 1 121 153 discriminator 2 view .LVU118
 597 0022 2823      		and r18,r24
 598 0024 3923      		and r19,r25
 599               		.loc 1 121 99 discriminator 2 view .LVU119
 600 0026 81E0      		ldi r24,lo8(1)
 601 0028 232B      		or r18,r19
 602 002a 01F4      		brne .L25
 603               		.loc 1 121 99 discriminator 4 view .LVU120
 604 002c 80E0      		ldi r24,0
 605               	.L25:
 606               	/* epilogue start */
 607               		.loc 1 121 1 discriminator 4 view .LVU121
 608 002e 0895      		ret
 609               	.L23:
 610               		.loc 1 121 132 discriminator 2 view .LVU122
 611 0030 8050      		subi r24,lo8(-(matrix))
 612 0032 9040      		sbci r25,hi8(-(matrix))
 613 0034 00C0      		rjmp .L26
 614               		.cfi_endproc
 615               	.LFE42:
 617               		.comm	matrix,8,1
 618               		.comm	raw_matrix,8,1
 619               		.text
 620               	.Letext0:
 621               		.file 3 "c:\\qmk_msys\\mingw64\\avr\\include\\stdint.h"
 622               		.file 4 "c:\\qmk_msys\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 623               		.file 5 "quantum/matrix.h"
 624               		.file 6 "tmk_core/common/report.h"
 625               		.file 7 "tmk_core/common/action.h"
 626               		.file 8 "tmk_core/common/host.h"
 627               		.file 9 "tmk_core/common/debug.h"
 628               		.file 10 "quantum/keycode_config.h"
 629               		.file 11 "tmk_core/common/timer.h"
 630               		.file 12 "quantum/sequencer/sequencer.h"
 631               		.file 13 "quantum/keymap.h"
 632               		.file 14 "quantum/color.h"
 633               		.file 15 "quantum/rgb_matrix_types.h"
 634               		.file 16 "quantum/rgb_matrix.h"
 635               		.file 17 "tmk_core/common/action_layer.h"
 636               		.file 18 "tmk_core/common/action_util.h"
 637               		.file 19 "quantum/send_string.h"
 638               		.file 20 "c:\\qmk_msys\\mingw64\\avr\\include\\stdlib.h"
 639               		.file 21 "quantum/process_keycode/process_tap_dance.h"
 640               		.file 22 "quantum/debounce.h"
 641               		.file 23 "quantum/bitwise.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix_common.c
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:4      *ABS*:000000000000003f __SREG__
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:33     .text.matrix_init_kb:0000000000000000 matrix_init_kb
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:50     .text.matrix_scan_user:0000000000000000 matrix_scan_user
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:65     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:82     .text.matrix_rows:0000000000000000 matrix_rows
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:101    .text.matrix_cols:0000000000000000 matrix_cols
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:120    .text.matrix_is_on:0000000000000000 matrix_is_on
                            *COM*:0000000000000008 matrix
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:168    .text.matrix_get_row:0000000000000000 matrix_get_row
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:198    .text.matrix_is_modified:0000000000000000 matrix_is_modified
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:221    .text.matrix_print:0000000000000000 matrix_print
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:243    .text.matrix_key_count:0000000000000000 matrix_key_count
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:319    .text.matrix_io_delay:0000000000000000 matrix_io_delay
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:356    .text.matrix_output_select_delay:0000000000000000 matrix_output_select_delay
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:375    .text.matrix_output_unselect_delay:0000000000000000 matrix_output_unselect_delay
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:392    .text.matrix_init_custom:0000000000000000 matrix_init_custom
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:407    .text.matrix_scan_custom:0000000000000000 matrix_scan_custom
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:429    .text.matrix_init:0000000000000000 matrix_init
                            *COM*:0000000000000008 raw_matrix
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:513    .text.matrix_scan:0000000000000000 matrix_scan
C:\Users\xue\AppData\Local\Temp\ccpBsLic.s:561    .text.peek_matrix:0000000000000000 peek_matrix

UNDEFINED SYMBOLS
debounce_active
bitpop16
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_clear_bss
